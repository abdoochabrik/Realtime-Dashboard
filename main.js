/*! For license information please see main.js.LICENSE.txt */
!function(){var t,e,n={63:function(t,e){function n(t){if(t)return function(t){for(var e in n.prototype)t[e]=n.prototype[e];return t}(t)}e.Q=n,n.prototype.on=n.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},n.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r=0;r<i.length;r++)if((n=i[r])===e||n.fn===e){i.splice(r,1);break}return 0===i.length&&delete this._callbacks["$"+t],this},n.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),n=this._callbacks["$"+t],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(n){i=0;for(var r=(n=n.slice(0)).length;i<r;++i)n[i].apply(this,e)}return this},n.prototype.emitReserved=n.prototype.emit,n.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},n.prototype.hasListeners=function(t){return!!this.listeners(t).length}},10:function(t){function e(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=e,e.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},e.prototype.reset=function(){this.attempts=0},e.prototype.setMin=function(t){this.ms=t},e.prototype.setMax=function(t){this.max=t},e.prototype.setJitter=function(t){this.jitter=t}},124:function(t,e,n){"use strict";var i=n(15),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,'/*\n * react-circular-progressbar styles\n * All of the styles in this file are configurable!\n */\n\n.CircularProgressbar {\n  /*\n   * This fixes an issue where the CircularProgressbar svg has\n   * 0 width inside a "display: flex" container, and thus not visible.\n   */\n  width: 100%;\n  /*\n   * This fixes a centering issue with CircularProgressbarWithChildren:\n   * https://github.com/kevinsqi/react-circular-progressbar/issues/94\n   */\n  vertical-align: middle;\n}\n\n.CircularProgressbar .CircularProgressbar-path {\n  stroke: #3e98c7;\n  stroke-linecap: round;\n  -webkit-transition: stroke-dashoffset 0.5s ease 0s;\n  transition: stroke-dashoffset 0.5s ease 0s;\n}\n\n.CircularProgressbar .CircularProgressbar-trail {\n  stroke: #d6d6d6;\n  /* Used when trail is not full diameter, i.e. when props.circleRatio is set */\n  stroke-linecap: round;\n}\n\n.CircularProgressbar .CircularProgressbar-text {\n  fill: #3e98c7;\n  font-size: 20px;\n  dominant-baseline: middle;\n  text-anchor: middle;\n}\n\n.CircularProgressbar .CircularProgressbar-background {\n  fill: #d6d6d6;\n}\n\n/*\n * Sample background styles. Use these with e.g.:\n *\n *   <CircularProgressbar\n *     className="CircularProgressbar-inverted"\n *     background\n *     percentage={50}\n *   />\n */\n.CircularProgressbar.CircularProgressbar-inverted .CircularProgressbar-background {\n  fill: #3e98c7;\n}\n\n.CircularProgressbar.CircularProgressbar-inverted .CircularProgressbar-text {\n  fill: #fff;\n}\n\n.CircularProgressbar.CircularProgressbar-inverted .CircularProgressbar-path {\n  stroke: #fff;\n}\n\n.CircularProgressbar.CircularProgressbar-inverted .CircularProgressbar-trail {\n  stroke: transparent;\n}\n',"",{version:3,sources:["webpack://./node_modules/react-circular-progressbar/dist/styles.css"],names:[],mappings:"AAAA;;;EAGE;;AAEF;EACE;;;IAGE;EACF,WAAW;EACX;;;IAGE;EACF,sBAAsB;AACxB;;AAEA;EACE,eAAe;EACf,qBAAqB;EACrB,kDAAkD;EAClD,0CAA0C;AAC5C;;AAEA;EACE,eAAe;EACf,6EAA6E;EAC7E,qBAAqB;AACvB;;AAEA;EACE,aAAa;EACb,eAAe;EACf,yBAAyB;EACzB,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf;;AAEA;;;;;;;;EAQE;AACF;EACE,aAAa;AACf;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,mBAAmB;AACrB",sourcesContent:['/*\n * react-circular-progressbar styles\n * All of the styles in this file are configurable!\n */\n\n.CircularProgressbar {\n  /*\n   * This fixes an issue where the CircularProgressbar svg has\n   * 0 width inside a "display: flex" container, and thus not visible.\n   */\n  width: 100%;\n  /*\n   * This fixes a centering issue with CircularProgressbarWithChildren:\n   * https://github.com/kevinsqi/react-circular-progressbar/issues/94\n   */\n  vertical-align: middle;\n}\n\n.CircularProgressbar .CircularProgressbar-path {\n  stroke: #3e98c7;\n  stroke-linecap: round;\n  -webkit-transition: stroke-dashoffset 0.5s ease 0s;\n  transition: stroke-dashoffset 0.5s ease 0s;\n}\n\n.CircularProgressbar .CircularProgressbar-trail {\n  stroke: #d6d6d6;\n  /* Used when trail is not full diameter, i.e. when props.circleRatio is set */\n  stroke-linecap: round;\n}\n\n.CircularProgressbar .CircularProgressbar-text {\n  fill: #3e98c7;\n  font-size: 20px;\n  dominant-baseline: middle;\n  text-anchor: middle;\n}\n\n.CircularProgressbar .CircularProgressbar-background {\n  fill: #d6d6d6;\n}\n\n/*\n * Sample background styles. Use these with e.g.:\n *\n *   <CircularProgressbar\n *     className="CircularProgressbar-inverted"\n *     background\n *     percentage={50}\n *   />\n */\n.CircularProgressbar.CircularProgressbar-inverted .CircularProgressbar-background {\n  fill: #3e98c7;\n}\n\n.CircularProgressbar.CircularProgressbar-inverted .CircularProgressbar-text {\n  fill: #fff;\n}\n\n.CircularProgressbar.CircularProgressbar-inverted .CircularProgressbar-path {\n  stroke: #fff;\n}\n\n.CircularProgressbar.CircularProgressbar-inverted .CircularProgressbar-trail {\n  stroke: transparent;\n}\n'],sourceRoot:""}]),e.Z=s},87:function(t,e,n){"use strict";var i=n(15),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,"","",{version:3,sources:[],names:[],mappings:"",sourceRoot:""}]),e.Z=s},525:function(t,e,n){"use strict";var i=n(15),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,".containerF {\r\n    width: 20%;\r\n    height: 360px;\r\n    background-color: white;\r\n    margin-left: 42px;\r\n    margin-top: 25px;\r\n    border-radius: 10px;\r\n}","",{version:3,sources:["webpack://./src/Component/FlightsDetails.css"],names:[],mappings:"AAAA;IACI,UAAU;IACV,aAAa;IACb,uBAAuB;IACvB,iBAAiB;IACjB,gBAAgB;IAChB,mBAAmB;AACvB",sourcesContent:[".containerF {\r\n    width: 20%;\r\n    height: 360px;\r\n    background-color: white;\r\n    margin-left: 42px;\r\n    margin-top: 25px;\r\n    border-radius: 10px;\r\n}"],sourceRoot:""}]),e.Z=s},669:function(t,e,n){"use strict";var i=n(15),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,".container {\r\n    width: 300px;\r\n    height: 820px;\r\n    -webkit-box-shadow: 2px -5px 10px -8px rgba(0,0,0,0.55); \r\nbox-shadow: 2px -5px 10px -8px rgba(0,0,0,0.55);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.container3 {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-Top: -830px;\r\n    margin-bottom: 50px;\r\n    position: absolute;\r\n}\r\n\r\n.container {\r\n    margin-top: 150px;\r\n}\r\n\r\n.container2 {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n\r\n}\r\n\r\n.image {\r\n    width: 30px;\r\n    height: 20px;\r\n    border-radius: 5px;\r\n}\r\n.image2 {\r\n    width: 160px;\r\n    height: 160px;\r\n    border-radius: 5px;\r\n    border-radius: 50%;\r\n}\r\n\r\n.country {\r\n    margin-left: 10px;\r\n}\r\n\r\n.containerGlobal{\r\n    display: flex;\r\n    flex-direction: row;   \r\n}\r\n\r\n.container4 {\r\n    padding: 30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.container5 {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-content: space-between;\r\n    margin-top: 30px;\r\n}\r\n.box {\r\n    width: 240px;\r\n    height: 160px;\r\n    -webkit-box-shadow: -1px -1px 22px -4px #000000; \r\nbox-shadow: -1px -1px 22px -4px #000000;\r\n    margin-inline: 20px;\r\n    border-radius: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 15px;\r\n}\r\n\r\n.date {\r\n    background-color: #E8E7E7;\r\n    padding: 8px;\r\n    border-radius: 5px;\r\n    \r\n}\r\n\r\n.boxDiv1 {\r\n    display: flex;\r\n    margin-top: 15px;\r\n    flex-direction: row;\r\n    align-items: center;\r\n}\r\n\r\n.label1 {\r\n    margin-left: 8px;\r\n    color: white;\r\n}\r\n.labeldiv2 {\r\n    background-color: orange;\r\n    border-radius: 50%;\r\n    width: 25px;\r\n    height: 35px;\r\n  \r\n}\r\n.labeldiv1 {\r\n    background-color: red;\r\n    border-radius: 50%;\r\n    width: 25px;\r\n    height: 35px;\r\n  \r\n}\r\n.labeldiv3 {\r\n    background-color: green;\r\n    border-radius: 50%;\r\n    width: 25px;\r\n    height: 35px;\r\n  \r\n}\r\n.table {\r\n    border-collapse: collapse;\r\n    width: 40px;\r\n\r\n  }\r\n  \r\n .th, .td {\r\n    text-align: left;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .tr:nth-child(even){background-color: #f2f2f2}\r\n  \r\n  .th {\r\n    background-color: #26106A;\r\n    color: white;\r\n  }\r\n\r\n  .sideContainer {\r\n      margin-top: 28px;\r\n      overflow-x: hidden;\r\n      overflow-y: auto;\r\n      height: 750px;\r\n  }","",{version:3,sources:["webpack://./src/Component/main.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,aAAa;IACb,uDAAuD;AAC3D,+CAA+C;IAC3C,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,kBAAkB;IAClB,mBAAmB;IACnB,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,mBAAmB;;AAEvB;;AAEA;IACI,WAAW;IACX,YAAY;IACZ,kBAAkB;AACtB;AACA;IACI,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,4BAA4B;IAC5B,gBAAgB;AACpB;AACA;IACI,YAAY;IACZ,aAAa;IACb,+CAA+C;AACnD,uCAAuC;IACnC,mBAAmB;IACnB,mBAAmB;IACnB,aAAa;IACb,sBAAsB;IACtB,aAAa;AACjB;;AAEA;IACI,yBAAyB;IACzB,YAAY;IACZ,kBAAkB;;AAEtB;;AAEA;IACI,aAAa;IACb,gBAAgB;IAChB,mBAAmB;IACnB,mBAAmB;AACvB;;AAEA;IACI,gBAAgB;IAChB,YAAY;AAChB;AACA;IACI,wBAAwB;IACxB,kBAAkB;IAClB,WAAW;IACX,YAAY;;AAEhB;AACA;IACI,qBAAqB;IACrB,kBAAkB;IAClB,WAAW;IACX,YAAY;;AAEhB;AACA;IACI,uBAAuB;IACvB,kBAAkB;IAClB,WAAW;IACX,YAAY;;AAEhB;AACA;IACI,yBAAyB;IACzB,WAAW;;EAEb;;CAED;IACG,gBAAgB;IAChB,aAAa;EACf;;EAEA,oBAAoB,yBAAyB;;EAE7C;IACE,yBAAyB;IACzB,YAAY;EACd;;EAEA;MACI,gBAAgB;MAChB,kBAAkB;MAClB,gBAAgB;MAChB,aAAa;EACjB",sourcesContent:[".container {\r\n    width: 300px;\r\n    height: 820px;\r\n    -webkit-box-shadow: 2px -5px 10px -8px rgba(0,0,0,0.55); \r\nbox-shadow: 2px -5px 10px -8px rgba(0,0,0,0.55);\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n\r\n.container3 {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    margin-Top: -830px;\r\n    margin-bottom: 50px;\r\n    position: absolute;\r\n}\r\n\r\n.container {\r\n    margin-top: 150px;\r\n}\r\n\r\n.container2 {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-items: center;\r\n\r\n}\r\n\r\n.image {\r\n    width: 30px;\r\n    height: 20px;\r\n    border-radius: 5px;\r\n}\r\n.image2 {\r\n    width: 160px;\r\n    height: 160px;\r\n    border-radius: 5px;\r\n    border-radius: 50%;\r\n}\r\n\r\n.country {\r\n    margin-left: 10px;\r\n}\r\n\r\n.containerGlobal{\r\n    display: flex;\r\n    flex-direction: row;   \r\n}\r\n\r\n.container4 {\r\n    padding: 30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.container5 {\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-content: space-between;\r\n    margin-top: 30px;\r\n}\r\n.box {\r\n    width: 240px;\r\n    height: 160px;\r\n    -webkit-box-shadow: -1px -1px 22px -4px #000000; \r\nbox-shadow: -1px -1px 22px -4px #000000;\r\n    margin-inline: 20px;\r\n    border-radius: 15px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 15px;\r\n}\r\n\r\n.date {\r\n    background-color: #E8E7E7;\r\n    padding: 8px;\r\n    border-radius: 5px;\r\n    \r\n}\r\n\r\n.boxDiv1 {\r\n    display: flex;\r\n    margin-top: 15px;\r\n    flex-direction: row;\r\n    align-items: center;\r\n}\r\n\r\n.label1 {\r\n    margin-left: 8px;\r\n    color: white;\r\n}\r\n.labeldiv2 {\r\n    background-color: orange;\r\n    border-radius: 50%;\r\n    width: 25px;\r\n    height: 35px;\r\n  \r\n}\r\n.labeldiv1 {\r\n    background-color: red;\r\n    border-radius: 50%;\r\n    width: 25px;\r\n    height: 35px;\r\n  \r\n}\r\n.labeldiv3 {\r\n    background-color: green;\r\n    border-radius: 50%;\r\n    width: 25px;\r\n    height: 35px;\r\n  \r\n}\r\n.table {\r\n    border-collapse: collapse;\r\n    width: 40px;\r\n\r\n  }\r\n  \r\n .th, .td {\r\n    text-align: left;\r\n    padding: 20px;\r\n  }\r\n  \r\n  .tr:nth-child(even){background-color: #f2f2f2}\r\n  \r\n  .th {\r\n    background-color: #26106A;\r\n    color: white;\r\n  }\r\n\r\n  .sideContainer {\r\n      margin-top: 28px;\r\n      overflow-x: hidden;\r\n      overflow-y: auto;\r\n      height: 750px;\r\n  }"],sourceRoot:""}]),e.Z=s},424:function(t,e,n){"use strict";var i=n(15),r=n.n(i),o=n(645),s=n.n(o)()(r());s.push([t.id,"body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n","",{version:3,sources:["webpack://./src/index.css"],names:[],mappings:"AAAA;EACE,SAAS;EACT;;cAEY;EACZ,mCAAmC;EACnC,kCAAkC;AACpC;;AAEA;EACE;aACW;AACb",sourcesContent:["body {\n  margin: 0;\n  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n    sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\ncode {\n  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n    monospace;\n}\n"],sourceRoot:""}]),e.Z=s},645:function(t){"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var s=this[o][0];null!=s&&(r[s]=!0)}for(var a=0;a<t.length;a++){var l=[].concat(t[a]);i&&r[l[0]]||(n&&(l[2]?l[2]="".concat(n," and ").concat(l[2]):l[2]=n),e.push(l))}},e}},15:function(t){"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,r=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=t&&("undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"]);if(null!=n){var i,r,o=[],s=!0,a=!1;try{for(n=n.call(t);!(s=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);s=!0);}catch(t){a=!0,r=t}finally{try{s||null==n.return||n.return()}finally{if(a)throw r}}return o}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],s=r[3];if(!s)return o;if("function"==typeof btoa){var a=btoa(unescape(encodeURIComponent(JSON.stringify(s)))),l="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(a),c="/*# ".concat(l," */"),u=s.sources.map((function(t){return"/*# sourceURL=".concat(s.sourceRoot||"").concat(t," */")}));return[o].concat(u).concat([c]).join("\n")}return[o].join("\n")}},58:function(t){try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},418:function(t){"use strict";var e=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function r(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},n=0;n<10;n++)e["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(t){i[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(t){return!1}}()?Object.assign:function(t,o){for(var s,a,l=r(t),c=1;c<arguments.length;c++){for(var u in s=Object(arguments[c]))n.call(s,u)&&(l[u]=s[u]);if(e){a=e(s);for(var h=0;h<a.length;h++)i.call(s,a[h])&&(l[a[h]]=s[a[h]])}}return l}},830:function(t,e){e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),i=0,r=n.length;i<r;i++){var o=n[i].split("=");e[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return e}},187:function(t){var e=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var i,r,o=t,s=t.indexOf("["),a=t.indexOf("]");-1!=s&&-1!=a&&(t=t.substring(0,s)+t.substring(s,a).replace(/:/g,";")+t.substring(a,t.length));for(var l,c,u=e.exec(t||""),h={},d=14;d--;)h[n[d]]=u[d]||"";return-1!=s&&-1!=a&&(h.source=o,h.host=h.host.substring(1,h.host.length-1).replace(/;/g,":"),h.authority=h.authority.replace("[","").replace("]","").replace(/;/g,":"),h.ipv6uri=!0),h.pathNames=(i=h.path,r=i.replace(/\/{2,9}/g,"/").split("/"),"/"!=i.substr(0,1)&&0!==i.length||r.splice(0,1),"/"==i.substr(i.length-1,1)&&r.splice(r.length-1,1),r),h.queryKey=(l=h.query,c={},l.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,n){e&&(c[e]=n)})),c),h}},448:function(t,e,n){"use strict";var i=n(294),r=n(418),o=n(840);function s(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!i)throw Error(s(227));var a=new Set,l={};function c(t,e){u(t,e),u(t+"Capture",e)}function u(t,e){for(l[t]=e,t=0;t<e.length;t++)a.add(e[t])}var h=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,f=Object.prototype.hasOwnProperty,p={},g={};function m(t,e,n,i,r,o,s){this.acceptsBooleans=2===e||3===e||4===e,this.attributeName=i,this.attributeNamespace=r,this.mustUseProperty=n,this.propertyName=t,this.type=e,this.sanitizeURL=o,this.removeEmptyString=s}var b={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(t){b[t]=new m(t,0,!1,t,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(t){var e=t[0];b[e]=new m(e,1,!1,t[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(t){b[t]=new m(t,2,!1,t.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(t){b[t]=new m(t,2,!1,t,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(t){b[t]=new m(t,3,!1,t.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(t){b[t]=new m(t,3,!0,t,null,!1,!1)})),["capture","download"].forEach((function(t){b[t]=new m(t,4,!1,t,null,!1,!1)})),["cols","rows","size","span"].forEach((function(t){b[t]=new m(t,6,!1,t,null,!1,!1)})),["rowSpan","start"].forEach((function(t){b[t]=new m(t,5,!1,t.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function v(t){return t[1].toUpperCase()}function x(t,e,n,i){var r=b.hasOwnProperty(e)?b[e]:null;(null!==r?0===r.type:!i&&2<e.length&&("o"===e[0]||"O"===e[0])&&("n"===e[1]||"N"===e[1]))||(function(t,e,n,i){if(null==e||function(t,e,n,i){if(null!==n&&0===n.type)return!1;switch(typeof e){case"function":case"symbol":return!0;case"boolean":return!i&&(null!==n?!n.acceptsBooleans:"data-"!==(t=t.toLowerCase().slice(0,5))&&"aria-"!==t);default:return!1}}(t,e,n,i))return!0;if(i)return!1;if(null!==n)switch(n.type){case 3:return!e;case 4:return!1===e;case 5:return isNaN(e);case 6:return isNaN(e)||1>e}return!1}(e,n,r,i)&&(n=null),i||null===r?function(t){return!!f.call(g,t)||!f.call(p,t)&&(d.test(t)?g[t]=!0:(p[t]=!0,!1))}(e)&&(null===n?t.removeAttribute(e):t.setAttribute(e,""+n)):r.mustUseProperty?t[r.propertyName]=null===n?3!==r.type&&"":n:(e=r.attributeName,i=r.attributeNamespace,null===n?t.removeAttribute(e):(n=3===(r=r.type)||4===r&&!0===n?"":""+n,i?t.setAttributeNS(i,e,n):t.setAttribute(e,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(t){var e=t.replace(y,v);b[e]=new m(e,1,!1,t,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!1,!1)})),b.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(t){b[t]=new m(t,1,!1,t.toLowerCase(),null,!0,!0)}));var _=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,A=60107,C=60108,S=60114,E=60109,M=60110,P=60112,O=60113,T=60120,D=60115,L=60116,R=60121,I=60128,B=60129,N=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;w=F("react.element"),k=F("react.portal"),A=F("react.fragment"),C=F("react.strict_mode"),S=F("react.profiler"),E=F("react.provider"),M=F("react.context"),P=F("react.forward_ref"),O=F("react.suspense"),T=F("react.suspense_list"),D=F("react.memo"),L=F("react.lazy"),R=F("react.block"),F("react.scope"),I=F("react.opaque.id"),B=F("react.debug_trace_mode"),N=F("react.offscreen"),z=F("react.legacy_hidden")}var j,V="function"==typeof Symbol&&Symbol.iterator;function W(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=V&&t[V]||t["@@iterator"])?t:null}function H(t){if(void 0===j)try{throw Error()}catch(t){var e=t.stack.trim().match(/\n( *(at )?)/);j=e&&e[1]||""}return"\n"+j+t}var U=!1;function $(t,e){if(!t||U)return"";U=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(e)if(e=function(){throw Error()},Object.defineProperty(e.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(e,[])}catch(t){var i=t}Reflect.construct(t,[],e)}else{try{e.call()}catch(t){i=t}t.call(e.prototype)}else{try{throw Error()}catch(t){i=t}t()}}catch(t){if(t&&i&&"string"==typeof t.stack){for(var r=t.stack.split("\n"),o=i.stack.split("\n"),s=r.length-1,a=o.length-1;1<=s&&0<=a&&r[s]!==o[a];)a--;for(;1<=s&&0<=a;s--,a--)if(r[s]!==o[a]){if(1!==s||1!==a)do{if(s--,0>--a||r[s]!==o[a])return"\n"+r[s].replace(" at new "," at ")}while(1<=s&&0<=a);break}}}finally{U=!1,Error.prepareStackTrace=n}return(t=t?t.displayName||t.name:"")?H(t):""}function Y(t){switch(t.tag){case 5:return H(t.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return $(t.type,!1);case 11:return $(t.type.render,!1);case 22:return $(t.type._render,!1);case 1:return $(t.type,!0);default:return""}}function q(t){if(null==t)return null;if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t;switch(t){case A:return"Fragment";case k:return"Portal";case S:return"Profiler";case C:return"StrictMode";case O:return"Suspense";case T:return"SuspenseList"}if("object"==typeof t)switch(t.$$typeof){case M:return(t.displayName||"Context")+".Consumer";case E:return(t._context.displayName||"Context")+".Provider";case P:var e=t.render;return e=e.displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case D:return q(t.type);case R:return q(t._render);case L:e=t._payload,t=t._init;try{return q(t(e))}catch(t){}}return null}function Q(t){switch(typeof t){case"boolean":case"number":case"object":case"string":case"undefined":return t;default:return""}}function X(t){var e=t.type;return(t=t.nodeName)&&"input"===t.toLowerCase()&&("checkbox"===e||"radio"===e)}function K(t){t._valueTracker||(t._valueTracker=function(t){var e=X(t)?"checked":"value",n=Object.getOwnPropertyDescriptor(t.constructor.prototype,e),i=""+t[e];if(!t.hasOwnProperty(e)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var r=n.get,o=n.set;return Object.defineProperty(t,e,{configurable:!0,get:function(){return r.call(this)},set:function(t){i=""+t,o.call(this,t)}}),Object.defineProperty(t,e,{enumerable:n.enumerable}),{getValue:function(){return i},setValue:function(t){i=""+t},stopTracking:function(){t._valueTracker=null,delete t[e]}}}}(t))}function Z(t){if(!t)return!1;var e=t._valueTracker;if(!e)return!0;var n=e.getValue(),i="";return t&&(i=X(t)?t.checked?"true":"false":t.value),(t=i)!==n&&(e.setValue(t),!0)}function G(t){if(void 0===(t=t||("undefined"!=typeof document?document:void 0)))return null;try{return t.activeElement||t.body}catch(e){return t.body}}function J(t,e){var n=e.checked;return r({},e,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:t._wrapperState.initialChecked})}function tt(t,e){var n=null==e.defaultValue?"":e.defaultValue,i=null!=e.checked?e.checked:e.defaultChecked;n=Q(null!=e.value?e.value:n),t._wrapperState={initialChecked:i,initialValue:n,controlled:"checkbox"===e.type||"radio"===e.type?null!=e.checked:null!=e.value}}function et(t,e){null!=(e=e.checked)&&x(t,"checked",e,!1)}function nt(t,e){et(t,e);var n=Q(e.value),i=e.type;if(null!=n)"number"===i?(0===n&&""===t.value||t.value!=n)&&(t.value=""+n):t.value!==""+n&&(t.value=""+n);else if("submit"===i||"reset"===i)return void t.removeAttribute("value");e.hasOwnProperty("value")?rt(t,e.type,n):e.hasOwnProperty("defaultValue")&&rt(t,e.type,Q(e.defaultValue)),null==e.checked&&null!=e.defaultChecked&&(t.defaultChecked=!!e.defaultChecked)}function it(t,e,n){if(e.hasOwnProperty("value")||e.hasOwnProperty("defaultValue")){var i=e.type;if(!("submit"!==i&&"reset"!==i||void 0!==e.value&&null!==e.value))return;e=""+t._wrapperState.initialValue,n||e===t.value||(t.value=e),t.defaultValue=e}""!==(n=t.name)&&(t.name=""),t.defaultChecked=!!t._wrapperState.initialChecked,""!==n&&(t.name=n)}function rt(t,e,n){"number"===e&&G(t.ownerDocument)===t||(null==n?t.defaultValue=""+t._wrapperState.initialValue:t.defaultValue!==""+n&&(t.defaultValue=""+n))}function ot(t,e){return t=r({children:void 0},e),(e=function(t){var e="";return i.Children.forEach(t,(function(t){null!=t&&(e+=t)})),e}(e.children))&&(t.children=e),t}function st(t,e,n,i){if(t=t.options,e){e={};for(var r=0;r<n.length;r++)e["$"+n[r]]=!0;for(n=0;n<t.length;n++)r=e.hasOwnProperty("$"+t[n].value),t[n].selected!==r&&(t[n].selected=r),r&&i&&(t[n].defaultSelected=!0)}else{for(n=""+Q(n),e=null,r=0;r<t.length;r++){if(t[r].value===n)return t[r].selected=!0,void(i&&(t[r].defaultSelected=!0));null!==e||t[r].disabled||(e=t[r])}null!==e&&(e.selected=!0)}}function at(t,e){if(null!=e.dangerouslySetInnerHTML)throw Error(s(91));return r({},e,{value:void 0,defaultValue:void 0,children:""+t._wrapperState.initialValue})}function lt(t,e){var n=e.value;if(null==n){if(n=e.children,e=e.defaultValue,null!=n){if(null!=e)throw Error(s(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(s(93));n=n[0]}e=n}null==e&&(e=""),n=e}t._wrapperState={initialValue:Q(n)}}function ct(t,e){var n=Q(e.value),i=Q(e.defaultValue);null!=n&&((n=""+n)!==t.value&&(t.value=n),null==e.defaultValue&&t.defaultValue!==n&&(t.defaultValue=n)),null!=i&&(t.defaultValue=""+i)}function ut(t){var e=t.textContent;e===t._wrapperState.initialValue&&""!==e&&null!==e&&(t.value=e)}var ht="http://www.w3.org/1999/xhtml";function dt(t){switch(t){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function ft(t,e){return null==t||"http://www.w3.org/1999/xhtml"===t?dt(e):"http://www.w3.org/2000/svg"===t&&"foreignObject"===e?"http://www.w3.org/1999/xhtml":t}var pt,gt,mt=(gt=function(t,e){if("http://www.w3.org/2000/svg"!==t.namespaceURI||"innerHTML"in t)t.innerHTML=e;else{for((pt=pt||document.createElement("div")).innerHTML="<svg>"+e.valueOf().toString()+"</svg>",e=pt.firstChild;t.firstChild;)t.removeChild(t.firstChild);for(;e.firstChild;)t.appendChild(e.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,e,n,i){MSApp.execUnsafeLocalFunction((function(){return gt(t,e)}))}:gt);function bt(t,e){if(e){var n=t.firstChild;if(n&&n===t.lastChild&&3===n.nodeType)return void(n.nodeValue=e)}t.textContent=e}var yt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},vt=["Webkit","ms","Moz","O"];function xt(t,e,n){return null==e||"boolean"==typeof e||""===e?"":n||"number"!=typeof e||0===e||yt.hasOwnProperty(t)&&yt[t]?(""+e).trim():e+"px"}function _t(t,e){for(var n in t=t.style,e)if(e.hasOwnProperty(n)){var i=0===n.indexOf("--"),r=xt(n,e[n],i);"float"===n&&(n="cssFloat"),i?t.setProperty(n,r):t[n]=r}}Object.keys(yt).forEach((function(t){vt.forEach((function(e){e=e+t.charAt(0).toUpperCase()+t.substring(1),yt[e]=yt[t]}))}));var wt=r({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function kt(t,e){if(e){if(wt[t]&&(null!=e.children||null!=e.dangerouslySetInnerHTML))throw Error(s(137,t));if(null!=e.dangerouslySetInnerHTML){if(null!=e.children)throw Error(s(60));if("object"!=typeof e.dangerouslySetInnerHTML||!("__html"in e.dangerouslySetInnerHTML))throw Error(s(61))}if(null!=e.style&&"object"!=typeof e.style)throw Error(s(62))}}function At(t,e){if(-1===t.indexOf("-"))return"string"==typeof e.is;switch(t){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Ct(t){return(t=t.target||t.srcElement||window).correspondingUseElement&&(t=t.correspondingUseElement),3===t.nodeType?t.parentNode:t}var St=null,Et=null,Mt=null;function Pt(t){if(t=nr(t)){if("function"!=typeof St)throw Error(s(280));var e=t.stateNode;e&&(e=rr(e),St(t.stateNode,t.type,e))}}function Ot(t){Et?Mt?Mt.push(t):Mt=[t]:Et=t}function Tt(){if(Et){var t=Et,e=Mt;if(Mt=Et=null,Pt(t),e)for(t=0;t<e.length;t++)Pt(e[t])}}function Dt(t,e){return t(e)}function Lt(t,e,n,i,r){return t(e,n,i,r)}function Rt(){}var It=Dt,Bt=!1,Nt=!1;function zt(){null===Et&&null===Mt||(Rt(),Tt())}function Ft(t,e){var n=t.stateNode;if(null===n)return null;var i=rr(n);if(null===i)return null;n=i[e];t:switch(e){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(i=!i.disabled)||(i=!("button"===(t=t.type)||"input"===t||"select"===t||"textarea"===t)),t=!i;break t;default:t=!1}if(t)return null;if(n&&"function"!=typeof n)throw Error(s(231,e,typeof n));return n}var jt=!1;if(h)try{var Vt={};Object.defineProperty(Vt,"passive",{get:function(){jt=!0}}),window.addEventListener("test",Vt,Vt),window.removeEventListener("test",Vt,Vt)}catch(gt){jt=!1}function Wt(t,e,n,i,r,o,s,a,l){var c=Array.prototype.slice.call(arguments,3);try{e.apply(n,c)}catch(t){this.onError(t)}}var Ht=!1,Ut=null,$t=!1,Yt=null,qt={onError:function(t){Ht=!0,Ut=t}};function Qt(t,e,n,i,r,o,s,a,l){Ht=!1,Ut=null,Wt.apply(qt,arguments)}function Xt(t){var e=t,n=t;if(t.alternate)for(;e.return;)e=e.return;else{t=e;do{0!=(1026&(e=t).flags)&&(n=e.return),t=e.return}while(t)}return 3===e.tag?n:null}function Kt(t){if(13===t.tag){var e=t.memoizedState;if(null===e&&null!==(t=t.alternate)&&(e=t.memoizedState),null!==e)return e.dehydrated}return null}function Zt(t){if(Xt(t)!==t)throw Error(s(188))}function Gt(t){if(t=function(t){var e=t.alternate;if(!e){if(null===(e=Xt(t)))throw Error(s(188));return e!==t?null:t}for(var n=t,i=e;;){var r=n.return;if(null===r)break;var o=r.alternate;if(null===o){if(null!==(i=r.return)){n=i;continue}break}if(r.child===o.child){for(o=r.child;o;){if(o===n)return Zt(r),t;if(o===i)return Zt(r),e;o=o.sibling}throw Error(s(188))}if(n.return!==i.return)n=r,i=o;else{for(var a=!1,l=r.child;l;){if(l===n){a=!0,n=r,i=o;break}if(l===i){a=!0,i=r,n=o;break}l=l.sibling}if(!a){for(l=o.child;l;){if(l===n){a=!0,n=o,i=r;break}if(l===i){a=!0,i=o,n=r;break}l=l.sibling}if(!a)throw Error(s(189))}}if(n.alternate!==i)throw Error(s(190))}if(3!==n.tag)throw Error(s(188));return n.stateNode.current===n?t:e}(t),!t)return null;for(var e=t;;){if(5===e.tag||6===e.tag)return e;if(e.child)e.child.return=e,e=e.child;else{if(e===t)break;for(;!e.sibling;){if(!e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}}return null}function Jt(t,e){for(var n=t.alternate;null!==e;){if(e===t||e===n)return!0;e=e.return}return!1}var te,ee,ne,ie,re=!1,oe=[],se=null,ae=null,le=null,ce=new Map,ue=new Map,he=[],de="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function fe(t,e,n,i,r){return{blockedOn:t,domEventName:e,eventSystemFlags:16|n,nativeEvent:r,targetContainers:[i]}}function pe(t,e){switch(t){case"focusin":case"focusout":se=null;break;case"dragenter":case"dragleave":ae=null;break;case"mouseover":case"mouseout":le=null;break;case"pointerover":case"pointerout":ce.delete(e.pointerId);break;case"gotpointercapture":case"lostpointercapture":ue.delete(e.pointerId)}}function ge(t,e,n,i,r,o){return null===t||t.nativeEvent!==o?(t=fe(e,n,i,r,o),null!==e&&null!==(e=nr(e))&&ee(e),t):(t.eventSystemFlags|=i,e=t.targetContainers,null!==r&&-1===e.indexOf(r)&&e.push(r),t)}function me(t){var e=er(t.target);if(null!==e){var n=Xt(e);if(null!==n)if(13===(e=n.tag)){if(null!==(e=Kt(n)))return t.blockedOn=e,void ie(t.lanePriority,(function(){o.unstable_runWithPriority(t.priority,(function(){ne(n)}))}))}else if(3===e&&n.stateNode.hydrate)return void(t.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}t.blockedOn=null}function be(t){if(null!==t.blockedOn)return!1;for(var e=t.targetContainers;0<e.length;){var n=Ge(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n)return null!==(e=nr(n))&&ee(e),t.blockedOn=n,!1;e.shift()}return!0}function ye(t,e,n){be(t)&&n.delete(e)}function ve(){for(re=!1;0<oe.length;){var t=oe[0];if(null!==t.blockedOn){null!==(t=nr(t.blockedOn))&&te(t);break}for(var e=t.targetContainers;0<e.length;){var n=Ge(t.domEventName,t.eventSystemFlags,e[0],t.nativeEvent);if(null!==n){t.blockedOn=n;break}e.shift()}null===t.blockedOn&&oe.shift()}null!==se&&be(se)&&(se=null),null!==ae&&be(ae)&&(ae=null),null!==le&&be(le)&&(le=null),ce.forEach(ye),ue.forEach(ye)}function xe(t,e){t.blockedOn===e&&(t.blockedOn=null,re||(re=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,ve)))}function _e(t){function e(e){return xe(e,t)}if(0<oe.length){xe(oe[0],t);for(var n=1;n<oe.length;n++){var i=oe[n];i.blockedOn===t&&(i.blockedOn=null)}}for(null!==se&&xe(se,t),null!==ae&&xe(ae,t),null!==le&&xe(le,t),ce.forEach(e),ue.forEach(e),n=0;n<he.length;n++)(i=he[n]).blockedOn===t&&(i.blockedOn=null);for(;0<he.length&&null===(n=he[0]).blockedOn;)me(n),null===n.blockedOn&&he.shift()}function we(t,e){var n={};return n[t.toLowerCase()]=e.toLowerCase(),n["Webkit"+t]="webkit"+e,n["Moz"+t]="moz"+e,n}var ke={animationend:we("Animation","AnimationEnd"),animationiteration:we("Animation","AnimationIteration"),animationstart:we("Animation","AnimationStart"),transitionend:we("Transition","TransitionEnd")},Ae={},Ce={};function Se(t){if(Ae[t])return Ae[t];if(!ke[t])return t;var e,n=ke[t];for(e in n)if(n.hasOwnProperty(e)&&e in Ce)return Ae[t]=n[e];return t}h&&(Ce=document.createElement("div").style,"AnimationEvent"in window||(delete ke.animationend.animation,delete ke.animationiteration.animation,delete ke.animationstart.animation),"TransitionEvent"in window||delete ke.transitionend.transition);var Ee=Se("animationend"),Me=Se("animationiteration"),Pe=Se("animationstart"),Oe=Se("transitionend"),Te=new Map,De=new Map,Le=["abort","abort",Ee,"animationEnd",Me,"animationIteration",Pe,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Oe,"transitionEnd","waiting","waiting"];function Re(t,e){for(var n=0;n<t.length;n+=2){var i=t[n],r=t[n+1];r="on"+(r[0].toUpperCase()+r.slice(1)),De.set(i,e),Te.set(i,r),c(r,[i])}}(0,o.unstable_now)();var Ie=8;function Be(t){if(0!=(1&t))return Ie=15,1;if(0!=(2&t))return Ie=14,2;if(0!=(4&t))return Ie=13,4;var e=24&t;return 0!==e?(Ie=12,e):0!=(32&t)?(Ie=11,32):0!=(e=192&t)?(Ie=10,e):0!=(256&t)?(Ie=9,256):0!=(e=3584&t)?(Ie=8,e):0!=(4096&t)?(Ie=7,4096):0!=(e=4186112&t)?(Ie=6,e):0!=(e=62914560&t)?(Ie=5,e):67108864&t?(Ie=4,67108864):0!=(134217728&t)?(Ie=3,134217728):0!=(e=805306368&t)?(Ie=2,e):0!=(1073741824&t)?(Ie=1,1073741824):(Ie=8,t)}function Ne(t,e){var n=t.pendingLanes;if(0===n)return Ie=0;var i=0,r=0,o=t.expiredLanes,s=t.suspendedLanes,a=t.pingedLanes;if(0!==o)i=o,r=Ie=15;else if(0!=(o=134217727&n)){var l=o&~s;0!==l?(i=Be(l),r=Ie):0!=(a&=o)&&(i=Be(a),r=Ie)}else 0!=(o=n&~s)?(i=Be(o),r=Ie):0!==a&&(i=Be(a),r=Ie);if(0===i)return 0;if(i=n&((0>(i=31-He(i))?0:1<<i)<<1)-1,0!==e&&e!==i&&0==(e&s)){if(Be(e),r<=Ie)return e;Ie=r}if(0!==(e=t.entangledLanes))for(t=t.entanglements,e&=i;0<e;)r=1<<(n=31-He(e)),i|=t[n],e&=~r;return i}function ze(t){return 0!=(t=-1073741825&t.pendingLanes)?t:1073741824&t?1073741824:0}function Fe(t,e){switch(t){case 15:return 1;case 14:return 2;case 12:return 0===(t=je(24&~e))?Fe(10,e):t;case 10:return 0===(t=je(192&~e))?Fe(8,e):t;case 8:return 0===(t=je(3584&~e))&&0===(t=je(4186112&~e))&&(t=512),t;case 2:return 0===(e=je(805306368&~e))&&(e=268435456),e}throw Error(s(358,t))}function je(t){return t&-t}function Ve(t){for(var e=[],n=0;31>n;n++)e.push(t);return e}function We(t,e,n){t.pendingLanes|=e;var i=e-1;t.suspendedLanes&=i,t.pingedLanes&=i,(t=t.eventTimes)[e=31-He(e)]=n}var He=Math.clz32?Math.clz32:function(t){return 0===t?32:31-(Ue(t)/$e|0)|0},Ue=Math.log,$e=Math.LN2,Ye=o.unstable_UserBlockingPriority,qe=o.unstable_runWithPriority,Qe=!0;function Xe(t,e,n,i){Bt||Rt();var r=Ze,o=Bt;Bt=!0;try{Lt(r,t,e,n,i)}finally{(Bt=o)||zt()}}function Ke(t,e,n,i){qe(Ye,Ze.bind(null,t,e,n,i))}function Ze(t,e,n,i){var r;if(Qe)if((r=0==(4&e))&&0<oe.length&&-1<de.indexOf(t))t=fe(null,t,e,n,i),oe.push(t);else{var o=Ge(t,e,n,i);if(null===o)r&&pe(t,i);else{if(r){if(-1<de.indexOf(t))return t=fe(o,t,e,n,i),void oe.push(t);if(function(t,e,n,i,r){switch(e){case"focusin":return se=ge(se,t,e,n,i,r),!0;case"dragenter":return ae=ge(ae,t,e,n,i,r),!0;case"mouseover":return le=ge(le,t,e,n,i,r),!0;case"pointerover":var o=r.pointerId;return ce.set(o,ge(ce.get(o)||null,t,e,n,i,r)),!0;case"gotpointercapture":return o=r.pointerId,ue.set(o,ge(ue.get(o)||null,t,e,n,i,r)),!0}return!1}(o,t,e,n,i))return;pe(t,i)}Ri(t,e,i,null,n)}}}function Ge(t,e,n,i){var r=Ct(i);if(null!==(r=er(r))){var o=Xt(r);if(null===o)r=null;else{var s=o.tag;if(13===s){if(null!==(r=Kt(o)))return r;r=null}else if(3===s){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;r=null}else o!==r&&(r=null)}}return Ri(t,e,i,r,n),null}var Je=null,tn=null,en=null;function nn(){if(en)return en;var t,e,n=tn,i=n.length,r="value"in Je?Je.value:Je.textContent,o=r.length;for(t=0;t<i&&n[t]===r[t];t++);var s=i-t;for(e=1;e<=s&&n[i-e]===r[o-e];e++);return en=r.slice(t,1<e?1-e:void 0)}function rn(t){var e=t.keyCode;return"charCode"in t?0===(t=t.charCode)&&13===e&&(t=13):t=e,10===t&&(t=13),32<=t||13===t?t:0}function on(){return!0}function sn(){return!1}function an(t){function e(e,n,i,r,o){for(var s in this._reactName=e,this._targetInst=i,this.type=n,this.nativeEvent=r,this.target=o,this.currentTarget=null,t)t.hasOwnProperty(s)&&(e=t[s],this[s]=e?e(r):r[s]);return this.isDefaultPrevented=(null!=r.defaultPrevented?r.defaultPrevented:!1===r.returnValue)?on:sn,this.isPropagationStopped=sn,this}return r(e.prototype,{preventDefault:function(){this.defaultPrevented=!0;var t=this.nativeEvent;t&&(t.preventDefault?t.preventDefault():"unknown"!=typeof t.returnValue&&(t.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var t=this.nativeEvent;t&&(t.stopPropagation?t.stopPropagation():"unknown"!=typeof t.cancelBubble&&(t.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),e}var ln,cn,un,hn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(t){return t.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=an(hn),fn=r({},hn,{view:0,detail:0}),pn=an(fn),gn=r({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(t){return void 0===t.relatedTarget?t.fromElement===t.srcElement?t.toElement:t.fromElement:t.relatedTarget},movementX:function(t){return"movementX"in t?t.movementX:(t!==un&&(un&&"mousemove"===t.type?(ln=t.screenX-un.screenX,cn=t.screenY-un.screenY):cn=ln=0,un=t),ln)},movementY:function(t){return"movementY"in t?t.movementY:cn}}),mn=an(gn),bn=an(r({},gn,{dataTransfer:0})),yn=an(r({},fn,{relatedTarget:0})),vn=an(r({},hn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=r({},hn,{clipboardData:function(t){return"clipboardData"in t?t.clipboardData:window.clipboardData}}),_n=an(xn),wn=an(r({},hn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},An={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Cn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Sn(t){var e=this.nativeEvent;return e.getModifierState?e.getModifierState(t):!!(t=Cn[t])&&!!e[t]}function En(){return Sn}var Mn=r({},fn,{key:function(t){if(t.key){var e=kn[t.key]||t.key;if("Unidentified"!==e)return e}return"keypress"===t.type?13===(t=rn(t))?"Enter":String.fromCharCode(t):"keydown"===t.type||"keyup"===t.type?An[t.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(t){return"keypress"===t.type?rn(t):0},keyCode:function(t){return"keydown"===t.type||"keyup"===t.type?t.keyCode:0},which:function(t){return"keypress"===t.type?rn(t):"keydown"===t.type||"keyup"===t.type?t.keyCode:0}}),Pn=an(Mn),On=an(r({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Tn=an(r({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Dn=an(r({},hn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Ln=r({},gn,{deltaX:function(t){return"deltaX"in t?t.deltaX:"wheelDeltaX"in t?-t.wheelDeltaX:0},deltaY:function(t){return"deltaY"in t?t.deltaY:"wheelDeltaY"in t?-t.wheelDeltaY:"wheelDelta"in t?-t.wheelDelta:0},deltaZ:0,deltaMode:0}),Rn=an(Ln),In=[9,13,27,32],Bn=h&&"CompositionEvent"in window,Nn=null;h&&"documentMode"in document&&(Nn=document.documentMode);var zn=h&&"TextEvent"in window&&!Nn,Fn=h&&(!Bn||Nn&&8<Nn&&11>=Nn),jn=String.fromCharCode(32),Vn=!1;function Wn(t,e){switch(t){case"keyup":return-1!==In.indexOf(e.keyCode);case"keydown":return 229!==e.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(t){return"object"==typeof(t=t.detail)&&"data"in t?t.data:null}var Un=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Yn(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return"input"===e?!!$n[t.type]:"textarea"===e}function qn(t,e,n,i){Ot(i),0<(e=Bi(e,"onChange")).length&&(n=new dn("onChange","change",null,n,i),t.push({event:n,listeners:e}))}var Qn=null,Xn=null;function Kn(t){Mi(t,0)}function Zn(t){if(Z(ir(t)))return t}function Gn(t,e){if("change"===t)return e}var Jn=!1;if(h){var ti;if(h){var ei="oninput"in document;if(!ei){var ni=document.createElement("div");ni.setAttribute("oninput","return;"),ei="function"==typeof ni.oninput}ti=ei}else ti=!1;Jn=ti&&(!document.documentMode||9<document.documentMode)}function ii(){Qn&&(Qn.detachEvent("onpropertychange",ri),Xn=Qn=null)}function ri(t){if("value"===t.propertyName&&Zn(Xn)){var e=[];if(qn(e,Xn,t,Ct(t)),t=Kn,Bt)t(e);else{Bt=!0;try{Dt(t,e)}finally{Bt=!1,zt()}}}}function oi(t,e,n){"focusin"===t?(ii(),Xn=n,(Qn=e).attachEvent("onpropertychange",ri)):"focusout"===t&&ii()}function si(t){if("selectionchange"===t||"keyup"===t||"keydown"===t)return Zn(Xn)}function ai(t,e){if("click"===t)return Zn(e)}function li(t,e){if("input"===t||"change"===t)return Zn(e)}var ci="function"==typeof Object.is?Object.is:function(t,e){return t===e&&(0!==t||1/t==1/e)||t!=t&&e!=e},ui=Object.prototype.hasOwnProperty;function hi(t,e){if(ci(t,e))return!0;if("object"!=typeof t||null===t||"object"!=typeof e||null===e)return!1;var n=Object.keys(t),i=Object.keys(e);if(n.length!==i.length)return!1;for(i=0;i<n.length;i++)if(!ui.call(e,n[i])||!ci(t[n[i]],e[n[i]]))return!1;return!0}function di(t){for(;t&&t.firstChild;)t=t.firstChild;return t}function fi(t,e){var n,i=di(t);for(t=0;i;){if(3===i.nodeType){if(n=t+i.textContent.length,t<=e&&n>=e)return{node:i,offset:e-t};t=n}t:{for(;i;){if(i.nextSibling){i=i.nextSibling;break t}i=i.parentNode}i=void 0}i=di(i)}}function pi(t,e){return!(!t||!e)&&(t===e||(!t||3!==t.nodeType)&&(e&&3===e.nodeType?pi(t,e.parentNode):"contains"in t?t.contains(e):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(e))))}function gi(){for(var t=window,e=G();e instanceof t.HTMLIFrameElement;){try{var n="string"==typeof e.contentWindow.location.href}catch(t){n=!1}if(!n)break;e=G((t=e.contentWindow).document)}return e}function mi(t){var e=t&&t.nodeName&&t.nodeName.toLowerCase();return e&&("input"===e&&("text"===t.type||"search"===t.type||"tel"===t.type||"url"===t.type||"password"===t.type)||"textarea"===e||"true"===t.contentEditable)}var bi=h&&"documentMode"in document&&11>=document.documentMode,yi=null,vi=null,xi=null,_i=!1;function wi(t,e,n){var i=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_i||null==yi||yi!==G(i)||(i="selectionStart"in(i=yi)&&mi(i)?{start:i.selectionStart,end:i.selectionEnd}:{anchorNode:(i=(i.ownerDocument&&i.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:i.anchorOffset,focusNode:i.focusNode,focusOffset:i.focusOffset},xi&&hi(xi,i)||(xi=i,0<(i=Bi(vi,"onSelect")).length&&(e=new dn("onSelect","select",null,e,n),t.push({event:e,listeners:i}),e.target=yi)))}Re("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Re("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Re(Le,2);for(var ki="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Ai=0;Ai<ki.length;Ai++)De.set(ki[Ai],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ci="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Si=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ci));function Ei(t,e,n){var i=t.type||"unknown-event";t.currentTarget=n,function(t,e,n,i,r,o,a,l,c){if(Qt.apply(this,arguments),Ht){if(!Ht)throw Error(s(198));var u=Ut;Ht=!1,Ut=null,$t||($t=!0,Yt=u)}}(i,e,void 0,t),t.currentTarget=null}function Mi(t,e){e=0!=(4&e);for(var n=0;n<t.length;n++){var i=t[n],r=i.event;i=i.listeners;t:{var o=void 0;if(e)for(var s=i.length-1;0<=s;s--){var a=i[s],l=a.instance,c=a.currentTarget;if(a=a.listener,l!==o&&r.isPropagationStopped())break t;Ei(r,a,c),o=l}else for(s=0;s<i.length;s++){if(l=(a=i[s]).instance,c=a.currentTarget,a=a.listener,l!==o&&r.isPropagationStopped())break t;Ei(r,a,c),o=l}}}if($t)throw t=Yt,$t=!1,Yt=null,t}function Pi(t,e){var n=or(e),i=t+"__bubble";n.has(i)||(Li(e,t,2,!1),n.add(i))}var Oi="_reactListening"+Math.random().toString(36).slice(2);function Ti(t){t[Oi]||(t[Oi]=!0,a.forEach((function(e){Si.has(e)||Di(e,!1,t,null),Di(e,!0,t,null)})))}function Di(t,e,n,i){var r=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===t&&9!==n.nodeType&&(o=n.ownerDocument),null!==i&&!e&&Si.has(t)){if("scroll"!==t)return;r|=2,o=i}var s=or(o),a=t+"__"+(e?"capture":"bubble");s.has(a)||(e&&(r|=4),Li(o,t,r,e),s.add(a))}function Li(t,e,n,i){var r=De.get(e);switch(void 0===r?2:r){case 0:r=Xe;break;case 1:r=Ke;break;default:r=Ze}n=r.bind(null,e,n,t),r=void 0,!jt||"touchstart"!==e&&"touchmove"!==e&&"wheel"!==e||(r=!0),i?void 0!==r?t.addEventListener(e,n,{capture:!0,passive:r}):t.addEventListener(e,n,!0):void 0!==r?t.addEventListener(e,n,{passive:r}):t.addEventListener(e,n,!1)}function Ri(t,e,n,i,r){var o=i;if(0==(1&e)&&0==(2&e)&&null!==i)t:for(;;){if(null===i)return;var s=i.tag;if(3===s||4===s){var a=i.stateNode.containerInfo;if(a===r||8===a.nodeType&&a.parentNode===r)break;if(4===s)for(s=i.return;null!==s;){var l=s.tag;if((3===l||4===l)&&((l=s.stateNode.containerInfo)===r||8===l.nodeType&&l.parentNode===r))return;s=s.return}for(;null!==a;){if(null===(s=er(a)))return;if(5===(l=s.tag)||6===l){i=o=s;continue t}a=a.parentNode}}i=i.return}!function(t,e,n){if(Nt)return t();Nt=!0;try{It(t,e,n)}finally{Nt=!1,zt()}}((function(){var i=o,r=Ct(n),s=[];t:{var a=Te.get(t);if(void 0!==a){var l=dn,c=t;switch(t){case"keypress":if(0===rn(n))break t;case"keydown":case"keyup":l=Pn;break;case"focusin":c="focus",l=yn;break;case"focusout":c="blur",l=yn;break;case"beforeblur":case"afterblur":l=yn;break;case"click":if(2===n.button)break t;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=bn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Tn;break;case Ee:case Me:case Pe:l=vn;break;case Oe:l=Dn;break;case"scroll":l=pn;break;case"wheel":l=Rn;break;case"copy":case"cut":case"paste":l=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=On}var u=0!=(4&e),h=!u&&"scroll"===t,d=u?null!==a?a+"Capture":null:a;u=[];for(var f,p=i;null!==p;){var g=(f=p).stateNode;if(5===f.tag&&null!==g&&(f=g,null!==d&&null!=(g=Ft(p,d))&&u.push(Ii(p,g,f))),h)break;p=p.return}0<u.length&&(a=new l(a,c,null,n,r),s.push({event:a,listeners:u}))}}if(0==(7&e)){if(l="mouseout"===t||"pointerout"===t,(!(a="mouseover"===t||"pointerover"===t)||0!=(16&e)||!(c=n.relatedTarget||n.fromElement)||!er(c)&&!c[Ji])&&(l||a)&&(a=r.window===r?r:(a=r.ownerDocument)?a.defaultView||a.parentWindow:window,l?(l=i,null!==(c=(c=n.relatedTarget||n.toElement)?er(c):null)&&(c!==(h=Xt(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=i),l!==c)){if(u=mn,g="onMouseLeave",d="onMouseEnter",p="mouse","pointerout"!==t&&"pointerover"!==t||(u=On,g="onPointerLeave",d="onPointerEnter",p="pointer"),h=null==l?a:ir(l),f=null==c?a:ir(c),(a=new u(g,p+"leave",l,n,r)).target=h,a.relatedTarget=f,g=null,er(r)===i&&((u=new u(d,p+"enter",c,n,r)).target=f,u.relatedTarget=h,g=u),h=g,l&&c)t:{for(d=c,p=0,f=u=l;f;f=Ni(f))p++;for(f=0,g=d;g;g=Ni(g))f++;for(;0<p-f;)u=Ni(u),p--;for(;0<f-p;)d=Ni(d),f--;for(;p--;){if(u===d||null!==d&&u===d.alternate)break t;u=Ni(u),d=Ni(d)}u=null}else u=null;null!==l&&zi(s,a,l,u,!1),null!==c&&null!==h&&zi(s,h,c,u,!0)}if("select"===(l=(a=i?ir(i):window).nodeName&&a.nodeName.toLowerCase())||"input"===l&&"file"===a.type)var m=Gn;else if(Yn(a))if(Jn)m=li;else{m=si;var b=oi}else(l=a.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===a.type||"radio"===a.type)&&(m=ai);switch(m&&(m=m(t,i))?qn(s,m,n,r):(b&&b(t,a,i),"focusout"===t&&(b=a._wrapperState)&&b.controlled&&"number"===a.type&&rt(a,"number",a.value)),b=i?ir(i):window,t){case"focusin":(Yn(b)||"true"===b.contentEditable)&&(yi=b,vi=i,xi=null);break;case"focusout":xi=vi=yi=null;break;case"mousedown":_i=!0;break;case"contextmenu":case"mouseup":case"dragend":_i=!1,wi(s,n,r);break;case"selectionchange":if(bi)break;case"keydown":case"keyup":wi(s,n,r)}var y;if(Bn)t:{switch(t){case"compositionstart":var v="onCompositionStart";break t;case"compositionend":v="onCompositionEnd";break t;case"compositionupdate":v="onCompositionUpdate";break t}v=void 0}else Un?Wn(t,n)&&(v="onCompositionEnd"):"keydown"===t&&229===n.keyCode&&(v="onCompositionStart");v&&(Fn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==v?"onCompositionEnd"===v&&Un&&(y=nn()):(tn="value"in(Je=r)?Je.value:Je.textContent,Un=!0)),0<(b=Bi(i,v)).length&&(v=new wn(v,t,null,n,r),s.push({event:v,listeners:b}),(y||null!==(y=Hn(n)))&&(v.data=y))),(y=zn?function(t,e){switch(t){case"compositionend":return Hn(e);case"keypress":return 32!==e.which?null:(Vn=!0,jn);case"textInput":return(t=e.data)===jn&&Vn?null:t;default:return null}}(t,n):function(t,e){if(Un)return"compositionend"===t||!Bn&&Wn(t,e)?(t=nn(),en=tn=Je=null,Un=!1,t):null;switch(t){case"paste":default:return null;case"keypress":if(!(e.ctrlKey||e.altKey||e.metaKey)||e.ctrlKey&&e.altKey){if(e.char&&1<e.char.length)return e.char;if(e.which)return String.fromCharCode(e.which)}return null;case"compositionend":return Fn&&"ko"!==e.locale?null:e.data}}(t,n))&&0<(i=Bi(i,"onBeforeInput")).length&&(r=new wn("onBeforeInput","beforeinput",null,n,r),s.push({event:r,listeners:i}),r.data=y)}Mi(s,e)}))}function Ii(t,e,n){return{instance:t,listener:e,currentTarget:n}}function Bi(t,e){for(var n=e+"Capture",i=[];null!==t;){var r=t,o=r.stateNode;5===r.tag&&null!==o&&(r=o,null!=(o=Ft(t,n))&&i.unshift(Ii(t,o,r)),null!=(o=Ft(t,e))&&i.push(Ii(t,o,r))),t=t.return}return i}function Ni(t){if(null===t)return null;do{t=t.return}while(t&&5!==t.tag);return t||null}function zi(t,e,n,i,r){for(var o=e._reactName,s=[];null!==n&&n!==i;){var a=n,l=a.alternate,c=a.stateNode;if(null!==l&&l===i)break;5===a.tag&&null!==c&&(a=c,r?null!=(l=Ft(n,o))&&s.unshift(Ii(n,l,a)):r||null!=(l=Ft(n,o))&&s.push(Ii(n,l,a))),n=n.return}0!==s.length&&t.push({event:e,listeners:s})}function Fi(){}var ji=null,Vi=null;function Wi(t,e){switch(t){case"button":case"input":case"select":case"textarea":return!!e.autoFocus}return!1}function Hi(t,e){return"textarea"===t||"option"===t||"noscript"===t||"string"==typeof e.children||"number"==typeof e.children||"object"==typeof e.dangerouslySetInnerHTML&&null!==e.dangerouslySetInnerHTML&&null!=e.dangerouslySetInnerHTML.__html}var Ui="function"==typeof setTimeout?setTimeout:void 0,$i="function"==typeof clearTimeout?clearTimeout:void 0;function Yi(t){(1===t.nodeType||9===t.nodeType&&null!=(t=t.body))&&(t.textContent="")}function qi(t){for(;null!=t;t=t.nextSibling){var e=t.nodeType;if(1===e||3===e)break}return t}function Qi(t){t=t.previousSibling;for(var e=0;t;){if(8===t.nodeType){var n=t.data;if("$"===n||"$!"===n||"$?"===n){if(0===e)return t;e--}else"/$"===n&&e++}t=t.previousSibling}return null}var Xi=0,Ki=Math.random().toString(36).slice(2),Zi="__reactFiber$"+Ki,Gi="__reactProps$"+Ki,Ji="__reactContainer$"+Ki,tr="__reactEvents$"+Ki;function er(t){var e=t[Zi];if(e)return e;for(var n=t.parentNode;n;){if(e=n[Ji]||n[Zi]){if(n=e.alternate,null!==e.child||null!==n&&null!==n.child)for(t=Qi(t);null!==t;){if(n=t[Zi])return n;t=Qi(t)}return e}n=(t=n).parentNode}return null}function nr(t){return!(t=t[Zi]||t[Ji])||5!==t.tag&&6!==t.tag&&13!==t.tag&&3!==t.tag?null:t}function ir(t){if(5===t.tag||6===t.tag)return t.stateNode;throw Error(s(33))}function rr(t){return t[Gi]||null}function or(t){var e=t[tr];return void 0===e&&(e=t[tr]=new Set),e}var sr=[],ar=-1;function lr(t){return{current:t}}function cr(t){0>ar||(t.current=sr[ar],sr[ar]=null,ar--)}function ur(t,e){ar++,sr[ar]=t.current,t.current=e}var hr={},dr=lr(hr),fr=lr(!1),pr=hr;function gr(t,e){var n=t.type.contextTypes;if(!n)return hr;var i=t.stateNode;if(i&&i.__reactInternalMemoizedUnmaskedChildContext===e)return i.__reactInternalMemoizedMaskedChildContext;var r,o={};for(r in n)o[r]=e[r];return i&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=e,t.__reactInternalMemoizedMaskedChildContext=o),o}function mr(t){return null!=t.childContextTypes}function br(){cr(fr),cr(dr)}function yr(t,e,n){if(dr.current!==hr)throw Error(s(168));ur(dr,e),ur(fr,n)}function vr(t,e,n){var i=t.stateNode;if(t=e.childContextTypes,"function"!=typeof i.getChildContext)return n;for(var o in i=i.getChildContext())if(!(o in t))throw Error(s(108,q(e)||"Unknown",o));return r({},n,i)}function xr(t){return t=(t=t.stateNode)&&t.__reactInternalMemoizedMergedChildContext||hr,pr=dr.current,ur(dr,t),ur(fr,fr.current),!0}function _r(t,e,n){var i=t.stateNode;if(!i)throw Error(s(169));n?(t=vr(t,e,pr),i.__reactInternalMemoizedMergedChildContext=t,cr(fr),cr(dr),ur(dr,t)):cr(fr),ur(fr,n)}var wr=null,kr=null,Ar=o.unstable_runWithPriority,Cr=o.unstable_scheduleCallback,Sr=o.unstable_cancelCallback,Er=o.unstable_shouldYield,Mr=o.unstable_requestPaint,Pr=o.unstable_now,Or=o.unstable_getCurrentPriorityLevel,Tr=o.unstable_ImmediatePriority,Dr=o.unstable_UserBlockingPriority,Lr=o.unstable_NormalPriority,Rr=o.unstable_LowPriority,Ir=o.unstable_IdlePriority,Br={},Nr=void 0!==Mr?Mr:function(){},zr=null,Fr=null,jr=!1,Vr=Pr(),Wr=1e4>Vr?Pr:function(){return Pr()-Vr};function Hr(){switch(Or()){case Tr:return 99;case Dr:return 98;case Lr:return 97;case Rr:return 96;case Ir:return 95;default:throw Error(s(332))}}function Ur(t){switch(t){case 99:return Tr;case 98:return Dr;case 97:return Lr;case 96:return Rr;case 95:return Ir;default:throw Error(s(332))}}function $r(t,e){return t=Ur(t),Ar(t,e)}function Yr(t,e,n){return t=Ur(t),Cr(t,e,n)}function qr(){if(null!==Fr){var t=Fr;Fr=null,Sr(t)}Qr()}function Qr(){if(!jr&&null!==zr){jr=!0;var t=0;try{var e=zr;$r(99,(function(){for(;t<e.length;t++){var n=e[t];do{n=n(!0)}while(null!==n)}})),zr=null}catch(e){throw null!==zr&&(zr=zr.slice(t+1)),Cr(Tr,qr),e}finally{jr=!1}}}var Xr=_.ReactCurrentBatchConfig;function Kr(t,e){if(t&&t.defaultProps){for(var n in e=r({},e),t=t.defaultProps)void 0===e[n]&&(e[n]=t[n]);return e}return e}var Zr=lr(null),Gr=null,Jr=null,to=null;function eo(){to=Jr=Gr=null}function no(t){var e=Zr.current;cr(Zr),t.type._context._currentValue=e}function io(t,e){for(;null!==t;){var n=t.alternate;if((t.childLanes&e)===e){if(null===n||(n.childLanes&e)===e)break;n.childLanes|=e}else t.childLanes|=e,null!==n&&(n.childLanes|=e);t=t.return}}function ro(t,e){Gr=t,to=Jr=null,null!==(t=t.dependencies)&&null!==t.firstContext&&(0!=(t.lanes&e)&&(Bs=!0),t.firstContext=null)}function oo(t,e){if(to!==t&&!1!==e&&0!==e)if("number"==typeof e&&1073741823!==e||(to=t,e=1073741823),e={context:t,observedBits:e,next:null},null===Jr){if(null===Gr)throw Error(s(308));Jr=e,Gr.dependencies={lanes:0,firstContext:e,responders:null}}else Jr=Jr.next=e;return t._currentValue}var so=!1;function ao(t){t.updateQueue={baseState:t.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function lo(t,e){t=t.updateQueue,e.updateQueue===t&&(e.updateQueue={baseState:t.baseState,firstBaseUpdate:t.firstBaseUpdate,lastBaseUpdate:t.lastBaseUpdate,shared:t.shared,effects:t.effects})}function co(t,e){return{eventTime:t,lane:e,tag:0,payload:null,callback:null,next:null}}function uo(t,e){if(null!==(t=t.updateQueue)){var n=(t=t.shared).pending;null===n?e.next=e:(e.next=n.next,n.next=e),t.pending=e}}function ho(t,e){var n=t.updateQueue,i=t.alternate;if(null!==i&&n===(i=i.updateQueue)){var r=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?r=o=s:o=o.next=s,n=n.next}while(null!==n);null===o?r=o=e:o=o.next=e}else r=o=e;return n={baseState:i.baseState,firstBaseUpdate:r,lastBaseUpdate:o,shared:i.shared,effects:i.effects},void(t.updateQueue=n)}null===(t=n.lastBaseUpdate)?n.firstBaseUpdate=e:t.next=e,n.lastBaseUpdate=e}function fo(t,e,n,i){var o=t.updateQueue;so=!1;var s=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===a?s=u:a.next=u,a=c;var h=t.alternate;if(null!==h){var d=(h=h.updateQueue).lastBaseUpdate;d!==a&&(null===d?h.firstBaseUpdate=u:d.next=u,h.lastBaseUpdate=c)}}if(null!==s){for(d=o.baseState,a=0,h=u=c=null;;){l=s.lane;var f=s.eventTime;if((i&l)===l){null!==h&&(h=h.next={eventTime:f,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});t:{var p=t,g=s;switch(l=e,f=n,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(f,d,l);break t}d=p;break t;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(f,d,l):p))break t;d=r({},d,l);break t;case 2:so=!0}}null!==s.callback&&(t.flags|=32,null===(l=o.effects)?o.effects=[s]:l.push(s))}else f={eventTime:f,lane:l,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===h?(u=h=f,c=d):h=h.next=f,a|=l;if(null===(s=s.next)){if(null===(l=o.shared.pending))break;s=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===h&&(c=d),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=h,za|=a,t.lanes=a,t.memoizedState=d}}function po(t,e,n){if(t=e.effects,e.effects=null,null!==t)for(e=0;e<t.length;e++){var i=t[e],r=i.callback;if(null!==r){if(i.callback=null,i=n,"function"!=typeof r)throw Error(s(191,r));r.call(i)}}}var go=(new i.Component).refs;function mo(t,e,n,i){n=null==(n=n(i,e=t.memoizedState))?e:r({},e,n),t.memoizedState=n,0===t.lanes&&(t.updateQueue.baseState=n)}var bo={isMounted:function(t){return!!(t=t._reactInternals)&&Xt(t)===t},enqueueSetState:function(t,e,n){t=t._reactInternals;var i=cl(),r=ul(t),o=co(i,r);o.payload=e,null!=n&&(o.callback=n),uo(t,o),hl(t,r,i)},enqueueReplaceState:function(t,e,n){t=t._reactInternals;var i=cl(),r=ul(t),o=co(i,r);o.tag=1,o.payload=e,null!=n&&(o.callback=n),uo(t,o),hl(t,r,i)},enqueueForceUpdate:function(t,e){t=t._reactInternals;var n=cl(),i=ul(t),r=co(n,i);r.tag=2,null!=e&&(r.callback=e),uo(t,r),hl(t,i,n)}};function yo(t,e,n,i,r,o,s){return"function"==typeof(t=t.stateNode).shouldComponentUpdate?t.shouldComponentUpdate(i,o,s):!(e.prototype&&e.prototype.isPureReactComponent&&hi(n,i)&&hi(r,o))}function vo(t,e,n){var i=!1,r=hr,o=e.contextType;return"object"==typeof o&&null!==o?o=oo(o):(r=mr(e)?pr:dr.current,o=(i=null!=(i=e.contextTypes))?gr(t,r):hr),e=new e(n,o),t.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,e.updater=bo,t.stateNode=e,e._reactInternals=t,i&&((t=t.stateNode).__reactInternalMemoizedUnmaskedChildContext=r,t.__reactInternalMemoizedMaskedChildContext=o),e}function xo(t,e,n,i){t=e.state,"function"==typeof e.componentWillReceiveProps&&e.componentWillReceiveProps(n,i),"function"==typeof e.UNSAFE_componentWillReceiveProps&&e.UNSAFE_componentWillReceiveProps(n,i),e.state!==t&&bo.enqueueReplaceState(e,e.state,null)}function _o(t,e,n,i){var r=t.stateNode;r.props=n,r.state=t.memoizedState,r.refs=go,ao(t);var o=e.contextType;"object"==typeof o&&null!==o?r.context=oo(o):(o=mr(e)?pr:dr.current,r.context=gr(t,o)),fo(t,n,r,i),r.state=t.memoizedState,"function"==typeof(o=e.getDerivedStateFromProps)&&(mo(t,e,o,n),r.state=t.memoizedState),"function"==typeof e.getDerivedStateFromProps||"function"==typeof r.getSnapshotBeforeUpdate||"function"!=typeof r.UNSAFE_componentWillMount&&"function"!=typeof r.componentWillMount||(e=r.state,"function"==typeof r.componentWillMount&&r.componentWillMount(),"function"==typeof r.UNSAFE_componentWillMount&&r.UNSAFE_componentWillMount(),e!==r.state&&bo.enqueueReplaceState(r,r.state,null),fo(t,n,r,i),r.state=t.memoizedState),"function"==typeof r.componentDidMount&&(t.flags|=4)}var wo=Array.isArray;function ko(t,e,n){if(null!==(t=n.ref)&&"function"!=typeof t&&"object"!=typeof t){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(s(309));var i=n.stateNode}if(!i)throw Error(s(147,t));var r=""+t;return null!==e&&null!==e.ref&&"function"==typeof e.ref&&e.ref._stringRef===r?e.ref:(e=function(t){var e=i.refs;e===go&&(e=i.refs={}),null===t?delete e[r]:e[r]=t},e._stringRef=r,e)}if("string"!=typeof t)throw Error(s(284));if(!n._owner)throw Error(s(290,t))}return t}function Ao(t,e){if("textarea"!==t.type)throw Error(s(31,"[object Object]"===Object.prototype.toString.call(e)?"object with keys {"+Object.keys(e).join(", ")+"}":e))}function Co(t){function e(e,n){if(t){var i=e.lastEffect;null!==i?(i.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,i){if(!t)return null;for(;null!==i;)e(n,i),i=i.sibling;return null}function i(t,e){for(t=new Map;null!==e;)null!==e.key?t.set(e.key,e):t.set(e.index,e),e=e.sibling;return t}function r(t,e){return(t=Hl(t,e)).index=0,t.sibling=null,t}function o(e,n,i){return e.index=i,t?null!==(i=e.alternate)?(i=i.index)<n?(e.flags=2,n):i:(e.flags=2,n):n}function a(e){return t&&null===e.alternate&&(e.flags=2),e}function l(t,e,n,i){return null===e||6!==e.tag?((e=ql(n,t.mode,i)).return=t,e):((e=r(e,n)).return=t,e)}function c(t,e,n,i){return null!==e&&e.elementType===n.type?((i=r(e,n.props)).ref=ko(t,e,n),i.return=t,i):((i=Ul(n.type,n.key,n.props,null,t.mode,i)).ref=ko(t,e,n),i.return=t,i)}function u(t,e,n,i){return null===e||4!==e.tag||e.stateNode.containerInfo!==n.containerInfo||e.stateNode.implementation!==n.implementation?((e=Ql(n,t.mode,i)).return=t,e):((e=r(e,n.children||[])).return=t,e)}function h(t,e,n,i,o){return null===e||7!==e.tag?((e=$l(n,t.mode,i,o)).return=t,e):((e=r(e,n)).return=t,e)}function d(t,e,n){if("string"==typeof e||"number"==typeof e)return(e=ql(""+e,t.mode,n)).return=t,e;if("object"==typeof e&&null!==e){switch(e.$$typeof){case w:return(n=Ul(e.type,e.key,e.props,null,t.mode,n)).ref=ko(t,null,e),n.return=t,n;case k:return(e=Ql(e,t.mode,n)).return=t,e}if(wo(e)||W(e))return(e=$l(e,t.mode,n,null)).return=t,e;Ao(t,e)}return null}function f(t,e,n,i){var r=null!==e?e.key:null;if("string"==typeof n||"number"==typeof n)return null!==r?null:l(t,e,""+n,i);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===r?n.type===A?h(t,e,n.props.children,i,r):c(t,e,n,i):null;case k:return n.key===r?u(t,e,n,i):null}if(wo(n)||W(n))return null!==r?null:h(t,e,n,i,null);Ao(t,n)}return null}function p(t,e,n,i,r){if("string"==typeof i||"number"==typeof i)return l(e,t=t.get(n)||null,""+i,r);if("object"==typeof i&&null!==i){switch(i.$$typeof){case w:return t=t.get(null===i.key?n:i.key)||null,i.type===A?h(e,t,i.props.children,r,i.key):c(e,t,i,r);case k:return u(e,t=t.get(null===i.key?n:i.key)||null,i,r)}if(wo(i)||W(i))return h(e,t=t.get(n)||null,i,r,null);Ao(e,i)}return null}function g(r,s,a,l){for(var c=null,u=null,h=s,g=s=0,m=null;null!==h&&g<a.length;g++){h.index>g?(m=h,h=null):m=h.sibling;var b=f(r,h,a[g],l);if(null===b){null===h&&(h=m);break}t&&h&&null===b.alternate&&e(r,h),s=o(b,s,g),null===u?c=b:u.sibling=b,u=b,h=m}if(g===a.length)return n(r,h),c;if(null===h){for(;g<a.length;g++)null!==(h=d(r,a[g],l))&&(s=o(h,s,g),null===u?c=h:u.sibling=h,u=h);return c}for(h=i(r,h);g<a.length;g++)null!==(m=p(h,r,g,a[g],l))&&(t&&null!==m.alternate&&h.delete(null===m.key?g:m.key),s=o(m,s,g),null===u?c=m:u.sibling=m,u=m);return t&&h.forEach((function(t){return e(r,t)})),c}function m(r,a,l,c){var u=W(l);if("function"!=typeof u)throw Error(s(150));if(null==(l=u.call(l)))throw Error(s(151));for(var h=u=null,g=a,m=a=0,b=null,y=l.next();null!==g&&!y.done;m++,y=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var v=f(r,g,y.value,c);if(null===v){null===g&&(g=b);break}t&&g&&null===v.alternate&&e(r,g),a=o(v,a,m),null===h?u=v:h.sibling=v,h=v,g=b}if(y.done)return n(r,g),u;if(null===g){for(;!y.done;m++,y=l.next())null!==(y=d(r,y.value,c))&&(a=o(y,a,m),null===h?u=y:h.sibling=y,h=y);return u}for(g=i(r,g);!y.done;m++,y=l.next())null!==(y=p(g,r,m,y.value,c))&&(t&&null!==y.alternate&&g.delete(null===y.key?m:y.key),a=o(y,a,m),null===h?u=y:h.sibling=y,h=y);return t&&g.forEach((function(t){return e(r,t)})),u}return function(t,i,o,l){var c="object"==typeof o&&null!==o&&o.type===A&&null===o.key;c&&(o=o.props.children);var u="object"==typeof o&&null!==o;if(u)switch(o.$$typeof){case w:t:{for(u=o.key,c=i;null!==c;){if(c.key===u){if(7===c.tag){if(o.type===A){n(t,c.sibling),(i=r(c,o.props.children)).return=t,t=i;break t}}else if(c.elementType===o.type){n(t,c.sibling),(i=r(c,o.props)).ref=ko(t,c,o),i.return=t,t=i;break t}n(t,c);break}e(t,c),c=c.sibling}o.type===A?((i=$l(o.props.children,t.mode,l,o.key)).return=t,t=i):((l=Ul(o.type,o.key,o.props,null,t.mode,l)).ref=ko(t,i,o),l.return=t,t=l)}return a(t);case k:t:{for(c=o.key;null!==i;){if(i.key===c){if(4===i.tag&&i.stateNode.containerInfo===o.containerInfo&&i.stateNode.implementation===o.implementation){n(t,i.sibling),(i=r(i,o.children||[])).return=t,t=i;break t}n(t,i);break}e(t,i),i=i.sibling}(i=Ql(o,t.mode,l)).return=t,t=i}return a(t)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==i&&6===i.tag?(n(t,i.sibling),(i=r(i,o)).return=t,t=i):(n(t,i),(i=ql(o,t.mode,l)).return=t,t=i),a(t);if(wo(o))return g(t,i,o,l);if(W(o))return m(t,i,o,l);if(u&&Ao(t,o),void 0===o&&!c)switch(t.tag){case 1:case 22:case 0:case 11:case 15:throw Error(s(152,q(t.type)||"Component"))}return n(t,i)}}var So=Co(!0),Eo=Co(!1),Mo={},Po=lr(Mo),Oo=lr(Mo),To=lr(Mo);function Do(t){if(t===Mo)throw Error(s(174));return t}function Lo(t,e){switch(ur(To,e),ur(Oo,t),ur(Po,Mo),t=e.nodeType){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:ft(null,"");break;default:e=ft(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}cr(Po),ur(Po,e)}function Ro(){cr(Po),cr(Oo),cr(To)}function Io(t){Do(To.current);var e=Do(Po.current),n=ft(e,t.type);e!==n&&(ur(Oo,t),ur(Po,n))}function Bo(t){Oo.current===t&&(cr(Po),cr(Oo))}var No=lr(0);function zo(t){for(var e=t;null!==e;){if(13===e.tag){var n=e.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return e}else if(19===e.tag&&void 0!==e.memoizedProps.revealOrder){if(0!=(64&e.flags))return e}else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break;for(;null===e.sibling;){if(null===e.return||e.return===t)return null;e=e.return}e.sibling.return=e.return,e=e.sibling}return null}var Fo=null,jo=null,Vo=!1;function Wo(t,e){var n=Vl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=e,n.return=t,n.flags=8,null!==t.lastEffect?(t.lastEffect.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n}function Ho(t,e){switch(t.tag){case 5:var n=t.type;return null!==(e=1!==e.nodeType||n.toLowerCase()!==e.nodeName.toLowerCase()?null:e)&&(t.stateNode=e,!0);case 6:return null!==(e=""===t.pendingProps||3!==e.nodeType?null:e)&&(t.stateNode=e,!0);default:return!1}}function Uo(t){if(Vo){var e=jo;if(e){var n=e;if(!Ho(t,e)){if(!(e=qi(n.nextSibling))||!Ho(t,e))return t.flags=-1025&t.flags|2,Vo=!1,void(Fo=t);Wo(Fo,n)}Fo=t,jo=qi(e.firstChild)}else t.flags=-1025&t.flags|2,Vo=!1,Fo=t}}function $o(t){for(t=t.return;null!==t&&5!==t.tag&&3!==t.tag&&13!==t.tag;)t=t.return;Fo=t}function Yo(t){if(t!==Fo)return!1;if(!Vo)return $o(t),Vo=!0,!1;var e=t.type;if(5!==t.tag||"head"!==e&&"body"!==e&&!Hi(e,t.memoizedProps))for(e=jo;e;)Wo(t,e),e=qi(e.nextSibling);if($o(t),13===t.tag){if(!(t=null!==(t=t.memoizedState)?t.dehydrated:null))throw Error(s(317));t:{for(t=t.nextSibling,e=0;t;){if(8===t.nodeType){var n=t.data;if("/$"===n){if(0===e){jo=qi(t.nextSibling);break t}e--}else"$"!==n&&"$!"!==n&&"$?"!==n||e++}t=t.nextSibling}jo=null}}else jo=Fo?qi(t.stateNode.nextSibling):null;return!0}function qo(){jo=Fo=null,Vo=!1}var Qo=[];function Xo(){for(var t=0;t<Qo.length;t++)Qo[t]._workInProgressVersionPrimary=null;Qo.length=0}var Ko=_.ReactCurrentDispatcher,Zo=_.ReactCurrentBatchConfig,Go=0,Jo=null,ts=null,es=null,ns=!1,is=!1;function rs(){throw Error(s(321))}function os(t,e){if(null===e)return!1;for(var n=0;n<e.length&&n<t.length;n++)if(!ci(t[n],e[n]))return!1;return!0}function ss(t,e,n,i,r,o){if(Go=o,Jo=e,e.memoizedState=null,e.updateQueue=null,e.lanes=0,Ko.current=null===t||null===t.memoizedState?Ds:Ls,t=n(i,r),is){o=0;do{if(is=!1,!(25>o))throw Error(s(301));o+=1,es=ts=null,e.updateQueue=null,Ko.current=Rs,t=n(i,r)}while(is)}if(Ko.current=Ts,e=null!==ts&&null!==ts.next,Go=0,es=ts=Jo=null,ns=!1,e)throw Error(s(300));return t}function as(){var t={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===es?Jo.memoizedState=es=t:es=es.next=t,es}function ls(){if(null===ts){var t=Jo.alternate;t=null!==t?t.memoizedState:null}else t=ts.next;var e=null===es?Jo.memoizedState:es.next;if(null!==e)es=e,ts=t;else{if(null===t)throw Error(s(310));t={memoizedState:(ts=t).memoizedState,baseState:ts.baseState,baseQueue:ts.baseQueue,queue:ts.queue,next:null},null===es?Jo.memoizedState=es=t:es=es.next=t}return es}function cs(t,e){return"function"==typeof e?e(t):e}function us(t){var e=ls(),n=e.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=t;var i=ts,r=i.baseQueue,o=n.pending;if(null!==o){if(null!==r){var a=r.next;r.next=o.next,o.next=a}i.baseQueue=r=o,n.pending=null}if(null!==r){r=r.next,i=i.baseState;var l=a=o=null,c=r;do{var u=c.lane;if((Go&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),i=c.eagerReducer===t?c.eagerState:t(i,c.action);else{var h={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(a=l=h,o=i):l=l.next=h,Jo.lanes|=u,za|=u}c=c.next}while(null!==c&&c!==r);null===l?o=i:l.next=a,ci(i,e.memoizedState)||(Bs=!0),e.memoizedState=i,e.baseState=o,e.baseQueue=l,n.lastRenderedState=i}return[e.memoizedState,n.dispatch]}function hs(t){var e=ls(),n=e.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=t;var i=n.dispatch,r=n.pending,o=e.memoizedState;if(null!==r){n.pending=null;var a=r=r.next;do{o=t(o,a.action),a=a.next}while(a!==r);ci(o,e.memoizedState)||(Bs=!0),e.memoizedState=o,null===e.baseQueue&&(e.baseState=o),n.lastRenderedState=o}return[o,i]}function ds(t,e,n){var i=e._getVersion;i=i(e._source);var r=e._workInProgressVersionPrimary;if(null!==r?t=r===i:(t=t.mutableReadLanes,(t=(Go&t)===t)&&(e._workInProgressVersionPrimary=i,Qo.push(e))),t)return n(e._source);throw Qo.push(e),Error(s(350))}function fs(t,e,n,i){var r=Oa;if(null===r)throw Error(s(349));var o=e._getVersion,a=o(e._source),l=Ko.current,c=l.useState((function(){return ds(r,e,n)})),u=c[1],h=c[0];c=es;var d=t.memoizedState,f=d.refs,p=f.getSnapshot,g=d.source;d=d.subscribe;var m=Jo;return t.memoizedState={refs:f,source:e,subscribe:i},l.useEffect((function(){f.getSnapshot=n,f.setSnapshot=u;var t=o(e._source);if(!ci(a,t)){t=n(e._source),ci(h,t)||(u(t),t=ul(m),r.mutableReadLanes|=t&r.pendingLanes),t=r.mutableReadLanes,r.entangledLanes|=t;for(var i=r.entanglements,s=t;0<s;){var l=31-He(s),c=1<<l;i[l]|=t,s&=~c}}}),[n,e,i]),l.useEffect((function(){return i(e._source,(function(){var t=f.getSnapshot,n=f.setSnapshot;try{n(t(e._source));var i=ul(m);r.mutableReadLanes|=i&r.pendingLanes}catch(t){n((function(){throw t}))}}))}),[e,i]),ci(p,n)&&ci(g,e)&&ci(d,i)||((t={pending:null,dispatch:null,lastRenderedReducer:cs,lastRenderedState:h}).dispatch=u=Os.bind(null,Jo,t),c.queue=t,c.baseQueue=null,h=ds(r,e,n),c.memoizedState=c.baseState=h),h}function ps(t,e,n){return fs(ls(),t,e,n)}function gs(t){var e=as();return"function"==typeof t&&(t=t()),e.memoizedState=e.baseState=t,t=(t=e.queue={pending:null,dispatch:null,lastRenderedReducer:cs,lastRenderedState:t}).dispatch=Os.bind(null,Jo,t),[e.memoizedState,t]}function ms(t,e,n,i){return t={tag:t,create:e,destroy:n,deps:i,next:null},null===(e=Jo.updateQueue)?(e={lastEffect:null},Jo.updateQueue=e,e.lastEffect=t.next=t):null===(n=e.lastEffect)?e.lastEffect=t.next=t:(i=n.next,n.next=t,t.next=i,e.lastEffect=t),t}function bs(t){return t={current:t},as().memoizedState=t}function ys(){return ls().memoizedState}function vs(t,e,n,i){var r=as();Jo.flags|=t,r.memoizedState=ms(1|e,n,void 0,void 0===i?null:i)}function xs(t,e,n,i){var r=ls();i=void 0===i?null:i;var o=void 0;if(null!==ts){var s=ts.memoizedState;if(o=s.destroy,null!==i&&os(i,s.deps))return void ms(e,n,o,i)}Jo.flags|=t,r.memoizedState=ms(1|e,n,o,i)}function _s(t,e){return vs(516,4,t,e)}function ws(t,e){return xs(516,4,t,e)}function ks(t,e){return xs(4,2,t,e)}function As(t,e){return"function"==typeof e?(t=t(),e(t),function(){e(null)}):null!=e?(t=t(),e.current=t,function(){e.current=null}):void 0}function Cs(t,e,n){return n=null!=n?n.concat([t]):null,xs(4,2,As.bind(null,e,t),n)}function Ss(){}function Es(t,e){var n=ls();e=void 0===e?null:e;var i=n.memoizedState;return null!==i&&null!==e&&os(e,i[1])?i[0]:(n.memoizedState=[t,e],t)}function Ms(t,e){var n=ls();e=void 0===e?null:e;var i=n.memoizedState;return null!==i&&null!==e&&os(e,i[1])?i[0]:(t=t(),n.memoizedState=[t,e],t)}function Ps(t,e){var n=Hr();$r(98>n?98:n,(function(){t(!0)})),$r(97<n?97:n,(function(){var n=Zo.transition;Zo.transition=1;try{t(!1),e()}finally{Zo.transition=n}}))}function Os(t,e,n){var i=cl(),r=ul(t),o={lane:r,action:n,eagerReducer:null,eagerState:null,next:null},s=e.pending;if(null===s?o.next=o:(o.next=s.next,s.next=o),e.pending=o,s=t.alternate,t===Jo||null!==s&&s===Jo)is=ns=!0;else{if(0===t.lanes&&(null===s||0===s.lanes)&&null!==(s=e.lastRenderedReducer))try{var a=e.lastRenderedState,l=s(a,n);if(o.eagerReducer=s,o.eagerState=l,ci(l,a))return}catch(t){}hl(t,r,i)}}var Ts={readContext:oo,useCallback:rs,useContext:rs,useEffect:rs,useImperativeHandle:rs,useLayoutEffect:rs,useMemo:rs,useReducer:rs,useRef:rs,useState:rs,useDebugValue:rs,useDeferredValue:rs,useTransition:rs,useMutableSource:rs,useOpaqueIdentifier:rs,unstable_isNewReconciler:!1},Ds={readContext:oo,useCallback:function(t,e){return as().memoizedState=[t,void 0===e?null:e],t},useContext:oo,useEffect:_s,useImperativeHandle:function(t,e,n){return n=null!=n?n.concat([t]):null,vs(4,2,As.bind(null,e,t),n)},useLayoutEffect:function(t,e){return vs(4,2,t,e)},useMemo:function(t,e){var n=as();return e=void 0===e?null:e,t=t(),n.memoizedState=[t,e],t},useReducer:function(t,e,n){var i=as();return e=void 0!==n?n(e):e,i.memoizedState=i.baseState=e,t=(t=i.queue={pending:null,dispatch:null,lastRenderedReducer:t,lastRenderedState:e}).dispatch=Os.bind(null,Jo,t),[i.memoizedState,t]},useRef:bs,useState:gs,useDebugValue:Ss,useDeferredValue:function(t){var e=gs(t),n=e[0],i=e[1];return _s((function(){var e=Zo.transition;Zo.transition=1;try{i(t)}finally{Zo.transition=e}}),[t]),n},useTransition:function(){var t=gs(!1),e=t[0];return bs(t=Ps.bind(null,t[1])),[t,e]},useMutableSource:function(t,e,n){var i=as();return i.memoizedState={refs:{getSnapshot:e,setSnapshot:null},source:t,subscribe:n},fs(i,t,e,n)},useOpaqueIdentifier:function(){if(Vo){var t=!1,e=function(t){return{$$typeof:I,toString:t,valueOf:t}}((function(){throw t||(t=!0,n("r:"+(Xi++).toString(36))),Error(s(355))})),n=gs(e)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,ms(5,(function(){n("r:"+(Xi++).toString(36))}),void 0,null)),e}return gs(e="r:"+(Xi++).toString(36)),e},unstable_isNewReconciler:!1},Ls={readContext:oo,useCallback:Es,useContext:oo,useEffect:ws,useImperativeHandle:Cs,useLayoutEffect:ks,useMemo:Ms,useReducer:us,useRef:ys,useState:function(){return us(cs)},useDebugValue:Ss,useDeferredValue:function(t){var e=us(cs),n=e[0],i=e[1];return ws((function(){var e=Zo.transition;Zo.transition=1;try{i(t)}finally{Zo.transition=e}}),[t]),n},useTransition:function(){var t=us(cs)[0];return[ys().current,t]},useMutableSource:ps,useOpaqueIdentifier:function(){return us(cs)[0]},unstable_isNewReconciler:!1},Rs={readContext:oo,useCallback:Es,useContext:oo,useEffect:ws,useImperativeHandle:Cs,useLayoutEffect:ks,useMemo:Ms,useReducer:hs,useRef:ys,useState:function(){return hs(cs)},useDebugValue:Ss,useDeferredValue:function(t){var e=hs(cs),n=e[0],i=e[1];return ws((function(){var e=Zo.transition;Zo.transition=1;try{i(t)}finally{Zo.transition=e}}),[t]),n},useTransition:function(){var t=hs(cs)[0];return[ys().current,t]},useMutableSource:ps,useOpaqueIdentifier:function(){return hs(cs)[0]},unstable_isNewReconciler:!1},Is=_.ReactCurrentOwner,Bs=!1;function Ns(t,e,n,i){e.child=null===t?Eo(e,null,n,i):So(e,t.child,n,i)}function zs(t,e,n,i,r){n=n.render;var o=e.ref;return ro(e,r),i=ss(t,e,n,i,o,r),null===t||Bs?(e.flags|=1,Ns(t,e,i,r),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~r,na(t,e,r))}function Fs(t,e,n,i,r,o){if(null===t){var s=n.type;return"function"!=typeof s||Wl(s)||void 0!==s.defaultProps||null!==n.compare||void 0!==n.defaultProps?((t=Ul(n.type,null,i,e,e.mode,o)).ref=e.ref,t.return=e,e.child=t):(e.tag=15,e.type=s,js(t,e,s,i,r,o))}return s=t.child,0==(r&o)&&(r=s.memoizedProps,(n=null!==(n=n.compare)?n:hi)(r,i)&&t.ref===e.ref)?na(t,e,o):(e.flags|=1,(t=Hl(s,i)).ref=e.ref,t.return=e,e.child=t)}function js(t,e,n,i,r,o){if(null!==t&&hi(t.memoizedProps,i)&&t.ref===e.ref){if(Bs=!1,0==(o&r))return e.lanes=t.lanes,na(t,e,o);0!=(16384&t.flags)&&(Bs=!0)}return Hs(t,e,n,i,o)}function Vs(t,e,n){var i=e.pendingProps,r=i.children,o=null!==t?t.memoizedState:null;if("hidden"===i.mode||"unstable-defer-without-hiding"===i.mode)if(0==(4&e.mode))e.memoizedState={baseLanes:0},vl(0,n);else{if(0==(1073741824&n))return t=null!==o?o.baseLanes|n:n,e.lanes=e.childLanes=1073741824,e.memoizedState={baseLanes:t},vl(0,t),null;e.memoizedState={baseLanes:0},vl(0,null!==o?o.baseLanes:n)}else null!==o?(i=o.baseLanes|n,e.memoizedState=null):i=n,vl(0,i);return Ns(t,e,r,n),e.child}function Ws(t,e){var n=e.ref;(null===t&&null!==n||null!==t&&t.ref!==n)&&(e.flags|=128)}function Hs(t,e,n,i,r){var o=mr(n)?pr:dr.current;return o=gr(e,o),ro(e,r),n=ss(t,e,n,i,o,r),null===t||Bs?(e.flags|=1,Ns(t,e,n,r),e.child):(e.updateQueue=t.updateQueue,e.flags&=-517,t.lanes&=~r,na(t,e,r))}function Us(t,e,n,i,r){if(mr(n)){var o=!0;xr(e)}else o=!1;if(ro(e,r),null===e.stateNode)null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),vo(e,n,i),_o(e,n,i,r),i=!0;else if(null===t){var s=e.stateNode,a=e.memoizedProps;s.props=a;var l=s.context,c=n.contextType;c="object"==typeof c&&null!==c?oo(c):gr(e,c=mr(n)?pr:dr.current);var u=n.getDerivedStateFromProps,h="function"==typeof u||"function"==typeof s.getSnapshotBeforeUpdate;h||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(a!==i||l!==c)&&xo(e,s,i,c),so=!1;var d=e.memoizedState;s.state=d,fo(e,i,s,r),l=e.memoizedState,a!==i||d!==l||fr.current||so?("function"==typeof u&&(mo(e,n,u,i),l=e.memoizedState),(a=so||yo(e,n,a,i,d,l,c))?(h||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(e.flags|=4)):("function"==typeof s.componentDidMount&&(e.flags|=4),e.memoizedProps=i,e.memoizedState=l),s.props=i,s.state=l,s.context=c,i=a):("function"==typeof s.componentDidMount&&(e.flags|=4),i=!1)}else{s=e.stateNode,lo(t,e),a=e.memoizedProps,c=e.type===e.elementType?a:Kr(e.type,a),s.props=c,h=e.pendingProps,d=s.context,l="object"==typeof(l=n.contextType)&&null!==l?oo(l):gr(e,l=mr(n)?pr:dr.current);var f=n.getDerivedStateFromProps;(u="function"==typeof f||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(a!==h||d!==l)&&xo(e,s,i,l),so=!1,d=e.memoizedState,s.state=d,fo(e,i,s,r);var p=e.memoizedState;a!==h||d!==p||fr.current||so?("function"==typeof f&&(mo(e,n,f,i),p=e.memoizedState),(c=so||yo(e,n,c,i,d,p,l))?(u||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(i,p,l),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(i,p,l)),"function"==typeof s.componentDidUpdate&&(e.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(e.flags|=256)):("function"!=typeof s.componentDidUpdate||a===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||a===t.memoizedProps&&d===t.memoizedState||(e.flags|=256),e.memoizedProps=i,e.memoizedState=p),s.props=i,s.state=p,s.context=l,i=c):("function"!=typeof s.componentDidUpdate||a===t.memoizedProps&&d===t.memoizedState||(e.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||a===t.memoizedProps&&d===t.memoizedState||(e.flags|=256),i=!1)}return $s(t,e,n,i,o,r)}function $s(t,e,n,i,r,o){Ws(t,e);var s=0!=(64&e.flags);if(!i&&!s)return r&&_r(e,n,!1),na(t,e,o);i=e.stateNode,Is.current=e;var a=s&&"function"!=typeof n.getDerivedStateFromError?null:i.render();return e.flags|=1,null!==t&&s?(e.child=So(e,t.child,null,o),e.child=So(e,null,a,o)):Ns(t,e,a,o),e.memoizedState=i.state,r&&_r(e,n,!0),e.child}function Ys(t){var e=t.stateNode;e.pendingContext?yr(0,e.pendingContext,e.pendingContext!==e.context):e.context&&yr(0,e.context,!1),Lo(t,e.containerInfo)}var qs,Qs,Xs,Ks={dehydrated:null,retryLane:0};function Zs(t,e,n){var i,r=e.pendingProps,o=No.current,s=!1;return(i=0!=(64&e.flags))||(i=(null===t||null!==t.memoizedState)&&0!=(2&o)),i?(s=!0,e.flags&=-65):null!==t&&null===t.memoizedState||void 0===r.fallback||!0===r.unstable_avoidThisFallback||(o|=1),ur(No,1&o),null===t?(void 0!==r.fallback&&Uo(e),t=r.children,o=r.fallback,s?(t=Gs(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ks,t):"number"==typeof r.unstable_expectedLoadTime?(t=Gs(e,t,o,n),e.child.memoizedState={baseLanes:n},e.memoizedState=Ks,e.lanes=33554432,t):((n=Yl({mode:"visible",children:t},e.mode,n,null)).return=e,e.child=n)):(t.memoizedState,s?(r=function(t,e,n,i,r){var o=e.mode,s=t.child;t=s.sibling;var a={mode:"hidden",children:n};return 0==(2&o)&&e.child!==s?((n=e.child).childLanes=0,n.pendingProps=a,null!==(s=n.lastEffect)?(e.firstEffect=n.firstEffect,e.lastEffect=s,s.nextEffect=null):e.firstEffect=e.lastEffect=null):n=Hl(s,a),null!==t?i=Hl(t,i):(i=$l(i,o,r,null)).flags|=2,i.return=e,n.return=e,n.sibling=i,e.child=n,i}(t,e,r.children,r.fallback,n),s=e.child,o=t.child.memoizedState,s.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},s.childLanes=t.childLanes&~n,e.memoizedState=Ks,r):(n=function(t,e,n,i){var r=t.child;return t=r.sibling,n=Hl(r,{mode:"visible",children:n}),0==(2&e.mode)&&(n.lanes=i),n.return=e,n.sibling=null,null!==t&&(t.nextEffect=null,t.flags=8,e.firstEffect=e.lastEffect=t),e.child=n}(t,e,r.children,n),e.memoizedState=null,n))}function Gs(t,e,n,i){var r=t.mode,o=t.child;return e={mode:"hidden",children:e},0==(2&r)&&null!==o?(o.childLanes=0,o.pendingProps=e):o=Yl(e,r,0,null),n=$l(n,r,i,null),o.return=t,n.return=t,o.sibling=n,t.child=o,n}function Js(t,e){t.lanes|=e;var n=t.alternate;null!==n&&(n.lanes|=e),io(t.return,e)}function ta(t,e,n,i,r,o){var s=t.memoizedState;null===s?t.memoizedState={isBackwards:e,rendering:null,renderingStartTime:0,last:i,tail:n,tailMode:r,lastEffect:o}:(s.isBackwards=e,s.rendering=null,s.renderingStartTime=0,s.last=i,s.tail=n,s.tailMode=r,s.lastEffect=o)}function ea(t,e,n){var i=e.pendingProps,r=i.revealOrder,o=i.tail;if(Ns(t,e,i.children,n),0!=(2&(i=No.current)))i=1&i|2,e.flags|=64;else{if(null!==t&&0!=(64&t.flags))t:for(t=e.child;null!==t;){if(13===t.tag)null!==t.memoizedState&&Js(t,n);else if(19===t.tag)Js(t,n);else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break t;for(;null===t.sibling;){if(null===t.return||t.return===e)break t;t=t.return}t.sibling.return=t.return,t=t.sibling}i&=1}if(ur(No,i),0==(2&e.mode))e.memoizedState=null;else switch(r){case"forwards":for(n=e.child,r=null;null!==n;)null!==(t=n.alternate)&&null===zo(t)&&(r=n),n=n.sibling;null===(n=r)?(r=e.child,e.child=null):(r=n.sibling,n.sibling=null),ta(e,!1,r,n,o,e.lastEffect);break;case"backwards":for(n=null,r=e.child,e.child=null;null!==r;){if(null!==(t=r.alternate)&&null===zo(t)){e.child=r;break}t=r.sibling,r.sibling=n,n=r,r=t}ta(e,!0,n,null,o,e.lastEffect);break;case"together":ta(e,!1,null,null,void 0,e.lastEffect);break;default:e.memoizedState=null}return e.child}function na(t,e,n){if(null!==t&&(e.dependencies=t.dependencies),za|=e.lanes,0!=(n&e.childLanes)){if(null!==t&&e.child!==t.child)throw Error(s(153));if(null!==e.child){for(n=Hl(t=e.child,t.pendingProps),e.child=n,n.return=e;null!==t.sibling;)t=t.sibling,(n=n.sibling=Hl(t,t.pendingProps)).return=e;n.sibling=null}return e.child}return null}function ia(t,e){if(!Vo)switch(t.tailMode){case"hidden":e=t.tail;for(var n=null;null!==e;)null!==e.alternate&&(n=e),e=e.sibling;null===n?t.tail=null:n.sibling=null;break;case"collapsed":n=t.tail;for(var i=null;null!==n;)null!==n.alternate&&(i=n),n=n.sibling;null===i?e||null===t.tail?t.tail=null:t.tail.sibling=null:i.sibling=null}}function ra(t,e,n){var i=e.pendingProps;switch(e.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return mr(e.type)&&br(),null;case 3:return Ro(),cr(fr),cr(dr),Xo(),(i=e.stateNode).pendingContext&&(i.context=i.pendingContext,i.pendingContext=null),null!==t&&null!==t.child||(Yo(e)?e.flags|=4:i.hydrate||(e.flags|=256)),null;case 5:Bo(e);var o=Do(To.current);if(n=e.type,null!==t&&null!=e.stateNode)Qs(t,e,n,i),t.ref!==e.ref&&(e.flags|=128);else{if(!i){if(null===e.stateNode)throw Error(s(166));return null}if(t=Do(Po.current),Yo(e)){i=e.stateNode,n=e.type;var a=e.memoizedProps;switch(i[Zi]=e,i[Gi]=a,n){case"dialog":Pi("cancel",i),Pi("close",i);break;case"iframe":case"object":case"embed":Pi("load",i);break;case"video":case"audio":for(t=0;t<Ci.length;t++)Pi(Ci[t],i);break;case"source":Pi("error",i);break;case"img":case"image":case"link":Pi("error",i),Pi("load",i);break;case"details":Pi("toggle",i);break;case"input":tt(i,a),Pi("invalid",i);break;case"select":i._wrapperState={wasMultiple:!!a.multiple},Pi("invalid",i);break;case"textarea":lt(i,a),Pi("invalid",i)}for(var c in kt(n,a),t=null,a)a.hasOwnProperty(c)&&(o=a[c],"children"===c?"string"==typeof o?i.textContent!==o&&(t=["children",o]):"number"==typeof o&&i.textContent!==""+o&&(t=["children",""+o]):l.hasOwnProperty(c)&&null!=o&&"onScroll"===c&&Pi("scroll",i));switch(n){case"input":K(i),it(i,a,!0);break;case"textarea":K(i),ut(i);break;case"select":case"option":break;default:"function"==typeof a.onClick&&(i.onclick=Fi)}i=t,e.updateQueue=i,null!==i&&(e.flags|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,t===ht&&(t=dt(n)),t===ht?"script"===n?((t=c.createElement("div")).innerHTML="<script><\/script>",t=t.removeChild(t.firstChild)):"string"==typeof i.is?t=c.createElement(n,{is:i.is}):(t=c.createElement(n),"select"===n&&(c=t,i.multiple?c.multiple=!0:i.size&&(c.size=i.size))):t=c.createElementNS(t,n),t[Zi]=e,t[Gi]=i,qs(t,e),e.stateNode=t,c=At(n,i),n){case"dialog":Pi("cancel",t),Pi("close",t),o=i;break;case"iframe":case"object":case"embed":Pi("load",t),o=i;break;case"video":case"audio":for(o=0;o<Ci.length;o++)Pi(Ci[o],t);o=i;break;case"source":Pi("error",t),o=i;break;case"img":case"image":case"link":Pi("error",t),Pi("load",t),o=i;break;case"details":Pi("toggle",t),o=i;break;case"input":tt(t,i),o=J(t,i),Pi("invalid",t);break;case"option":o=ot(t,i);break;case"select":t._wrapperState={wasMultiple:!!i.multiple},o=r({},i,{value:void 0}),Pi("invalid",t);break;case"textarea":lt(t,i),o=at(t,i),Pi("invalid",t);break;default:o=i}kt(n,o);var u=o;for(a in u)if(u.hasOwnProperty(a)){var h=u[a];"style"===a?_t(t,h):"dangerouslySetInnerHTML"===a?null!=(h=h?h.__html:void 0)&&mt(t,h):"children"===a?"string"==typeof h?("textarea"!==n||""!==h)&&bt(t,h):"number"==typeof h&&bt(t,""+h):"suppressContentEditableWarning"!==a&&"suppressHydrationWarning"!==a&&"autoFocus"!==a&&(l.hasOwnProperty(a)?null!=h&&"onScroll"===a&&Pi("scroll",t):null!=h&&x(t,a,h,c))}switch(n){case"input":K(t),it(t,i,!1);break;case"textarea":K(t),ut(t);break;case"option":null!=i.value&&t.setAttribute("value",""+Q(i.value));break;case"select":t.multiple=!!i.multiple,null!=(a=i.value)?st(t,!!i.multiple,a,!1):null!=i.defaultValue&&st(t,!!i.multiple,i.defaultValue,!0);break;default:"function"==typeof o.onClick&&(t.onclick=Fi)}Wi(n,i)&&(e.flags|=4)}null!==e.ref&&(e.flags|=128)}return null;case 6:if(t&&null!=e.stateNode)Xs(0,e,t.memoizedProps,i);else{if("string"!=typeof i&&null===e.stateNode)throw Error(s(166));n=Do(To.current),Do(Po.current),Yo(e)?(i=e.stateNode,n=e.memoizedProps,i[Zi]=e,i.nodeValue!==n&&(e.flags|=4)):((i=(9===n.nodeType?n:n.ownerDocument).createTextNode(i))[Zi]=e,e.stateNode=i)}return null;case 13:return cr(No),i=e.memoizedState,0!=(64&e.flags)?(e.lanes=n,e):(i=null!==i,n=!1,null===t?void 0!==e.memoizedProps.fallback&&Yo(e):n=null!==t.memoizedState,i&&!n&&0!=(2&e.mode)&&(null===t&&!0!==e.memoizedProps.unstable_avoidThisFallback||0!=(1&No.current)?0===Ia&&(Ia=3):(0!==Ia&&3!==Ia||(Ia=4),null===Oa||0==(134217727&za)&&0==(134217727&Fa)||gl(Oa,Da))),(i||n)&&(e.flags|=4),null);case 4:return Ro(),null===t&&Ti(e.stateNode.containerInfo),null;case 10:return no(e),null;case 19:if(cr(No),null===(i=e.memoizedState))return null;if(a=0!=(64&e.flags),null===(c=i.rendering))if(a)ia(i,!1);else{if(0!==Ia||null!==t&&0!=(64&t.flags))for(t=e.child;null!==t;){if(null!==(c=zo(t))){for(e.flags|=64,ia(i,!1),null!==(a=c.updateQueue)&&(e.updateQueue=a,e.flags|=4),null===i.lastEffect&&(e.firstEffect=null),e.lastEffect=i.lastEffect,i=n,n=e.child;null!==n;)t=i,(a=n).flags&=2,a.nextEffect=null,a.firstEffect=null,a.lastEffect=null,null===(c=a.alternate)?(a.childLanes=0,a.lanes=t,a.child=null,a.memoizedProps=null,a.memoizedState=null,a.updateQueue=null,a.dependencies=null,a.stateNode=null):(a.childLanes=c.childLanes,a.lanes=c.lanes,a.child=c.child,a.memoizedProps=c.memoizedProps,a.memoizedState=c.memoizedState,a.updateQueue=c.updateQueue,a.type=c.type,t=c.dependencies,a.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext}),n=n.sibling;return ur(No,1&No.current|2),e.child}t=t.sibling}null!==i.tail&&Wr()>Ha&&(e.flags|=64,a=!0,ia(i,!1),e.lanes=33554432)}else{if(!a)if(null!==(t=zo(c))){if(e.flags|=64,a=!0,null!==(n=t.updateQueue)&&(e.updateQueue=n,e.flags|=4),ia(i,!0),null===i.tail&&"hidden"===i.tailMode&&!c.alternate&&!Vo)return null!==(e=e.lastEffect=i.lastEffect)&&(e.nextEffect=null),null}else 2*Wr()-i.renderingStartTime>Ha&&1073741824!==n&&(e.flags|=64,a=!0,ia(i,!1),e.lanes=33554432);i.isBackwards?(c.sibling=e.child,e.child=c):(null!==(n=i.last)?n.sibling=c:e.child=c,i.last=c)}return null!==i.tail?(n=i.tail,i.rendering=n,i.tail=n.sibling,i.lastEffect=e.lastEffect,i.renderingStartTime=Wr(),n.sibling=null,e=No.current,ur(No,a?1&e|2:1&e),n):null;case 23:case 24:return xl(),null!==t&&null!==t.memoizedState!=(null!==e.memoizedState)&&"unstable-defer-without-hiding"!==i.mode&&(e.flags|=4),null}throw Error(s(156,e.tag))}function oa(t){switch(t.tag){case 1:mr(t.type)&&br();var e=t.flags;return 4096&e?(t.flags=-4097&e|64,t):null;case 3:if(Ro(),cr(fr),cr(dr),Xo(),0!=(64&(e=t.flags)))throw Error(s(285));return t.flags=-4097&e|64,t;case 5:return Bo(t),null;case 13:return cr(No),4096&(e=t.flags)?(t.flags=-4097&e|64,t):null;case 19:return cr(No),null;case 4:return Ro(),null;case 10:return no(t),null;case 23:case 24:return xl(),null;default:return null}}function sa(t,e){try{var n="",i=e;do{n+=Y(i),i=i.return}while(i);var r=n}catch(t){r="\nError generating stack: "+t.message+"\n"+t.stack}return{value:t,source:e,stack:r}}function aa(t,e){try{console.error(e.value)}catch(t){setTimeout((function(){throw t}))}}qs=function(t,e){for(var n=e.child;null!==n;){if(5===n.tag||6===n.tag)t.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Qs=function(t,e,n,i){var o=t.memoizedProps;if(o!==i){t=e.stateNode,Do(Po.current);var s,a=null;switch(n){case"input":o=J(t,o),i=J(t,i),a=[];break;case"option":o=ot(t,o),i=ot(t,i),a=[];break;case"select":o=r({},o,{value:void 0}),i=r({},i,{value:void 0}),a=[];break;case"textarea":o=at(t,o),i=at(t,i),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof i.onClick&&(t.onclick=Fi)}for(h in kt(n,i),n=null,o)if(!i.hasOwnProperty(h)&&o.hasOwnProperty(h)&&null!=o[h])if("style"===h){var c=o[h];for(s in c)c.hasOwnProperty(s)&&(n||(n={}),n[s]="")}else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(l.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in i){var u=i[h];if(c=null!=o?o[h]:void 0,i.hasOwnProperty(h)&&u!==c&&(null!=u||null!=c))if("style"===h)if(c){for(s in c)!c.hasOwnProperty(s)||u&&u.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in u)u.hasOwnProperty(s)&&c[s]!==u[s]&&(n||(n={}),n[s]=u[s])}else n||(a||(a=[]),a.push(h,n)),n=u;else"dangerouslySetInnerHTML"===h?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(a=a||[]).push(h,u)):"children"===h?"string"!=typeof u&&"number"!=typeof u||(a=a||[]).push(h,""+u):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(l.hasOwnProperty(h)?(null!=u&&"onScroll"===h&&Pi("scroll",t),a||c===u||(a=[])):"object"==typeof u&&null!==u&&u.$$typeof===I?u.toString():(a=a||[]).push(h,u))}n&&(a=a||[]).push("style",n);var h=a;(e.updateQueue=h)&&(e.flags|=4)}},Xs=function(t,e,n,i){n!==i&&(e.flags|=4)};var la="function"==typeof WeakMap?WeakMap:Map;function ca(t,e,n){(n=co(-1,n)).tag=3,n.payload={element:null};var i=e.value;return n.callback=function(){qa||(qa=!0,Qa=i),aa(0,e)},n}function ua(t,e,n){(n=co(-1,n)).tag=3;var i=t.type.getDerivedStateFromError;if("function"==typeof i){var r=e.value;n.payload=function(){return aa(0,e),i(r)}}var o=t.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof i&&(null===Xa?Xa=new Set([this]):Xa.add(this),aa(0,e));var t=e.stack;this.componentDidCatch(e.value,{componentStack:null!==t?t:""})}),n}var ha="function"==typeof WeakSet?WeakSet:Set;function da(t){var e=t.ref;if(null!==e)if("function"==typeof e)try{e(null)}catch(e){Nl(t,e)}else e.current=null}function fa(t,e){switch(e.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&e.flags&&null!==t){var n=t.memoizedProps,i=t.memoizedState;e=(t=e.stateNode).getSnapshotBeforeUpdate(e.elementType===e.type?n:Kr(e.type,n),i),t.__reactInternalSnapshotBeforeUpdate=e}return;case 3:return void(256&e.flags&&Yi(e.stateNode.containerInfo))}throw Error(s(163))}function pa(t,e,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{if(3==(3&t.tag)){var i=t.create;t.destroy=i()}t=t.next}while(t!==e)}if(null!==(e=null!==(e=n.updateQueue)?e.lastEffect:null)){t=e=e.next;do{var r=t;i=r.next,0!=(4&(r=r.tag))&&0!=(1&r)&&(Rl(n,t),Ll(n,t)),t=i}while(t!==e)}return;case 1:return t=n.stateNode,4&n.flags&&(null===e?t.componentDidMount():(i=n.elementType===n.type?e.memoizedProps:Kr(n.type,e.memoizedProps),t.componentDidUpdate(i,e.memoizedState,t.__reactInternalSnapshotBeforeUpdate))),void(null!==(e=n.updateQueue)&&po(n,e,t));case 3:if(null!==(e=n.updateQueue)){if(t=null,null!==n.child)switch(n.child.tag){case 5:case 1:t=n.child.stateNode}po(n,e,t)}return;case 5:return t=n.stateNode,void(null===e&&4&n.flags&&Wi(n.type,n.memoizedProps)&&t.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_e(n)))))}throw Error(s(163))}function ga(t,e){for(var n=t;;){if(5===n.tag){var i=n.stateNode;if(e)"function"==typeof(i=i.style).setProperty?i.setProperty("display","none","important"):i.display="none";else{i=n.stateNode;var r=n.memoizedProps.style;r=null!=r&&r.hasOwnProperty("display")?r.display:null,i.style.display=xt("display",r)}}else if(6===n.tag)n.stateNode.nodeValue=e?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===t)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function ma(t,e){if(kr&&"function"==typeof kr.onCommitFiberUnmount)try{kr.onCommitFiberUnmount(wr,e)}catch(t){}switch(e.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(t=e.updateQueue)&&null!==(t=t.lastEffect)){var n=t=t.next;do{var i=n,r=i.destroy;if(i=i.tag,void 0!==r)if(0!=(4&i))Rl(e,n);else{i=e;try{r()}catch(t){Nl(i,t)}}n=n.next}while(n!==t)}break;case 1:if(da(e),"function"==typeof(t=e.stateNode).componentWillUnmount)try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Nl(e,t)}break;case 5:da(e);break;case 4:wa(t,e)}}function ba(t){t.alternate=null,t.child=null,t.dependencies=null,t.firstEffect=null,t.lastEffect=null,t.memoizedProps=null,t.memoizedState=null,t.pendingProps=null,t.return=null,t.updateQueue=null}function ya(t){return 5===t.tag||3===t.tag||4===t.tag}function va(t){t:{for(var e=t.return;null!==e;){if(ya(e))break t;e=e.return}throw Error(s(160))}var n=e;switch(e=n.stateNode,n.tag){case 5:var i=!1;break;case 3:case 4:e=e.containerInfo,i=!0;break;default:throw Error(s(161))}16&n.flags&&(bt(e,""),n.flags&=-17);t:e:for(n=t;;){for(;null===n.sibling;){if(null===n.return||ya(n.return)){n=null;break t}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue e;if(null===n.child||4===n.tag)continue e;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break t}}i?xa(t,n,e):_a(t,n,e)}function xa(t,e,n){var i=t.tag,r=5===i||6===i;if(r)t=r?t.stateNode:t.stateNode.instance,e?8===n.nodeType?n.parentNode.insertBefore(t,e):n.insertBefore(t,e):(8===n.nodeType?(e=n.parentNode).insertBefore(t,n):(e=n).appendChild(t),null!=(n=n._reactRootContainer)||null!==e.onclick||(e.onclick=Fi));else if(4!==i&&null!==(t=t.child))for(xa(t,e,n),t=t.sibling;null!==t;)xa(t,e,n),t=t.sibling}function _a(t,e,n){var i=t.tag,r=5===i||6===i;if(r)t=r?t.stateNode:t.stateNode.instance,e?n.insertBefore(t,e):n.appendChild(t);else if(4!==i&&null!==(t=t.child))for(_a(t,e,n),t=t.sibling;null!==t;)_a(t,e,n),t=t.sibling}function wa(t,e){for(var n,i,r=e,o=!1;;){if(!o){o=r.return;t:for(;;){if(null===o)throw Error(s(160));switch(n=o.stateNode,o.tag){case 5:i=!1;break t;case 3:case 4:n=n.containerInfo,i=!0;break t}o=o.return}o=!0}if(5===r.tag||6===r.tag){t:for(var a=t,l=r,c=l;;)if(ma(a,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break t;for(;null===c.sibling;){if(null===c.return||c.return===l)break t;c=c.return}c.sibling.return=c.return,c=c.sibling}i?(a=n,l=r.stateNode,8===a.nodeType?a.parentNode.removeChild(l):a.removeChild(l)):n.removeChild(r.stateNode)}else if(4===r.tag){if(null!==r.child){n=r.stateNode.containerInfo,i=!0,r.child.return=r,r=r.child;continue}}else if(ma(t,r),null!==r.child){r.child.return=r,r=r.child;continue}if(r===e)break;for(;null===r.sibling;){if(null===r.return||r.return===e)return;4===(r=r.return).tag&&(o=!1)}r.sibling.return=r.return,r=r.sibling}}function ka(t,e){switch(e.tag){case 0:case 11:case 14:case 15:case 22:var n=e.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var i=n=n.next;do{3==(3&i.tag)&&(t=i.destroy,i.destroy=void 0,void 0!==t&&t()),i=i.next}while(i!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=e.stateNode)){i=e.memoizedProps;var r=null!==t?t.memoizedProps:i;t=e.type;var o=e.updateQueue;if(e.updateQueue=null,null!==o){for(n[Gi]=i,"input"===t&&"radio"===i.type&&null!=i.name&&et(n,i),At(t,r),e=At(t,i),r=0;r<o.length;r+=2){var a=o[r],l=o[r+1];"style"===a?_t(n,l):"dangerouslySetInnerHTML"===a?mt(n,l):"children"===a?bt(n,l):x(n,a,l,e)}switch(t){case"input":nt(n,i);break;case"textarea":ct(n,i);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!i.multiple,null!=(o=i.value)?st(n,!!i.multiple,o,!1):t!==!!i.multiple&&(null!=i.defaultValue?st(n,!!i.multiple,i.defaultValue,!0):st(n,!!i.multiple,i.multiple?[]:"",!1))}}}return;case 6:if(null===e.stateNode)throw Error(s(162));return void(e.stateNode.nodeValue=e.memoizedProps);case 3:return void((n=e.stateNode).hydrate&&(n.hydrate=!1,_e(n.containerInfo)));case 13:return null!==e.memoizedState&&(Wa=Wr(),ga(e.child,!0)),void Aa(e);case 19:return void Aa(e);case 23:case 24:return void ga(e,null!==e.memoizedState)}throw Error(s(163))}function Aa(t){var e=t.updateQueue;if(null!==e){t.updateQueue=null;var n=t.stateNode;null===n&&(n=t.stateNode=new ha),e.forEach((function(e){var i=Fl.bind(null,t,e);n.has(e)||(n.add(e),e.then(i,i))}))}}function Ca(t,e){return null!==t&&(null===(t=t.memoizedState)||null!==t.dehydrated)&&null!==(e=e.memoizedState)&&null===e.dehydrated}var Sa=Math.ceil,Ea=_.ReactCurrentDispatcher,Ma=_.ReactCurrentOwner,Pa=0,Oa=null,Ta=null,Da=0,La=0,Ra=lr(0),Ia=0,Ba=null,Na=0,za=0,Fa=0,ja=0,Va=null,Wa=0,Ha=1/0;function Ua(){Ha=Wr()+500}var $a,Ya=null,qa=!1,Qa=null,Xa=null,Ka=!1,Za=null,Ga=90,Ja=[],tl=[],el=null,nl=0,il=null,rl=-1,ol=0,sl=0,al=null,ll=!1;function cl(){return 0!=(48&Pa)?Wr():-1!==rl?rl:rl=Wr()}function ul(t){if(0==(2&(t=t.mode)))return 1;if(0==(4&t))return 99===Hr()?1:2;if(0===ol&&(ol=Na),0!==Xr.transition){0!==sl&&(sl=null!==Va?Va.pendingLanes:0),t=ol;var e=4186112&~sl;return 0==(e&=-e)&&0==(e=(t=4186112&~t)&-t)&&(e=8192),e}return t=Hr(),t=Fe(0!=(4&Pa)&&98===t?12:t=function(t){switch(t){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(t),ol)}function hl(t,e,n){if(50<nl)throw nl=0,il=null,Error(s(185));if(null===(t=dl(t,e)))return null;We(t,e,n),t===Oa&&(Fa|=e,4===Ia&&gl(t,Da));var i=Hr();1===e?0!=(8&Pa)&&0==(48&Pa)?ml(t):(fl(t,n),0===Pa&&(Ua(),qr())):(0==(4&Pa)||98!==i&&99!==i||(null===el?el=new Set([t]):el.add(t)),fl(t,n)),Va=t}function dl(t,e){t.lanes|=e;var n=t.alternate;for(null!==n&&(n.lanes|=e),n=t,t=t.return;null!==t;)t.childLanes|=e,null!==(n=t.alternate)&&(n.childLanes|=e),n=t,t=t.return;return 3===n.tag?n.stateNode:null}function fl(t,e){for(var n=t.callbackNode,i=t.suspendedLanes,r=t.pingedLanes,o=t.expirationTimes,a=t.pendingLanes;0<a;){var l=31-He(a),c=1<<l,u=o[l];if(-1===u){if(0==(c&i)||0!=(c&r)){u=e,Be(c);var h=Ie;o[l]=10<=h?u+250:6<=h?u+5e3:-1}}else u<=e&&(t.expiredLanes|=c);a&=~c}if(i=Ne(t,t===Oa?Da:0),e=Ie,0===i)null!==n&&(n!==Br&&Sr(n),t.callbackNode=null,t.callbackPriority=0);else{if(null!==n){if(t.callbackPriority===e)return;n!==Br&&Sr(n)}15===e?(n=ml.bind(null,t),null===zr?(zr=[n],Fr=Cr(Tr,Qr)):zr.push(n),n=Br):14===e?n=Yr(99,ml.bind(null,t)):(n=function(t){switch(t){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(s(358,t))}}(e),n=Yr(n,pl.bind(null,t))),t.callbackPriority=e,t.callbackNode=n}}function pl(t){if(rl=-1,sl=ol=0,0!=(48&Pa))throw Error(s(327));var e=t.callbackNode;if(Dl()&&t.callbackNode!==e)return null;var n=Ne(t,t===Oa?Da:0);if(0===n)return null;var i=n,r=Pa;Pa|=16;var o=kl();for(Oa===t&&Da===i||(Ua(),_l(t,i));;)try{Sl();break}catch(e){wl(t,e)}if(eo(),Ea.current=o,Pa=r,null!==Ta?i=0:(Oa=null,Da=0,i=Ia),0!=(Na&Fa))_l(t,0);else if(0!==i){if(2===i&&(Pa|=64,t.hydrate&&(t.hydrate=!1,Yi(t.containerInfo)),0!==(n=ze(t))&&(i=Al(t,n))),1===i)throw e=Ba,_l(t,0),gl(t,n),fl(t,Wr()),e;switch(t.finishedWork=t.current.alternate,t.finishedLanes=n,i){case 0:case 1:throw Error(s(345));case 2:case 5:Pl(t);break;case 3:if(gl(t,n),(62914560&n)===n&&10<(i=Wa+500-Wr())){if(0!==Ne(t,0))break;if(((r=t.suspendedLanes)&n)!==n){cl(),t.pingedLanes|=t.suspendedLanes&r;break}t.timeoutHandle=Ui(Pl.bind(null,t),i);break}Pl(t);break;case 4:if(gl(t,n),(4186112&n)===n)break;for(i=t.eventTimes,r=-1;0<n;){var a=31-He(n);o=1<<a,(a=i[a])>r&&(r=a),n&=~o}if(n=r,10<(n=(120>(n=Wr()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Sa(n/1960))-n)){t.timeoutHandle=Ui(Pl.bind(null,t),n);break}Pl(t);break;default:throw Error(s(329))}}return fl(t,Wr()),t.callbackNode===e?pl.bind(null,t):null}function gl(t,e){for(e&=~ja,e&=~Fa,t.suspendedLanes|=e,t.pingedLanes&=~e,t=t.expirationTimes;0<e;){var n=31-He(e),i=1<<n;t[n]=-1,e&=~i}}function ml(t){if(0!=(48&Pa))throw Error(s(327));if(Dl(),t===Oa&&0!=(t.expiredLanes&Da)){var e=Da,n=Al(t,e);0!=(Na&Fa)&&(n=Al(t,e=Ne(t,e)))}else n=Al(t,e=Ne(t,0));if(0!==t.tag&&2===n&&(Pa|=64,t.hydrate&&(t.hydrate=!1,Yi(t.containerInfo)),0!==(e=ze(t))&&(n=Al(t,e))),1===n)throw n=Ba,_l(t,0),gl(t,e),fl(t,Wr()),n;return t.finishedWork=t.current.alternate,t.finishedLanes=e,Pl(t),fl(t,Wr()),null}function bl(t,e){var n=Pa;Pa|=1;try{return t(e)}finally{0===(Pa=n)&&(Ua(),qr())}}function yl(t,e){var n=Pa;Pa&=-2,Pa|=8;try{return t(e)}finally{0===(Pa=n)&&(Ua(),qr())}}function vl(t,e){ur(Ra,La),La|=e,Na|=e}function xl(){La=Ra.current,cr(Ra)}function _l(t,e){t.finishedWork=null,t.finishedLanes=0;var n=t.timeoutHandle;if(-1!==n&&(t.timeoutHandle=-1,$i(n)),null!==Ta)for(n=Ta.return;null!==n;){var i=n;switch(i.tag){case 1:null!=(i=i.type.childContextTypes)&&br();break;case 3:Ro(),cr(fr),cr(dr),Xo();break;case 5:Bo(i);break;case 4:Ro();break;case 13:case 19:cr(No);break;case 10:no(i);break;case 23:case 24:xl()}n=n.return}Oa=t,Ta=Hl(t.current,null),Da=La=Na=e,Ia=0,Ba=null,ja=Fa=za=0}function wl(t,e){for(;;){var n=Ta;try{if(eo(),Ko.current=Ts,ns){for(var i=Jo.memoizedState;null!==i;){var r=i.queue;null!==r&&(r.pending=null),i=i.next}ns=!1}if(Go=0,es=ts=Jo=null,is=!1,Ma.current=null,null===n||null===n.return){Ia=1,Ba=e,Ta=null;break}t:{var o=t,s=n.return,a=n,l=e;if(e=Da,a.flags|=2048,a.firstEffect=a.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(0==(2&a.mode)){var u=a.alternate;u?(a.updateQueue=u.updateQueue,a.memoizedState=u.memoizedState,a.lanes=u.lanes):(a.updateQueue=null,a.memoizedState=null)}var h=0!=(1&No.current),d=s;do{var f;if(f=13===d.tag){var p=d.memoizedState;if(null!==p)f=null!==p.dehydrated;else{var g=d.memoizedProps;f=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!h)}}if(f){var m=d.updateQueue;if(null===m){var b=new Set;b.add(c),d.updateQueue=b}else m.add(c);if(0==(2&d.mode)){if(d.flags|=64,a.flags|=16384,a.flags&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var y=co(-1,1);y.tag=2,uo(a,y)}a.lanes|=1;break t}l=void 0,a=e;var v=o.pingCache;if(null===v?(v=o.pingCache=new la,l=new Set,v.set(c,l)):void 0===(l=v.get(c))&&(l=new Set,v.set(c,l)),!l.has(a)){l.add(a);var x=zl.bind(null,o,c,a);c.then(x,x)}d.flags|=4096,d.lanes=e;break t}d=d.return}while(null!==d);l=Error((q(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ia&&(Ia=2),l=sa(l,a),d=s;do{switch(d.tag){case 3:o=l,d.flags|=4096,e&=-e,d.lanes|=e,ho(d,ca(0,o,e));break t;case 1:o=l;var _=d.type,w=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Xa||!Xa.has(w)))){d.flags|=4096,e&=-e,d.lanes|=e,ho(d,ua(d,o,e));break t}}d=d.return}while(null!==d)}Ml(n)}catch(t){e=t,Ta===n&&null!==n&&(Ta=n=n.return);continue}break}}function kl(){var t=Ea.current;return Ea.current=Ts,null===t?Ts:t}function Al(t,e){var n=Pa;Pa|=16;var i=kl();for(Oa===t&&Da===e||_l(t,e);;)try{Cl();break}catch(e){wl(t,e)}if(eo(),Pa=n,Ea.current=i,null!==Ta)throw Error(s(261));return Oa=null,Da=0,Ia}function Cl(){for(;null!==Ta;)El(Ta)}function Sl(){for(;null!==Ta&&!Er();)El(Ta)}function El(t){var e=$a(t.alternate,t,La);t.memoizedProps=t.pendingProps,null===e?Ml(t):Ta=e,Ma.current=null}function Ml(t){var e=t;do{var n=e.alternate;if(t=e.return,0==(2048&e.flags)){if(null!==(n=ra(n,e,La)))return void(Ta=n);if(24!==(n=e).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&La)||0==(4&n.mode)){for(var i=0,r=n.child;null!==r;)i|=r.lanes|r.childLanes,r=r.sibling;n.childLanes=i}null!==t&&0==(2048&t.flags)&&(null===t.firstEffect&&(t.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==t.lastEffect&&(t.lastEffect.nextEffect=e.firstEffect),t.lastEffect=e.lastEffect),1<e.flags&&(null!==t.lastEffect?t.lastEffect.nextEffect=e:t.firstEffect=e,t.lastEffect=e))}else{if(null!==(n=oa(e)))return n.flags&=2047,void(Ta=n);null!==t&&(t.firstEffect=t.lastEffect=null,t.flags|=2048)}if(null!==(e=e.sibling))return void(Ta=e);Ta=e=t}while(null!==e);0===Ia&&(Ia=5)}function Pl(t){var e=Hr();return $r(99,Ol.bind(null,t,e)),null}function Ol(t,e){do{Dl()}while(null!==Za);if(0!=(48&Pa))throw Error(s(327));var n=t.finishedWork;if(null===n)return null;if(t.finishedWork=null,t.finishedLanes=0,n===t.current)throw Error(s(177));t.callbackNode=null;var i=n.lanes|n.childLanes,r=i,o=t.pendingLanes&~r;t.pendingLanes=r,t.suspendedLanes=0,t.pingedLanes=0,t.expiredLanes&=r,t.mutableReadLanes&=r,t.entangledLanes&=r,r=t.entanglements;for(var a=t.eventTimes,l=t.expirationTimes;0<o;){var c=31-He(o),u=1<<c;r[c]=0,a[c]=-1,l[c]=-1,o&=~u}if(null!==el&&0==(24&i)&&el.has(t)&&el.delete(t),t===Oa&&(Ta=Oa=null,Da=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){if(r=Pa,Pa|=32,Ma.current=null,ji=Qe,mi(a=gi())){if("selectionStart"in a)l={start:a.selectionStart,end:a.selectionEnd};else t:if(l=(l=a.ownerDocument)&&l.defaultView||window,(u=l.getSelection&&l.getSelection())&&0!==u.rangeCount){l=u.anchorNode,o=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{l.nodeType,c.nodeType}catch(t){l=null;break t}var h=0,d=-1,f=-1,p=0,g=0,m=a,b=null;e:for(;;){for(var y;m!==l||0!==o&&3!==m.nodeType||(d=h+o),m!==c||0!==u&&3!==m.nodeType||(f=h+u),3===m.nodeType&&(h+=m.nodeValue.length),null!==(y=m.firstChild);)b=m,m=y;for(;;){if(m===a)break e;if(b===l&&++p===o&&(d=h),b===c&&++g===u&&(f=h),null!==(y=m.nextSibling))break;b=(m=b).parentNode}m=y}l=-1===d||-1===f?null:{start:d,end:f}}else l=null;l=l||{start:0,end:0}}else l=null;Vi={focusedElem:a,selectionRange:l},Qe=!1,al=null,ll=!1,Ya=i;do{try{Tl()}catch(t){if(null===Ya)throw Error(s(330));Nl(Ya,t),Ya=Ya.nextEffect}}while(null!==Ya);al=null,Ya=i;do{try{for(a=t;null!==Ya;){var v=Ya.flags;if(16&v&&bt(Ya.stateNode,""),128&v){var x=Ya.alternate;if(null!==x){var _=x.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&v){case 2:va(Ya),Ya.flags&=-3;break;case 6:va(Ya),Ya.flags&=-3,ka(Ya.alternate,Ya);break;case 1024:Ya.flags&=-1025;break;case 1028:Ya.flags&=-1025,ka(Ya.alternate,Ya);break;case 4:ka(Ya.alternate,Ya);break;case 8:wa(a,l=Ya);var w=l.alternate;ba(l),null!==w&&ba(w)}Ya=Ya.nextEffect}}catch(t){if(null===Ya)throw Error(s(330));Nl(Ya,t),Ya=Ya.nextEffect}}while(null!==Ya);if(_=Vi,x=gi(),v=_.focusedElem,a=_.selectionRange,x!==v&&v&&v.ownerDocument&&pi(v.ownerDocument.documentElement,v)){null!==a&&mi(v)&&(x=a.start,void 0===(_=a.end)&&(_=x),"selectionStart"in v?(v.selectionStart=x,v.selectionEnd=Math.min(_,v.value.length)):(_=(x=v.ownerDocument||document)&&x.defaultView||window).getSelection&&(_=_.getSelection(),l=v.textContent.length,w=Math.min(a.start,l),a=void 0===a.end?w:Math.min(a.end,l),!_.extend&&w>a&&(l=a,a=w,w=l),l=fi(v,w),o=fi(v,a),l&&o&&(1!==_.rangeCount||_.anchorNode!==l.node||_.anchorOffset!==l.offset||_.focusNode!==o.node||_.focusOffset!==o.offset)&&((x=x.createRange()).setStart(l.node,l.offset),_.removeAllRanges(),w>a?(_.addRange(x),_.extend(o.node,o.offset)):(x.setEnd(o.node,o.offset),_.addRange(x))))),x=[];for(_=v;_=_.parentNode;)1===_.nodeType&&x.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<x.length;v++)(_=x[v]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Qe=!!ji,Vi=ji=null,t.current=n,Ya=i;do{try{for(v=t;null!==Ya;){var k=Ya.flags;if(36&k&&pa(v,Ya.alternate,Ya),128&k){x=void 0;var A=Ya.ref;if(null!==A){var C=Ya.stateNode;Ya.tag,x=C,"function"==typeof A?A(x):A.current=x}}Ya=Ya.nextEffect}}catch(t){if(null===Ya)throw Error(s(330));Nl(Ya,t),Ya=Ya.nextEffect}}while(null!==Ya);Ya=null,Nr(),Pa=r}else t.current=n;if(Ka)Ka=!1,Za=t,Ga=e;else for(Ya=i;null!==Ya;)e=Ya.nextEffect,Ya.nextEffect=null,8&Ya.flags&&((k=Ya).sibling=null,k.stateNode=null),Ya=e;if(0===(i=t.pendingLanes)&&(Xa=null),1===i?t===il?nl++:(nl=0,il=t):nl=0,n=n.stateNode,kr&&"function"==typeof kr.onCommitFiberRoot)try{kr.onCommitFiberRoot(wr,n,void 0,64==(64&n.current.flags))}catch(t){}if(fl(t,Wr()),qa)throw qa=!1,t=Qa,Qa=null,t;return 0!=(8&Pa)||qr(),null}function Tl(){for(;null!==Ya;){var t=Ya.alternate;ll||null===al||(0!=(8&Ya.flags)?Jt(Ya,al)&&(ll=!0):13===Ya.tag&&Ca(t,Ya)&&Jt(Ya,al)&&(ll=!0));var e=Ya.flags;0!=(256&e)&&fa(t,Ya),0==(512&e)||Ka||(Ka=!0,Yr(97,(function(){return Dl(),null}))),Ya=Ya.nextEffect}}function Dl(){if(90!==Ga){var t=97<Ga?97:Ga;return Ga=90,$r(t,Il)}return!1}function Ll(t,e){Ja.push(e,t),Ka||(Ka=!0,Yr(97,(function(){return Dl(),null})))}function Rl(t,e){tl.push(e,t),Ka||(Ka=!0,Yr(97,(function(){return Dl(),null})))}function Il(){if(null===Za)return!1;var t=Za;if(Za=null,0!=(48&Pa))throw Error(s(331));var e=Pa;Pa|=32;var n=tl;tl=[];for(var i=0;i<n.length;i+=2){var r=n[i],o=n[i+1],a=r.destroy;if(r.destroy=void 0,"function"==typeof a)try{a()}catch(t){if(null===o)throw Error(s(330));Nl(o,t)}}for(n=Ja,Ja=[],i=0;i<n.length;i+=2){r=n[i],o=n[i+1];try{var l=r.create;r.destroy=l()}catch(t){if(null===o)throw Error(s(330));Nl(o,t)}}for(l=t.current.firstEffect;null!==l;)t=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=t;return Pa=e,qr(),!0}function Bl(t,e,n){uo(t,e=ca(0,e=sa(n,e),1)),e=cl(),null!==(t=dl(t,1))&&(We(t,1,e),fl(t,e))}function Nl(t,e){if(3===t.tag)Bl(t,t,e);else for(var n=t.return;null!==n;){if(3===n.tag){Bl(n,t,e);break}if(1===n.tag){var i=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof i.componentDidCatch&&(null===Xa||!Xa.has(i))){var r=ua(n,t=sa(e,t),1);if(uo(n,r),r=cl(),null!==(n=dl(n,1)))We(n,1,r),fl(n,r);else if("function"==typeof i.componentDidCatch&&(null===Xa||!Xa.has(i)))try{i.componentDidCatch(e,t)}catch(t){}break}}n=n.return}}function zl(t,e,n){var i=t.pingCache;null!==i&&i.delete(e),e=cl(),t.pingedLanes|=t.suspendedLanes&n,Oa===t&&(Da&n)===n&&(4===Ia||3===Ia&&(62914560&Da)===Da&&500>Wr()-Wa?_l(t,0):ja|=n),fl(t,e)}function Fl(t,e){var n=t.stateNode;null!==n&&n.delete(e),0==(e=0)&&(0==(2&(e=t.mode))?e=1:0==(4&e)?e=99===Hr()?1:2:(0===ol&&(ol=Na),0===(e=je(62914560&~ol))&&(e=4194304))),n=cl(),null!==(t=dl(t,e))&&(We(t,e,n),fl(t,n))}function jl(t,e,n,i){this.tag=t,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=e,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=i,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Vl(t,e,n,i){return new jl(t,e,n,i)}function Wl(t){return!(!(t=t.prototype)||!t.isReactComponent)}function Hl(t,e){var n=t.alternate;return null===n?((n=Vl(t.tag,e,t.key,t.mode)).elementType=t.elementType,n.type=t.type,n.stateNode=t.stateNode,n.alternate=t,t.alternate=n):(n.pendingProps=e,n.type=t.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=t.childLanes,n.lanes=t.lanes,n.child=t.child,n.memoizedProps=t.memoizedProps,n.memoizedState=t.memoizedState,n.updateQueue=t.updateQueue,e=t.dependencies,n.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext},n.sibling=t.sibling,n.index=t.index,n.ref=t.ref,n}function Ul(t,e,n,i,r,o){var a=2;if(i=t,"function"==typeof t)Wl(t)&&(a=1);else if("string"==typeof t)a=5;else t:switch(t){case A:return $l(n.children,r,o,e);case B:a=8,r|=16;break;case C:a=8,r|=1;break;case S:return(t=Vl(12,n,e,8|r)).elementType=S,t.type=S,t.lanes=o,t;case O:return(t=Vl(13,n,e,r)).type=O,t.elementType=O,t.lanes=o,t;case T:return(t=Vl(19,n,e,r)).elementType=T,t.lanes=o,t;case N:return Yl(n,r,o,e);case z:return(t=Vl(24,n,e,r)).elementType=z,t.lanes=o,t;default:if("object"==typeof t&&null!==t)switch(t.$$typeof){case E:a=10;break t;case M:a=9;break t;case P:a=11;break t;case D:a=14;break t;case L:a=16,i=null;break t;case R:a=22;break t}throw Error(s(130,null==t?t:typeof t,""))}return(e=Vl(a,n,e,r)).elementType=t,e.type=i,e.lanes=o,e}function $l(t,e,n,i){return(t=Vl(7,t,i,e)).lanes=n,t}function Yl(t,e,n,i){return(t=Vl(23,t,i,e)).elementType=N,t.lanes=n,t}function ql(t,e,n){return(t=Vl(6,t,null,e)).lanes=n,t}function Ql(t,e,n){return(e=Vl(4,null!==t.children?t.children:[],t.key,e)).lanes=n,e.stateNode={containerInfo:t.containerInfo,pendingChildren:null,implementation:t.implementation},e}function Xl(t,e,n){this.tag=e,this.containerInfo=t,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Ve(0),this.expirationTimes=Ve(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Ve(0),this.mutableSourceEagerHydrationData=null}function Kl(t,e,n){var i=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==i?null:""+i,children:t,containerInfo:e,implementation:n}}function Zl(t,e,n,i){var r=e.current,o=cl(),a=ul(r);t:if(n){e:{if(Xt(n=n._reactInternals)!==n||1!==n.tag)throw Error(s(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break e;case 1:if(mr(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break e}}l=l.return}while(null!==l);throw Error(s(171))}if(1===n.tag){var c=n.type;if(mr(c)){n=vr(n,c,l);break t}}n=l}else n=hr;return null===e.context?e.context=n:e.pendingContext=n,(e=co(o,a)).payload={element:t},null!==(i=void 0===i?null:i)&&(e.callback=i),uo(r,e),hl(r,a,o),a}function Gl(t){return(t=t.current).child?(t.child.tag,t.child.stateNode):null}function Jl(t,e){if(null!==(t=t.memoizedState)&&null!==t.dehydrated){var n=t.retryLane;t.retryLane=0!==n&&n<e?n:e}}function tc(t,e){Jl(t,e),(t=t.alternate)&&Jl(t,e)}function ec(t,e,n){var i=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Xl(t,e,null!=n&&!0===n.hydrate),e=Vl(3,null,null,2===e?7:1===e?3:0),n.current=e,e.stateNode=n,ao(e),t[Ji]=n.current,Ti(8===t.nodeType?t.parentNode:t),i)for(t=0;t<i.length;t++){var r=(e=i[t])._getVersion;r=r(e._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[e,r]:n.mutableSourceEagerHydrationData.push(e,r)}this._internalRoot=n}function nc(t){return!(!t||1!==t.nodeType&&9!==t.nodeType&&11!==t.nodeType&&(8!==t.nodeType||" react-mount-point-unstable "!==t.nodeValue))}function ic(t,e,n,i,r){var o=n._reactRootContainer;if(o){var s=o._internalRoot;if("function"==typeof r){var a=r;r=function(){var t=Gl(s);a.call(t)}}Zl(e,s,t,r)}else{if(o=n._reactRootContainer=function(t,e){if(e||(e=!(!(e=t?9===t.nodeType?t.documentElement:t.firstChild:null)||1!==e.nodeType||!e.hasAttribute("data-reactroot"))),!e)for(var n;n=t.lastChild;)t.removeChild(n);return new ec(t,0,e?{hydrate:!0}:void 0)}(n,i),s=o._internalRoot,"function"==typeof r){var l=r;r=function(){var t=Gl(s);l.call(t)}}yl((function(){Zl(e,s,t,r)}))}return Gl(s)}function rc(t,e){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nc(e))throw Error(s(200));return Kl(t,e,null,n)}$a=function(t,e,n){var i=e.lanes;if(null!==t)if(t.memoizedProps!==e.pendingProps||fr.current)Bs=!0;else{if(0==(n&i)){switch(Bs=!1,e.tag){case 3:Ys(e),qo();break;case 5:Io(e);break;case 1:mr(e.type)&&xr(e);break;case 4:Lo(e,e.stateNode.containerInfo);break;case 10:i=e.memoizedProps.value;var r=e.type._context;ur(Zr,r._currentValue),r._currentValue=i;break;case 13:if(null!==e.memoizedState)return 0!=(n&e.child.childLanes)?Zs(t,e,n):(ur(No,1&No.current),null!==(e=na(t,e,n))?e.sibling:null);ur(No,1&No.current);break;case 19:if(i=0!=(n&e.childLanes),0!=(64&t.flags)){if(i)return ea(t,e,n);e.flags|=64}if(null!==(r=e.memoizedState)&&(r.rendering=null,r.tail=null,r.lastEffect=null),ur(No,No.current),i)break;return null;case 23:case 24:return e.lanes=0,Vs(t,e,n)}return na(t,e,n)}Bs=0!=(16384&t.flags)}else Bs=!1;switch(e.lanes=0,e.tag){case 2:if(i=e.type,null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,r=gr(e,dr.current),ro(e,n),r=ss(null,e,i,t,r,n),e.flags|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof){if(e.tag=1,e.memoizedState=null,e.updateQueue=null,mr(i)){var o=!0;xr(e)}else o=!1;e.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,ao(e);var a=i.getDerivedStateFromProps;"function"==typeof a&&mo(e,i,a,t),r.updater=bo,e.stateNode=r,r._reactInternals=e,_o(e,i,t,n),e=$s(null,e,i,!0,o,n)}else e.tag=0,Ns(null,e,r,n),e=e.child;return e;case 16:r=e.elementType;t:{switch(null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),t=e.pendingProps,r=(o=r._init)(r._payload),e.type=r,o=e.tag=function(t){if("function"==typeof t)return Wl(t)?1:0;if(null!=t){if((t=t.$$typeof)===P)return 11;if(t===D)return 14}return 2}(r),t=Kr(r,t),o){case 0:e=Hs(null,e,r,t,n);break t;case 1:e=Us(null,e,r,t,n);break t;case 11:e=zs(null,e,r,t,n);break t;case 14:e=Fs(null,e,r,Kr(r.type,t),i,n);break t}throw Error(s(306,r,""))}return e;case 0:return i=e.type,r=e.pendingProps,Hs(t,e,i,r=e.elementType===i?r:Kr(i,r),n);case 1:return i=e.type,r=e.pendingProps,Us(t,e,i,r=e.elementType===i?r:Kr(i,r),n);case 3:if(Ys(e),i=e.updateQueue,null===t||null===i)throw Error(s(282));if(i=e.pendingProps,r=null!==(r=e.memoizedState)?r.element:null,lo(t,e),fo(e,i,null,n),(i=e.memoizedState.element)===r)qo(),e=na(t,e,n);else{if((o=(r=e.stateNode).hydrate)&&(jo=qi(e.stateNode.containerInfo.firstChild),Fo=e,o=Vo=!0),o){if(null!=(t=r.mutableSourceEagerHydrationData))for(r=0;r<t.length;r+=2)(o=t[r])._workInProgressVersionPrimary=t[r+1],Qo.push(o);for(n=Eo(e,null,i,n),e.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ns(t,e,i,n),qo();e=e.child}return e;case 5:return Io(e),null===t&&Uo(e),i=e.type,r=e.pendingProps,o=null!==t?t.memoizedProps:null,a=r.children,Hi(i,r)?a=null:null!==o&&Hi(i,o)&&(e.flags|=16),Ws(t,e),Ns(t,e,a,n),e.child;case 6:return null===t&&Uo(e),null;case 13:return Zs(t,e,n);case 4:return Lo(e,e.stateNode.containerInfo),i=e.pendingProps,null===t?e.child=So(e,null,i,n):Ns(t,e,i,n),e.child;case 11:return i=e.type,r=e.pendingProps,zs(t,e,i,r=e.elementType===i?r:Kr(i,r),n);case 7:return Ns(t,e,e.pendingProps,n),e.child;case 8:case 12:return Ns(t,e,e.pendingProps.children,n),e.child;case 10:t:{i=e.type._context,r=e.pendingProps,a=e.memoizedProps,o=r.value;var l=e.type._context;if(ur(Zr,l._currentValue),l._currentValue=o,null!==a)if(l=a.value,0==(o=ci(l,o)?0:0|("function"==typeof i._calculateChangedBits?i._calculateChangedBits(l,o):1073741823))){if(a.children===r.children&&!fr.current){e=na(t,e,n);break t}}else for(null!==(l=e.child)&&(l.return=e);null!==l;){var c=l.dependencies;if(null!==c){a=l.child;for(var u=c.firstContext;null!==u;){if(u.context===i&&0!=(u.observedBits&o)){1===l.tag&&((u=co(-1,n&-n)).tag=2,uo(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),io(l.return,n),c.lanes|=n;break}u=u.next}}else a=10===l.tag&&l.type===e.type?null:l.child;if(null!==a)a.return=l;else for(a=l;null!==a;){if(a===e){a=null;break}if(null!==(l=a.sibling)){l.return=a.return,a=l;break}a=a.return}l=a}Ns(t,e,r.children,n),e=e.child}return e;case 9:return r=e.type,i=(o=e.pendingProps).children,ro(e,n),i=i(r=oo(r,o.unstable_observedBits)),e.flags|=1,Ns(t,e,i,n),e.child;case 14:return o=Kr(r=e.type,e.pendingProps),Fs(t,e,r,o=Kr(r.type,o),i,n);case 15:return js(t,e,e.type,e.pendingProps,i,n);case 17:return i=e.type,r=e.pendingProps,r=e.elementType===i?r:Kr(i,r),null!==t&&(t.alternate=null,e.alternate=null,e.flags|=2),e.tag=1,mr(i)?(t=!0,xr(e)):t=!1,ro(e,n),vo(e,i,r),_o(e,i,r,n),$s(null,e,i,!0,t,n);case 19:return ea(t,e,n);case 23:case 24:return Vs(t,e,n)}throw Error(s(156,e.tag))},ec.prototype.render=function(t){Zl(t,this._internalRoot,null,null)},ec.prototype.unmount=function(){var t=this._internalRoot,e=t.containerInfo;Zl(null,t,null,(function(){e[Ji]=null}))},te=function(t){13===t.tag&&(hl(t,4,cl()),tc(t,4))},ee=function(t){13===t.tag&&(hl(t,67108864,cl()),tc(t,67108864))},ne=function(t){if(13===t.tag){var e=cl(),n=ul(t);hl(t,n,e),tc(t,n)}},ie=function(t,e){return e()},St=function(t,e,n){switch(e){case"input":if(nt(t,n),e=n.name,"radio"===n.type&&null!=e){for(n=t;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+e)+'][type="radio"]'),e=0;e<n.length;e++){var i=n[e];if(i!==t&&i.form===t.form){var r=rr(i);if(!r)throw Error(s(90));Z(i),nt(i,r)}}}break;case"textarea":ct(t,n);break;case"select":null!=(e=n.value)&&st(t,!!n.multiple,e,!1)}},Dt=bl,Lt=function(t,e,n,i,r){var o=Pa;Pa|=4;try{return $r(98,t.bind(null,e,n,i,r))}finally{0===(Pa=o)&&(Ua(),qr())}},Rt=function(){0==(49&Pa)&&(function(){if(null!==el){var t=el;el=null,t.forEach((function(t){t.expiredLanes|=24&t.pendingLanes,fl(t,Wr())}))}qr()}(),Dl())},It=function(t,e){var n=Pa;Pa|=2;try{return t(e)}finally{0===(Pa=n)&&(Ua(),qr())}};var oc={Events:[nr,ir,rr,Ot,Tt,Dl,{current:!1}]},sc={findFiberByHostInstance:er,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ac={bundleType:sc.bundleType,version:sc.version,rendererPackageName:sc.rendererPackageName,rendererConfig:sc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(t){return null===(t=Gt(t))?null:t.stateNode},findFiberByHostInstance:sc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lc.isDisabled&&lc.supportsFiber)try{wr=lc.inject(ac),kr=lc}catch(gt){}}e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=oc,e.createPortal=rc,e.findDOMNode=function(t){if(null==t)return null;if(1===t.nodeType)return t;var e=t._reactInternals;if(void 0===e){if("function"==typeof t.render)throw Error(s(188));throw Error(s(268,Object.keys(t)))}return null===(t=Gt(e))?null:t.stateNode},e.flushSync=function(t,e){var n=Pa;if(0!=(48&n))return t(e);Pa|=1;try{if(t)return $r(99,t.bind(null,e))}finally{Pa=n,qr()}},e.hydrate=function(t,e,n){if(!nc(e))throw Error(s(200));return ic(null,t,e,!0,n)},e.render=function(t,e,n){if(!nc(e))throw Error(s(200));return ic(null,t,e,!1,n)},e.unmountComponentAtNode=function(t){if(!nc(t))throw Error(s(40));return!!t._reactRootContainer&&(yl((function(){ic(null,null,t,!1,(function(){t._reactRootContainer=null,t[Ji]=null}))})),!0)},e.unstable_batchedUpdates=bl,e.unstable_createPortal=function(t,e){return rc(t,e,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},e.unstable_renderSubtreeIntoContainer=function(t,e,n,i){if(!nc(n))throw Error(s(200));if(null==t||void 0===t._reactInternals)throw Error(s(38));return ic(t,e,n,!1,i)},e.version="17.0.2"},935:function(t,e,n){"use strict";!function t(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(t)}catch(t){console.error(t)}}(),t.exports=n(448)},251:function(t,e,n){"use strict";n(418);var i=n(294),r=60103;if("function"==typeof Symbol&&Symbol.for){var o=Symbol.for;r=o("react.element"),o("react.fragment")}var s=i.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,a=Object.prototype.hasOwnProperty,l={key:!0,ref:!0,__self:!0,__source:!0};function c(t,e,n){var i,o={},c=null,u=null;for(i in void 0!==n&&(c=""+n),void 0!==e.key&&(c=""+e.key),void 0!==e.ref&&(u=e.ref),e)a.call(e,i)&&!l.hasOwnProperty(i)&&(o[i]=e[i]);if(t&&t.defaultProps)for(i in e=t.defaultProps)void 0===o[i]&&(o[i]=e[i]);return{$$typeof:r,type:t,key:c,ref:u,props:o,_owner:s.current}}e.jsx=c,e.jsxs=c},408:function(t,e,n){"use strict";var i=n(418),r=60103,o=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var s=60109,a=60110,l=60112;e.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var h=Symbol.for;r=h("react.element"),o=h("react.portal"),e.Fragment=h("react.fragment"),e.StrictMode=h("react.strict_mode"),e.Profiler=h("react.profiler"),s=h("react.provider"),a=h("react.context"),l=h("react.forward_ref"),e.Suspense=h("react.suspense"),c=h("react.memo"),u=h("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function f(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,n=1;n<arguments.length;n++)e+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}function b(){}function y(t,e,n){this.props=t,this.context=e,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(f(85));this.updater.enqueueSetState(this,t,e,"setState")},m.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},b.prototype=m.prototype;var v=y.prototype=new b;v.constructor=y,i(v,m.prototype),v.isPureReactComponent=!0;var x={current:null},_=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(t,e,n){var i,o={},s=null,a=null;if(null!=e)for(i in void 0!==e.ref&&(a=e.ref),void 0!==e.key&&(s=""+e.key),e)_.call(e,i)&&!w.hasOwnProperty(i)&&(o[i]=e[i]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(t&&t.defaultProps)for(i in l=t.defaultProps)void 0===o[i]&&(o[i]=l[i]);return{$$typeof:r,type:t,key:s,ref:a,props:o,_owner:x.current}}function A(t){return"object"==typeof t&&null!==t&&t.$$typeof===r}var C=/\/+/g;function S(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function E(t,e,n,i,s){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var l=!1;if(null===t)l=!0;else switch(a){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case r:case o:l=!0}}if(l)return s=s(l=t),t=""===i?"."+S(l,0):i,Array.isArray(s)?(n="",null!=t&&(n=t.replace(C,"$&/")+"/"),E(s,e,n,"",(function(t){return t}))):null!=s&&(A(s)&&(s=function(t,e){return{$$typeof:r,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(s,n+(!s.key||l&&l.key===s.key?"":(""+s.key).replace(C,"$&/")+"/")+t)),e.push(s)),1;if(l=0,i=""===i?".":i+":",Array.isArray(t))for(var c=0;c<t.length;c++){var u=i+S(a=t[c],c);l+=E(a,e,n,u,s)}else if(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=d&&t[d]||t["@@iterator"])?t:null}(t),"function"==typeof u)for(t=u.call(t),c=0;!(a=t.next()).done;)l+=E(a=a.value,e,n,u=i+S(a,c++),s);else if("object"===a)throw e=""+t,Error(f(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return l}function M(t,e,n){if(null==t)return t;var i=[],r=0;return E(t,i,"","",(function(t){return e.call(n,t,r++)})),i}function P(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var O={current:null};function T(){var t=O.current;if(null===t)throw Error(f(321));return t}var D={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:i};e.Children={map:M,forEach:function(t,e,n){M(t,(function(){e.apply(this,arguments)}),n)},count:function(t){var e=0;return M(t,(function(){e++})),e},toArray:function(t){return M(t,(function(t){return t}))||[]},only:function(t){if(!A(t))throw Error(f(143));return t}},e.Component=m,e.PureComponent=y,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,e.cloneElement=function(t,e,n){if(null==t)throw Error(f(267,t));var o=i({},t.props),s=t.key,a=t.ref,l=t._owner;if(null!=e){if(void 0!==e.ref&&(a=e.ref,l=x.current),void 0!==e.key&&(s=""+e.key),t.type&&t.type.defaultProps)var c=t.type.defaultProps;for(u in e)_.call(e,u)&&!w.hasOwnProperty(u)&&(o[u]=void 0===e[u]&&void 0!==c?c[u]:e[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){c=Array(u);for(var h=0;h<u;h++)c[h]=arguments[h+2];o.children=c}return{$$typeof:r,type:t.type,key:s,ref:a,props:o,_owner:l}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:a,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:t},t.Consumer=t},e.createElement=k,e.createFactory=function(t){var e=k.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:l,render:t}},e.isValidElement=A,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:P}},e.memo=function(t,e){return{$$typeof:c,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return T().useCallback(t,e)},e.useContext=function(t,e){return T().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return T().useEffect(t,e)},e.useImperativeHandle=function(t,e,n){return T().useImperativeHandle(t,e,n)},e.useLayoutEffect=function(t,e){return T().useLayoutEffect(t,e)},e.useMemo=function(t,e){return T().useMemo(t,e)},e.useReducer=function(t,e,n){return T().useReducer(t,e,n)},e.useRef=function(t){return T().useRef(t)},e.useState=function(t){return T().useState(t)},e.version="17.0.2"},294:function(t,e,n){"use strict";t.exports=n(408)},893:function(t,e,n){"use strict";t.exports=n(251)},53:function(t,e){"use strict";var n,i,r,o;if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;e.unstable_now=function(){return s.now()}}else{var a=Date,l=a.now();e.unstable_now=function(){return a.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,h=function(){if(null!==c)try{var t=e.unstable_now();c(!0,t),c=null}catch(t){throw setTimeout(h,0),t}};n=function(t){null!==c?setTimeout(n,0,t):(c=t,setTimeout(h,0))},i=function(t,e){u=setTimeout(t,e)},r=function(){clearTimeout(u)},e.unstable_shouldYield=function(){return!1},o=e.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,f=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,b=-1,y=5,v=0;e.unstable_shouldYield=function(){return e.unstable_now()>=v},o=function(){},e.unstable_forceFrameRate=function(t){0>t||125<t?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<t?Math.floor(1e3/t):5};var x=new MessageChannel,_=x.port2;x.port1.onmessage=function(){if(null!==m){var t=e.unstable_now();v=t+y;try{m(!0,t)?_.postMessage(null):(g=!1,m=null)}catch(t){throw _.postMessage(null),t}}else g=!1},n=function(t){m=t,g||(g=!0,_.postMessage(null))},i=function(t,n){b=d((function(){t(e.unstable_now())}),n)},r=function(){f(b),b=-1}}function w(t,e){var n=t.length;t.push(e);t:for(;;){var i=n-1>>>1,r=t[i];if(!(void 0!==r&&0<C(r,e)))break t;t[i]=e,t[n]=r,n=i}}function k(t){return void 0===(t=t[0])?null:t}function A(t){var e=t[0];if(void 0!==e){var n=t.pop();if(n!==e){t[0]=n;t:for(var i=0,r=t.length;i<r;){var o=2*(i+1)-1,s=t[o],a=o+1,l=t[a];if(void 0!==s&&0>C(s,n))void 0!==l&&0>C(l,s)?(t[i]=l,t[a]=n,i=a):(t[i]=s,t[o]=n,i=o);else{if(!(void 0!==l&&0>C(l,n)))break t;t[i]=l,t[a]=n,i=a}}}return e}return null}function C(t,e){var n=t.sortIndex-e.sortIndex;return 0!==n?n:t.id-e.id}var S=[],E=[],M=1,P=null,O=3,T=!1,D=!1,L=!1;function R(t){for(var e=k(E);null!==e;){if(null===e.callback)A(E);else{if(!(e.startTime<=t))break;A(E),e.sortIndex=e.expirationTime,w(S,e)}e=k(E)}}function I(t){if(L=!1,R(t),!D)if(null!==k(S))D=!0,n(B);else{var e=k(E);null!==e&&i(I,e.startTime-t)}}function B(t,n){D=!1,L&&(L=!1,r()),T=!0;var o=O;try{for(R(n),P=k(S);null!==P&&(!(P.expirationTime>n)||t&&!e.unstable_shouldYield());){var s=P.callback;if("function"==typeof s){P.callback=null,O=P.priorityLevel;var a=s(P.expirationTime<=n);n=e.unstable_now(),"function"==typeof a?P.callback=a:P===k(S)&&A(S),R(n)}else A(S);P=k(S)}if(null!==P)var l=!0;else{var c=k(E);null!==c&&i(I,c.startTime-n),l=!1}return l}finally{P=null,O=o,T=!1}}var N=o;e.unstable_IdlePriority=5,e.unstable_ImmediatePriority=1,e.unstable_LowPriority=4,e.unstable_NormalPriority=3,e.unstable_Profiling=null,e.unstable_UserBlockingPriority=2,e.unstable_cancelCallback=function(t){t.callback=null},e.unstable_continueExecution=function(){D||T||(D=!0,n(B))},e.unstable_getCurrentPriorityLevel=function(){return O},e.unstable_getFirstCallbackNode=function(){return k(S)},e.unstable_next=function(t){switch(O){case 1:case 2:case 3:var e=3;break;default:e=O}var n=O;O=e;try{return t()}finally{O=n}},e.unstable_pauseExecution=function(){},e.unstable_requestPaint=N,e.unstable_runWithPriority=function(t,e){switch(t){case 1:case 2:case 3:case 4:case 5:break;default:t=3}var n=O;O=t;try{return e()}finally{O=n}},e.unstable_scheduleCallback=function(t,o,s){var a=e.unstable_now();switch(s="object"==typeof s&&null!==s&&"number"==typeof(s=s.delay)&&0<s?a+s:a,t){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return t={id:M++,callback:o,priorityLevel:t,startTime:s,expirationTime:l=s+l,sortIndex:-1},s>a?(t.sortIndex=s,w(E,t),null===k(S)&&t===k(E)&&(L?r():L=!0,i(I,s-a))):(t.sortIndex=l,w(S,t),D||T||(D=!0,n(B))),t},e.unstable_wrapCallback=function(t){var e=O;return function(){var n=O;O=e;try{return t.apply(this,arguments)}finally{O=n}}}},840:function(t,e,n){"use strict";t.exports=n(53)},379:function(t,e,n){"use strict";var i,r=function(){var t={};return function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}t[e]=n}return t[e]}}(),o=[];function s(t){for(var e=-1,n=0;n<o.length;n++)if(o[n].identifier===t){e=n;break}return e}function a(t,e){for(var n={},i=[],r=0;r<t.length;r++){var a=t[r],l=e.base?a[0]+e.base:a[0],c=n[l]||0,u="".concat(l," ").concat(c);n[l]=c+1;var h=s(u),d={css:a[1],media:a[2],sourceMap:a[3]};-1!==h?(o[h].references++,o[h].updater(d)):o.push({identifier:u,updater:g(d,e),references:1}),i.push(u)}return i}function l(t){var e=document.createElement("style"),i=t.attributes||{};if(void 0===i.nonce){var o=n.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(t){e.setAttribute(t,i[t])})),"function"==typeof t.insert)t.insert(e);else{var s=r(t.insert||"head");if(!s)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");s.appendChild(e)}return e}var c,u=(c=[],function(t,e){return c[t]=e,c.filter(Boolean).join("\n")});function h(t,e,n,i){var r=n?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(t.styleSheet)t.styleSheet.cssText=u(e,r);else{var o=document.createTextNode(r),s=t.childNodes;s[e]&&t.removeChild(s[e]),s.length?t.insertBefore(o,s[e]):t.appendChild(o)}}function d(t,e,n){var i=n.css,r=n.media,o=n.sourceMap;if(r?t.setAttribute("media",r):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),t.styleSheet)t.styleSheet.cssText=i;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(i))}}var f=null,p=0;function g(t,e){var n,i,r;if(e.singleton){var o=p++;n=f||(f=l(e)),i=h.bind(null,n,o,!1),r=h.bind(null,n,o,!0)}else n=l(e),i=d.bind(null,n,e),r=function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(n)};return i(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;i(t=e)}else r()}}t.exports=function(t,e){(e=e||{}).singleton||"boolean"==typeof e.singleton||(e.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var n=a(t=t||[],e);return function(t){if(t=t||[],"[object Array]"===Object.prototype.toString.call(t)){for(var i=0;i<n.length;i++){var r=s(n[i]);o[r].references--}for(var l=a(t,e),c=0;c<n.length;c++){var u=s(n[c]);0===o[u].references&&(o[u].updater(),o.splice(u,1))}n=l}}}},281:function(t){"use strict";var e,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i={},r=0,o=0;function s(t){var e="";do{e=n[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function a(){var t=s(+new Date);return t!==e?(r=0,e=t):t+"."+s(r++)}for(;o<64;o++)i[n[o]]=o;a.encode=s,a.decode=function(t){var e=0;for(o=0;o<t.length;o++)e=64*e+i[t.charAt(o)];return e},t.exports=a}},i={};function r(t){var e=i[t];if(void 0!==e)return e.exports;var o=i[t]={id:t,exports:{}};return n[t](o,o.exports,r),o.exports}r.m=n,r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,{a:e}),e},r.d=function(t,e){for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.f={},r.e=function(t){return Promise.all(Object.keys(r.f).reduce((function(e,n){return r.f[n](t,e),e}),[]))},r.u=function(t){return t+".js"},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},t={},e="realtime_dashboard:",r.l=function(n,i,o,s){if(t[n])t[n].push(i);else{var a,l;if(void 0!==o)for(var c=document.getElementsByTagName("script"),u=0;u<c.length;u++){var h=c[u];if(h.getAttribute("src")==n||h.getAttribute("data-webpack")==e+o){a=h;break}}a||(l=!0,(a=document.createElement("script")).charset="utf-8",a.timeout=120,r.nc&&a.setAttribute("nonce",r.nc),a.setAttribute("data-webpack",e+o),a.src=n),t[n]=[i];var d=function(e,i){a.onerror=a.onload=null,clearTimeout(f);var r=t[n];if(delete t[n],a.parentNode&&a.parentNode.removeChild(a),r&&r.forEach((function(t){return t(i)})),e)return e(i)},f=setTimeout(d.bind(null,void 0,{type:"timeout",target:a}),12e4);a.onerror=d.bind(null,a.onerror),a.onload=d.bind(null,a.onload),l&&document.head.appendChild(a)}},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},function(){var t;r.g.importScripts&&(t=r.g.location+"");var e=r.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var n=e.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=t}(),function(){var t={179:0};r.f.j=function(e,n){var i=r.o(t,e)?t[e]:void 0;if(0!==i)if(i)n.push(i[2]);else{var o=new Promise((function(n,r){i=t[e]=[n,r]}));n.push(i[2]=o);var s=r.p+r.u(e),a=new Error;r.l(s,(function(n){if(r.o(t,e)&&(0!==(i=t[e])&&(t[e]=void 0),i)){var o=n&&("load"===n.type?"missing":n.type),s=n&&n.target&&n.target.src;a.message="Loading chunk "+e+" failed.\n("+o+": "+s+")",a.name="ChunkLoadError",a.type=o,a.request=s,i[1](a)}}),"chunk-"+e,e)}};var e=function(e,n){var i,o,s=n[0],a=n[1],l=n[2],c=0;if(s.some((function(e){return 0!==t[e]}))){for(i in a)r.o(a,i)&&(r.m[i]=a[i]);l&&l(r)}for(e&&e(n);c<s.length;c++)o=s[c],r.o(t,o)&&t[o]&&t[o][0](),t[o]=0},n=self.webpackChunkrealtime_dashboard=self.webpackChunkrealtime_dashboard||[];n.forEach(e.bind(null,0)),n.push=e.bind(null,n.push.bind(n))}(),function(){"use strict";var t={};r.r(t),r.d(t,{Decoder:function(){return xa},Encoder:function(){return va},PacketType:function(){return ya},protocol:function(){return ba}});var e=r(294),n=r(935),i=r(379),o=r.n(i),s=r(424),a=(o()(s.Z,{insert:"head",singleton:!1}),s.Z.locals,r(87)),l=(o()(a.Z,{insert:"head",singleton:!1}),a.Z.locals,r(669)),c=(o()(l.Z,{insert:"head",singleton:!1}),l.Z.locals,r.p+"c188b2823ccf83f6df7658a191770d37.png"),u=r.p+"e961c87e76ca950ae75cc7ba1a56b13d.png",h=r.p+"9395736301b0a437011f9ec03871496c.jpg",d=r.p+"9482fee6bbdec0d080dabe7a87e00cbe.png",f=r.p+"faf1e1bf572091184c1d5bd27a5eb0ba.jpg",p=r.p+"f0b7efef28143d160db366cfdef53690.jpg",g=function(t,e){return g=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},g(t,e)};function m(t){var n=t.className,i=t.counterClockwise,r=t.dashRatio,o=t.pathRadius,s=t.strokeWidth,a=t.style;return(0,e.createElement)("path",{className:n,style:Object.assign({},a,y({pathRadius:o,dashRatio:r,counterClockwise:i})),d:b({pathRadius:o,counterClockwise:i}),strokeWidth:s,fillOpacity:0})}function b(t){var e=t.pathRadius,n=t.counterClockwise?1:0;return"\n      M 50,50\n      m 0,-"+e+"\n      a "+e+","+e+" "+n+" 1 1 0,"+2*e+"\n      a "+e+","+e+" "+n+" 1 1 0,-"+2*e+"\n    "}function y(t){var e=t.counterClockwise,n=t.dashRatio,i=t.pathRadius,r=2*Math.PI*i,o=(1-n)*r;return{strokeDasharray:r+"px "+r+"px",strokeDashoffset:(e?-o:o)+"px"}}var v=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return function(t,e){function n(){this.constructor=t}g(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(n,t),n.prototype.getBackgroundPadding=function(){return this.props.background?this.props.backgroundPadding:0},n.prototype.getPathRadius=function(){return 50-this.props.strokeWidth/2-this.getBackgroundPadding()},n.prototype.getPathRatio=function(){var t=this.props,e=t.value,n=t.minValue,i=t.maxValue;return(Math.min(Math.max(e,n),i)-n)/(i-n)},n.prototype.render=function(){var t=this.props,n=t.circleRatio,i=t.className,r=t.classes,o=t.counterClockwise,s=t.styles,a=t.strokeWidth,l=t.text,c=this.getPathRadius(),u=this.getPathRatio();return(0,e.createElement)("svg",{className:r.root+" "+i,style:s.root,viewBox:"0 0 100 100","data-test-id":"CircularProgressbar"},this.props.background?(0,e.createElement)("circle",{className:r.background,style:s.background,cx:50,cy:50,r:50}):null,(0,e.createElement)(m,{className:r.trail,counterClockwise:o,dashRatio:n,pathRadius:c,strokeWidth:a,style:s.trail}),(0,e.createElement)(m,{className:r.path,counterClockwise:o,dashRatio:u*n,pathRadius:c,strokeWidth:a,style:s.path}),l?(0,e.createElement)("text",{className:r.text,style:s.text,x:50,y:50},l):null)},n.defaultProps={background:!1,backgroundPadding:0,circleRatio:1,classes:{root:"CircularProgressbar",trail:"CircularProgressbar-trail",path:"CircularProgressbar-path",text:"CircularProgressbar-text",background:"CircularProgressbar-background"},counterClockwise:!1,className:"",maxValue:100,minValue:0,strokeWidth:8,styles:{root:{},trail:{},path:{},text:{},background:{}},text:""},n}(e.Component);function x(t){var e=t.rotation,n=t.strokeLinecap,i=t.textColor,r=t.textSize,o=t.pathColor,s=t.pathTransition,a=t.pathTransitionDuration,l=t.trailColor,c=t.backgroundColor,u=null==e?void 0:"rotate("+e+"turn)",h=null==e?void 0:"center center";return{root:{},path:_({stroke:o,strokeLinecap:n,transform:u,transformOrigin:h,transition:s,transitionDuration:null==a?void 0:a+"s"}),trail:_({stroke:l,strokeLinecap:n,transform:u,transformOrigin:h}),text:_({fill:i,fontSize:r}),background:_({fill:c})}}function _(t){return Object.keys(t).forEach((function(e){null==t[e]&&delete t[e]})),t}var w=r(124),k=(o()(w.Z,{insert:"head",singleton:!1}),w.Z.locals,r(525)),A=(o()(k.Z,{insert:"head",singleton:!1}),k.Z.locals,r(893));function C(t){return(0,A.jsxs)("tr",{className:"tr",children:[(0,A.jsx)("td",{className:"td",children:t.depart}),(0,A.jsx)("td",{className:"td",children:t.arrivee}),(0,A.jsx)("td",{className:"td",children:t.date}),(0,A.jsx)("td",{className:"td",children:t.statut}),(0,A.jsx)("td",{className:"td",children:t.retard})]})}const S="undefined"==typeof window?function(t){return t()}:window.requestAnimationFrame;function E(t,e,n){const i=n||(t=>Array.prototype.slice.call(t));let r=!1,o=[];return function(...n){o=i(n),r||(r=!0,S.call(window,(()=>{r=!1,t.apply(e,o)})))}}const M=t=>"start"===t?"left":"end"===t?"right":"center",P=(t,e,n)=>"start"===t?e:"end"===t?n:(e+n)/2;function O(){}const T=function(){let t=0;return function(){return t++}}();function D(t){return null==t}function L(t){if(Array.isArray&&Array.isArray(t))return!0;const e=Object.prototype.toString.call(t);return"[object"===e.substr(0,7)&&"Array]"===e.substr(-6)}function R(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)}const I=t=>("number"==typeof t||t instanceof Number)&&isFinite(+t);function B(t,e){return I(t)?t:e}function N(t,e){return void 0===t?e:t}const z=(t,e)=>"string"==typeof t&&t.endsWith("%")?parseFloat(t)/100*e:+t;function F(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)}function j(t,e,n,i){let r,o,s;if(L(t))if(o=t.length,i)for(r=o-1;r>=0;r--)e.call(n,t[r],r);else for(r=0;r<o;r++)e.call(n,t[r],r);else if(R(t))for(s=Object.keys(t),o=s.length,r=0;r<o;r++)e.call(n,t[s[r]],s[r])}function V(t,e){let n,i,r,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,i=t.length;n<i;++n)if(r=t[n],o=e[n],r.datasetIndex!==o.datasetIndex||r.index!==o.index)return!1;return!0}function W(t){if(L(t))return t.map(W);if(R(t)){const e=Object.create(null),n=Object.keys(t),i=n.length;let r=0;for(;r<i;++r)e[n[r]]=W(t[n[r]]);return e}return t}function H(t){return-1===["__proto__","prototype","constructor"].indexOf(t)}function U(t,e,n,i){if(!H(t))return;const r=e[t],o=n[t];R(r)&&R(o)?$(r,o,i):e[t]=W(o)}function $(t,e,n){const i=L(e)?e:[e],r=i.length;if(!R(t))return t;const o=(n=n||{}).merger||U;for(let s=0;s<r;++s){if(e=i[s],!R(e))continue;const r=Object.keys(e);for(let i=0,s=r.length;i<s;++i)o(r[i],t,e,n)}return t}function Y(t,e){return $(t,e,{merger:q})}function q(t,e,n){if(!H(t))return;const i=e[t],r=n[t];R(i)&&R(r)?Y(i,r):Object.prototype.hasOwnProperty.call(e,t)||(e[t]=W(r))}function Q(t,e){const n=t.indexOf(".",e);return-1===n?t.length:n}function X(t,e){if(""===e)return t;let n=0,i=Q(e,n);for(;t&&i>n;)t=t[e.substr(n,i-n)],n=i+1,i=Q(e,n);return t}function K(t){return t.charAt(0).toUpperCase()+t.slice(1)}const Z=t=>void 0!==t,G=t=>"function"==typeof t,J=(t,e)=>{if(t.size!==e.size)return!1;for(const n of t)if(!e.has(n))return!1;return!0},tt=Math.PI,et=2*tt,nt=et+tt,it=Number.POSITIVE_INFINITY,rt=tt/180,ot=tt/2,st=tt/4,at=2*tt/3,lt=Math.log10,ct=Math.sign;function ut(t){const e=Math.round(t);t=dt(t,e,t/1e3)?e:t;const n=Math.pow(10,Math.floor(lt(t))),i=t/n;return(i<=1?1:i<=2?2:i<=5?5:10)*n}function ht(t){return!isNaN(parseFloat(t))&&isFinite(t)}function dt(t,e,n){return Math.abs(t-e)<n}function ft(t,e,n){let i,r,o;for(i=0,r=t.length;i<r;i++)o=t[i][n],isNaN(o)||(e.min=Math.min(e.min,o),e.max=Math.max(e.max,o))}function pt(t){return t*(tt/180)}function gt(t){return t*(180/tt)}function mt(t){if(!I(t))return;let e=1,n=0;for(;Math.round(t*e)/e!==t;)e*=10,n++;return n}function bt(t,e){const n=e.x-t.x,i=e.y-t.y,r=Math.sqrt(n*n+i*i);let o=Math.atan2(i,n);return o<-.5*tt&&(o+=et),{angle:o,distance:r}}function yt(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))}function vt(t,e){return(t-e+nt)%et-tt}function xt(t){return(t%et+et)%et}function _t(t,e,n,i){const r=xt(t),o=xt(e),s=xt(n),a=xt(o-r),l=xt(s-r),c=xt(r-o),u=xt(r-s);return r===o||r===s||i&&o===s||a>l&&c<u}function wt(t,e,n){return Math.max(e,Math.min(n,t))}function kt(t,e,n,i=1e-6){return t>=Math.min(e,n)-i&&t<=Math.max(e,n)+i}const At=t=>0===t||1===t,Ct=(t,e,n)=>-Math.pow(2,10*(t-=1))*Math.sin((t-e)*et/n),St=(t,e,n)=>Math.pow(2,-10*t)*Math.sin((t-e)*et/n)+1,Et={linear:t=>t,easeInQuad:t=>t*t,easeOutQuad:t=>-t*(t-2),easeInOutQuad:t=>(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1),easeInCubic:t=>t*t*t,easeOutCubic:t=>(t-=1)*t*t+1,easeInOutCubic:t=>(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2),easeInQuart:t=>t*t*t*t,easeOutQuart:t=>-((t-=1)*t*t*t-1),easeInOutQuart:t=>(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2),easeInQuint:t=>t*t*t*t*t,easeOutQuint:t=>(t-=1)*t*t*t*t+1,easeInOutQuint:t=>(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2),easeInSine:t=>1-Math.cos(t*ot),easeOutSine:t=>Math.sin(t*ot),easeInOutSine:t=>-.5*(Math.cos(tt*t)-1),easeInExpo:t=>0===t?0:Math.pow(2,10*(t-1)),easeOutExpo:t=>1===t?1:1-Math.pow(2,-10*t),easeInOutExpo:t=>At(t)?t:t<.5?.5*Math.pow(2,10*(2*t-1)):.5*(2-Math.pow(2,-10*(2*t-1))),easeInCirc:t=>t>=1?t:-(Math.sqrt(1-t*t)-1),easeOutCirc:t=>Math.sqrt(1-(t-=1)*t),easeInOutCirc:t=>(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1),easeInElastic:t=>At(t)?t:Ct(t,.075,.3),easeOutElastic:t=>At(t)?t:St(t,.075,.3),easeInOutElastic(t){const e=.1125;return At(t)?t:t<.5?.5*Ct(2*t,e,.45):.5+.5*St(2*t-1,e,.45)},easeInBack(t){const e=1.70158;return t*t*((e+1)*t-e)},easeOutBack(t){const e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack(t){let e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:t=>1-Et.easeOutBounce(1-t),easeOutBounce(t){const e=7.5625,n=2.75;return t<1/n?e*t*t:t<2/n?e*(t-=1.5/n)*t+.75:t<2.5/n?e*(t-=2.25/n)*t+.9375:e*(t-=2.625/n)*t+.984375},easeInOutBounce:t=>t<.5?.5*Et.easeInBounce(2*t):.5*Et.easeOutBounce(2*t-1)+.5},Mt={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},Pt="0123456789ABCDEF",Ot=t=>Pt[15&t],Tt=t=>Pt[(240&t)>>4]+Pt[15&t],Dt=t=>(240&t)>>4==(15&t);function Lt(t){return t+.5|0}const Rt=(t,e,n)=>Math.max(Math.min(t,n),e);function It(t){return Rt(Lt(2.55*t),0,255)}function Bt(t){return Rt(Lt(255*t),0,255)}function Nt(t){return Rt(Lt(t/2.55)/100,0,1)}function zt(t){return Rt(Lt(100*t),0,100)}const Ft=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,jt=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Vt(t,e,n){const i=e*Math.min(n,1-n),r=(e,r=(e+t/30)%12)=>n-i*Math.max(Math.min(r-3,9-r,1),-1);return[r(0),r(8),r(4)]}function Wt(t,e,n){const i=(i,r=(i+t/60)%6)=>n-n*e*Math.max(Math.min(r,4-r,1),0);return[i(5),i(3),i(1)]}function Ht(t,e,n){const i=Vt(t,1,.5);let r;for(e+n>1&&(r=1/(e+n),e*=r,n*=r),r=0;r<3;r++)i[r]*=1-e-n,i[r]+=e;return i}function Ut(t){const e=t.r/255,n=t.g/255,i=t.b/255,r=Math.max(e,n,i),o=Math.min(e,n,i),s=(r+o)/2;let a,l,c;return r!==o&&(c=r-o,l=s>.5?c/(2-r-o):c/(r+o),a=r===e?(n-i)/c+(n<i?6:0):r===n?(i-e)/c+2:(e-n)/c+4,a=60*a+.5),[0|a,l||0,s]}function $t(t,e,n,i){return(Array.isArray(e)?t(e[0],e[1],e[2]):t(e,n,i)).map(Bt)}function Yt(t,e,n){return $t(Vt,t,e,n)}function qt(t){return(t%360+360)%360}const Qt={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},Xt={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let Kt;function Zt(t,e,n){if(t){let i=Ut(t);i[e]=Math.max(0,Math.min(i[e]+i[e]*n,0===e?360:1)),i=Yt(i),t.r=i[0],t.g=i[1],t.b=i[2]}}function Gt(t,e){return t?Object.assign(e||{},t):t}function Jt(t){var e={r:0,g:0,b:0,a:255};return Array.isArray(t)?t.length>=3&&(e={r:t[0],g:t[1],b:t[2],a:255},t.length>3&&(e.a=Bt(t[3]))):(e=Gt(t,{r:0,g:0,b:0,a:1})).a=Bt(e.a),e}function te(t){return"r"===t.charAt(0)?function(t){const e=Ft.exec(t);let n,i,r,o=255;if(e){if(e[7]!==n){const t=+e[7];o=255&(e[8]?It(t):255*t)}return n=+e[1],i=+e[3],r=+e[5],n=255&(e[2]?It(n):n),i=255&(e[4]?It(i):i),r=255&(e[6]?It(r):r),{r:n,g:i,b:r,a:o}}}(t):function(t){const e=jt.exec(t);let n,i=255;if(!e)return;e[5]!==n&&(i=e[6]?It(+e[5]):Bt(+e[5]));const r=qt(+e[2]),o=+e[3]/100,s=+e[4]/100;return n="hwb"===e[1]?function(t,e,n){return $t(Ht,t,e,n)}(r,o,s):"hsv"===e[1]?function(t,e,n){return $t(Wt,t,e,n)}(r,o,s):Yt(r,o,s),{r:n[0],g:n[1],b:n[2],a:i}}(t)}class ee{constructor(t){if(t instanceof ee)return t;const e=typeof t;let n;var i,r,o;"object"===e?n=Jt(t):"string"===e&&(o=(i=t).length,"#"===i[0]&&(4===o||5===o?r={r:255&17*Mt[i[1]],g:255&17*Mt[i[2]],b:255&17*Mt[i[3]],a:5===o?17*Mt[i[4]]:255}:7!==o&&9!==o||(r={r:Mt[i[1]]<<4|Mt[i[2]],g:Mt[i[3]]<<4|Mt[i[4]],b:Mt[i[5]]<<4|Mt[i[6]],a:9===o?Mt[i[7]]<<4|Mt[i[8]]:255})),n=r||function(t){Kt||(Kt=function(){const t={},e=Object.keys(Xt),n=Object.keys(Qt);let i,r,o,s,a;for(i=0;i<e.length;i++){for(s=a=e[i],r=0;r<n.length;r++)o=n[r],a=a.replace(o,Qt[o]);o=parseInt(Xt[s],16),t[a]=[o>>16&255,o>>8&255,255&o]}return t}(),Kt.transparent=[0,0,0,0]);const e=Kt[t.toLowerCase()];return e&&{r:e[0],g:e[1],b:e[2],a:4===e.length?e[3]:255}}(t)||te(t)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var t=Gt(this._rgb);return t&&(t.a=Nt(t.a)),t}set rgb(t){this._rgb=Jt(t)}rgbString(){return this._valid?(t=this._rgb)&&(t.a<255?`rgba(${t.r}, ${t.g}, ${t.b}, ${Nt(t.a)})`:`rgb(${t.r}, ${t.g}, ${t.b})`):this._rgb;var t}hexString(){return this._valid?(t=this._rgb,e=function(t){return Dt(t.r)&&Dt(t.g)&&Dt(t.b)&&Dt(t.a)}(t)?Ot:Tt,t?"#"+e(t.r)+e(t.g)+e(t.b)+(t.a<255?e(t.a):""):t):this._rgb;var t,e}hslString(){return this._valid?function(t){if(!t)return;const e=Ut(t),n=e[0],i=zt(e[1]),r=zt(e[2]);return t.a<255?`hsla(${n}, ${i}%, ${r}%, ${Nt(t.a)})`:`hsl(${n}, ${i}%, ${r}%)`}(this._rgb):this._rgb}mix(t,e){const n=this;if(t){const i=n.rgb,r=t.rgb;let o;const s=e===o?.5:e,a=2*s-1,l=i.a-r.a,c=((a*l==-1?a:(a+l)/(1+a*l))+1)/2;o=1-c,i.r=255&c*i.r+o*r.r+.5,i.g=255&c*i.g+o*r.g+.5,i.b=255&c*i.b+o*r.b+.5,i.a=s*i.a+(1-s)*r.a,n.rgb=i}return n}clone(){return new ee(this.rgb)}alpha(t){return this._rgb.a=Bt(t),this}clearer(t){return this._rgb.a*=1-t,this}greyscale(){const t=this._rgb,e=Lt(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=e,this}opaquer(t){return this._rgb.a*=1+t,this}negate(){const t=this._rgb;return t.r=255-t.r,t.g=255-t.g,t.b=255-t.b,this}lighten(t){return Zt(this._rgb,2,t),this}darken(t){return Zt(this._rgb,2,-t),this}saturate(t){return Zt(this._rgb,1,t),this}desaturate(t){return Zt(this._rgb,1,-t),this}rotate(t){return function(t,e){var n=Ut(t);n[0]=qt(n[0]+e),n=Yt(n),t.r=n[0],t.g=n[1],t.b=n[2]}(this._rgb,t),this}}function ne(t){return new ee(t)}const ie=t=>t instanceof CanvasGradient||t instanceof CanvasPattern;function re(t){return ie(t)?t:ne(t)}function oe(t){return ie(t)?t:ne(t).saturate(.5).darken(.1).hexString()}const se=Object.create(null),ae=Object.create(null);function le(t,e){if(!e)return t;const n=e.split(".");for(let e=0,i=n.length;e<i;++e){const i=n[e];t=t[i]||(t[i]=Object.create(null))}return t}function ce(t,e,n){return"string"==typeof e?$(le(t,e),n):$(le(t,""),e)}var ue=new class{constructor(t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=t=>t.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(t,e)=>oe(e.backgroundColor),this.hoverBorderColor=(t,e)=>oe(e.borderColor),this.hoverColor=(t,e)=>oe(e.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(t)}set(t,e){return ce(this,t,e)}get(t){return le(this,t)}describe(t,e){return ce(ae,t,e)}override(t,e){return ce(se,t,e)}route(t,e,n,i){const r=le(this,t),o=le(this,n),s="_"+e;Object.defineProperties(r,{[s]:{value:r[e],writable:!0},[e]:{enumerable:!0,get(){const t=this[s],e=o[i];return R(t)?Object.assign({},e,t):N(t,e)},set(t){this[s]=t}}})}}({_scriptable:t=>!t.startsWith("on"),_indexable:t=>"events"!==t,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function he(t,e,n,i,r){let o=e[r];return o||(o=e[r]=t.measureText(r).width,n.push(r)),o>i&&(i=o),i}function de(t,e,n,i){let r=(i=i||{}).data=i.data||{},o=i.garbageCollect=i.garbageCollect||[];i.font!==e&&(r=i.data={},o=i.garbageCollect=[],i.font=e),t.save(),t.font=e;let s=0;const a=n.length;let l,c,u,h,d;for(l=0;l<a;l++)if(h=n[l],null!=h&&!0!==L(h))s=he(t,r,o,s,h);else if(L(h))for(c=0,u=h.length;c<u;c++)d=h[c],null==d||L(d)||(s=he(t,r,o,s,d));t.restore();const f=o.length/2;if(f>n.length){for(l=0;l<f;l++)delete r[o[l]];o.splice(0,f)}return s}function fe(t,e,n){const i=t.currentDevicePixelRatio,r=0!==n?Math.max(n/2,.5):0;return Math.round((e-r)*i)/i+r}function pe(t,e){(e=e||t.getContext("2d")).save(),e.resetTransform(),e.clearRect(0,0,t.width,t.height),e.restore()}function ge(t,e,n,i){let r,o,s,a,l;const c=e.pointStyle,u=e.rotation,h=e.radius;let d=(u||0)*rt;if(c&&"object"==typeof c&&(r=c.toString(),"[object HTMLImageElement]"===r||"[object HTMLCanvasElement]"===r))return t.save(),t.translate(n,i),t.rotate(d),t.drawImage(c,-c.width/2,-c.height/2,c.width,c.height),void t.restore();if(!(isNaN(h)||h<=0)){switch(t.beginPath(),c){default:t.arc(n,i,h,0,et),t.closePath();break;case"triangle":t.moveTo(n+Math.sin(d)*h,i-Math.cos(d)*h),d+=at,t.lineTo(n+Math.sin(d)*h,i-Math.cos(d)*h),d+=at,t.lineTo(n+Math.sin(d)*h,i-Math.cos(d)*h),t.closePath();break;case"rectRounded":l=.516*h,a=h-l,o=Math.cos(d+st)*a,s=Math.sin(d+st)*a,t.arc(n-o,i-s,l,d-tt,d-ot),t.arc(n+s,i-o,l,d-ot,d),t.arc(n+o,i+s,l,d,d+ot),t.arc(n-s,i+o,l,d+ot,d+tt),t.closePath();break;case"rect":if(!u){a=Math.SQRT1_2*h,t.rect(n-a,i-a,2*a,2*a);break}d+=st;case"rectRot":o=Math.cos(d)*h,s=Math.sin(d)*h,t.moveTo(n-o,i-s),t.lineTo(n+s,i-o),t.lineTo(n+o,i+s),t.lineTo(n-s,i+o),t.closePath();break;case"crossRot":d+=st;case"cross":o=Math.cos(d)*h,s=Math.sin(d)*h,t.moveTo(n-o,i-s),t.lineTo(n+o,i+s),t.moveTo(n+s,i-o),t.lineTo(n-s,i+o);break;case"star":o=Math.cos(d)*h,s=Math.sin(d)*h,t.moveTo(n-o,i-s),t.lineTo(n+o,i+s),t.moveTo(n+s,i-o),t.lineTo(n-s,i+o),d+=st,o=Math.cos(d)*h,s=Math.sin(d)*h,t.moveTo(n-o,i-s),t.lineTo(n+o,i+s),t.moveTo(n+s,i-o),t.lineTo(n-s,i+o);break;case"line":o=Math.cos(d)*h,s=Math.sin(d)*h,t.moveTo(n-o,i-s),t.lineTo(n+o,i+s);break;case"dash":t.moveTo(n,i),t.lineTo(n+Math.cos(d)*h,i+Math.sin(d)*h)}t.fill(),e.borderWidth>0&&t.stroke()}}function me(t,e,n){return n=n||.5,!e||t&&t.x>e.left-n&&t.x<e.right+n&&t.y>e.top-n&&t.y<e.bottom+n}function be(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()}function ye(t){t.restore()}function ve(t,e,n,i,r){if(!e)return t.lineTo(n.x,n.y);if("middle"===r){const i=(e.x+n.x)/2;t.lineTo(i,e.y),t.lineTo(i,n.y)}else"after"===r!=!!i?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y);t.lineTo(n.x,n.y)}function xe(t,e,n,i){if(!e)return t.lineTo(n.x,n.y);t.bezierCurveTo(i?e.cp1x:e.cp2x,i?e.cp1y:e.cp2y,i?n.cp2x:n.cp1x,i?n.cp2y:n.cp1y,n.x,n.y)}function _e(t,e,n,i,r,o={}){const s=L(e)?e:[e],a=o.strokeWidth>0&&""!==o.strokeColor;let l,c;for(t.save(),t.font=r.string,function(t,e){e.translation&&t.translate(e.translation[0],e.translation[1]),D(e.rotation)||t.rotate(e.rotation),e.color&&(t.fillStyle=e.color),e.textAlign&&(t.textAlign=e.textAlign),e.textBaseline&&(t.textBaseline=e.textBaseline)}(t,o),l=0;l<s.length;++l)c=s[l],a&&(o.strokeColor&&(t.strokeStyle=o.strokeColor),D(o.strokeWidth)||(t.lineWidth=o.strokeWidth),t.strokeText(c,n,i,o.maxWidth)),t.fillText(c,n,i,o.maxWidth),we(t,n,i,c,o),i+=r.lineHeight;t.restore()}function we(t,e,n,i,r){if(r.strikethrough||r.underline){const o=t.measureText(i),s=e-o.actualBoundingBoxLeft,a=e+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,c=n+o.actualBoundingBoxDescent,u=r.strikethrough?(l+c)/2:c;t.strokeStyle=t.fillStyle,t.beginPath(),t.lineWidth=r.decorationWidth||2,t.moveTo(s,u),t.lineTo(a,u),t.stroke()}}function ke(t,e){const{x:n,y:i,w:r,h:o,radius:s}=e;t.arc(n+s.topLeft,i+s.topLeft,s.topLeft,-ot,tt,!0),t.lineTo(n,i+o-s.bottomLeft),t.arc(n+s.bottomLeft,i+o-s.bottomLeft,s.bottomLeft,tt,ot,!0),t.lineTo(n+r-s.bottomRight,i+o),t.arc(n+r-s.bottomRight,i+o-s.bottomRight,s.bottomRight,ot,0,!0),t.lineTo(n+r,i+s.topRight),t.arc(n+r-s.topRight,i+s.topRight,s.topRight,0,-ot,!0),t.lineTo(n+s.topLeft,i)}const Ae=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),Ce=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function Se(t,e){const n=(""+t).match(Ae);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t}function Ee(t,e){const n={},i=R(e),r=i?Object.keys(e):e,o=R(t)?i?n=>N(t[n],t[e[n]]):e=>t[e]:()=>t;for(const t of r)n[t]=+o(t)||0;return n}function Me(t){return Ee(t,{top:"y",right:"x",bottom:"y",left:"x"})}function Pe(t){return Ee(t,["topLeft","topRight","bottomLeft","bottomRight"])}function Oe(t){const e=Me(t);return e.width=e.left+e.right,e.height=e.top+e.bottom,e}function Te(t,e){t=t||{},e=e||ue.font;let n=N(t.size,e.size);"string"==typeof n&&(n=parseInt(n,10));let i=N(t.style,e.style);i&&!(""+i).match(Ce)&&(console.warn('Invalid font style specified: "'+i+'"'),i="");const r={family:N(t.family,e.family),lineHeight:Se(N(t.lineHeight,e.lineHeight),n),size:n,style:i,weight:N(t.weight,e.weight),string:""};return r.string=function(t){return!t||D(t.size)||D(t.family)?null:(t.style?t.style+" ":"")+(t.weight?t.weight+" ":"")+t.size+"px "+t.family}(r),r}function De(t,e,n,i){let r,o,s,a=!0;for(r=0,o=t.length;r<o;++r)if(s=t[r],void 0!==s&&(void 0!==e&&"function"==typeof s&&(s=s(e),a=!1),void 0!==n&&L(s)&&(s=s[n%s.length],a=!1),void 0!==s))return i&&!a&&(i.cacheable=!1),s}function Le(t,e){return Object.assign(Object.create(t),e)}function Re(t,e,n){n=n||(n=>t[n]<e);let i,r=t.length-1,o=0;for(;r-o>1;)i=o+r>>1,n(i)?o=i:r=i;return{lo:o,hi:r}}const Ie=(t,e,n)=>Re(t,n,(i=>t[i][e]<n)),Be=(t,e,n)=>Re(t,n,(i=>t[i][e]>=n)),Ne=["push","pop","shift","splice","unshift"];function ze(t,e){const n=t._chartjs;if(!n)return;const i=n.listeners,r=i.indexOf(e);-1!==r&&i.splice(r,1),i.length>0||(Ne.forEach((e=>{delete t[e]})),delete t._chartjs)}function Fe(t){const e=new Set;let n,i;for(n=0,i=t.length;n<i;++n)e.add(t[n]);return e.size===i?t:Array.from(e)}function je(t,e=[""],n=t,i,r=(()=>t[0])){Z(i)||(i=Ze("_fallback",t));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:t,_rootScopes:n,_fallback:i,_getTarget:r,override:r=>je([r,...t],e,n,i)};return new Proxy(o,{deleteProperty:(e,n)=>(delete e[n],delete e._keys,delete t[0][n],!0),get:(n,i)=>$e(n,i,(()=>function(t,e,n,i){let r;for(const o of e)if(r=Ze(He(o,t),n),Z(r))return Ue(t,r)?Xe(n,i,t,r):r}(i,e,t,n))),getOwnPropertyDescriptor:(t,e)=>Reflect.getOwnPropertyDescriptor(t._scopes[0],e),getPrototypeOf:()=>Reflect.getPrototypeOf(t[0]),has:(t,e)=>Ge(t).includes(e),ownKeys:t=>Ge(t),set(t,e,n){const i=t._storage||(t._storage=r());return t[e]=i[e]=n,delete t._keys,!0}})}function Ve(t,e,n,i){const r={_cacheable:!1,_proxy:t,_context:e,_subProxy:n,_stack:new Set,_descriptors:We(t,i),setContext:e=>Ve(t,e,n,i),override:r=>Ve(t.override(r),e,n,i)};return new Proxy(r,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,e,n)=>$e(t,e,(()=>function(t,e,n){const{_proxy:i,_context:r,_subProxy:o,_descriptors:s}=t;let a=i[e];return G(a)&&s.isScriptable(e)&&(a=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:s,_stack:a}=n;if(a.has(t))throw new Error("Recursion detected: "+Array.from(a).join("->")+"->"+t);return a.add(t),e=e(o,s||i),a.delete(t),Ue(t,e)&&(e=Xe(r._scopes,r,t,e)),e}(e,a,t,n)),L(a)&&a.length&&(a=function(t,e,n,i){const{_proxy:r,_context:o,_subProxy:s,_descriptors:a}=n;if(Z(o.index)&&i(t))e=e[o.index%e.length];else if(R(e[0])){const n=e,i=r._scopes.filter((t=>t!==n));e=[];for(const l of n){const n=Xe(i,r,t,l);e.push(Ve(n,o,s&&s[t],a))}}return e}(e,a,t,s.isIndexable)),Ue(e,a)&&(a=Ve(a,r,o&&o[e],s)),a}(t,e,n))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,i)=>(t[n]=i,delete e[n],!0)})}function We(t,e={scriptable:!0,indexable:!0}){const{_scriptable:n=e.scriptable,_indexable:i=e.indexable,_allKeys:r=e.allKeys}=t;return{allKeys:r,scriptable:n,indexable:i,isScriptable:G(n)?n:()=>n,isIndexable:G(i)?i:()=>i}}const He=(t,e)=>t?t+K(e):e,Ue=(t,e)=>R(e)&&"adapters"!==t&&(null===Object.getPrototypeOf(e)||e.constructor===Object);function $e(t,e,n){if(Object.prototype.hasOwnProperty.call(t,e))return t[e];const i=n();return t[e]=i,i}function Ye(t,e,n){return G(t)?t(e,n):t}const qe=(t,e)=>!0===t?e:"string"==typeof t?X(e,t):void 0;function Qe(t,e,n,i,r){for(const o of e){const e=qe(n,o);if(e){t.add(e);const o=Ye(e._fallback,n,r);if(Z(o)&&o!==n&&o!==i)return o}else if(!1===e&&Z(i)&&n!==i)return null}return!1}function Xe(t,e,n,i){const r=e._rootScopes,o=Ye(e._fallback,n,i),s=[...t,...r],a=new Set;a.add(i);let l=Ke(a,s,n,o||n,i);return null!==l&&(!Z(o)||o===n||(l=Ke(a,s,o,l,i),null!==l))&&je(Array.from(a),[""],r,o,(()=>function(t,e,n){const i=t._getTarget();e in i||(i[e]={});const r=i[e];return L(r)&&R(n)?n:r}(e,n,i)))}function Ke(t,e,n,i,r){for(;n;)n=Qe(t,e,n,i,r);return n}function Ze(t,e){for(const n of e){if(!n)continue;const e=n[t];if(Z(e))return e}}function Ge(t){let e=t._keys;return e||(e=t._keys=function(t){const e=new Set;for(const n of t)for(const t of Object.keys(n).filter((t=>!t.startsWith("_"))))e.add(t);return Array.from(e)}(t._scopes)),e}const Je=Number.EPSILON||1e-14,tn=(t,e)=>e<t.length&&!t[e].skip&&t[e],en=t=>"x"===t?"y":"x";function nn(t,e,n,i){const r=t.skip?e:t,o=e,s=n.skip?e:n,a=yt(o,r),l=yt(s,o);let c=a/(a+l),u=l/(a+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const h=i*c,d=i*u;return{previous:{x:o.x-h*(s.x-r.x),y:o.y-h*(s.y-r.y)},next:{x:o.x+d*(s.x-r.x),y:o.y+d*(s.y-r.y)}}}function rn(t,e,n){return Math.max(Math.min(t,n),e)}function on(t,e,n,i,r){let o,s,a,l;if(e.spanGaps&&(t=t.filter((t=>!t.skip))),"monotone"===e.cubicInterpolationMode)!function(t,e="x"){const n=en(e),i=t.length,r=Array(i).fill(0),o=Array(i);let s,a,l,c=tn(t,0);for(s=0;s<i;++s)if(a=l,l=c,c=tn(t,s+1),l){if(c){const t=c[e]-l[e];r[s]=0!==t?(c[n]-l[n])/t:0}o[s]=a?c?ct(r[s-1])!==ct(r[s])?0:(r[s-1]+r[s])/2:r[s-1]:r[s]}!function(t,e,n){const i=t.length;let r,o,s,a,l,c=tn(t,0);for(let u=0;u<i-1;++u)l=c,c=tn(t,u+1),l&&c&&(dt(e[u],0,Je)?n[u]=n[u+1]=0:(r=n[u]/e[u],o=n[u+1]/e[u],a=Math.pow(r,2)+Math.pow(o,2),a<=9||(s=3/Math.sqrt(a),n[u]=r*s*e[u],n[u+1]=o*s*e[u])))}(t,r,o),function(t,e,n="x"){const i=en(n),r=t.length;let o,s,a,l=tn(t,0);for(let c=0;c<r;++c){if(s=a,a=l,l=tn(t,c+1),!a)continue;const r=a[n],u=a[i];s&&(o=(r-s[n])/3,a[`cp1${n}`]=r-o,a[`cp1${i}`]=u-o*e[c]),l&&(o=(l[n]-r)/3,a[`cp2${n}`]=r+o,a[`cp2${i}`]=u+o*e[c])}}(t,o,e)}(t,r);else{let n=i?t[t.length-1]:t[0];for(o=0,s=t.length;o<s;++o)a=t[o],l=nn(n,a,t[Math.min(o+1,s-(i?0:1))%s],e.tension),a.cp1x=l.previous.x,a.cp1y=l.previous.y,a.cp2x=l.next.x,a.cp2y=l.next.y,n=a}e.capBezierPoints&&function(t,e){let n,i,r,o,s,a=me(t[0],e);for(n=0,i=t.length;n<i;++n)s=o,o=a,a=n<i-1&&me(t[n+1],e),o&&(r=t[n],s&&(r.cp1x=rn(r.cp1x,e.left,e.right),r.cp1y=rn(r.cp1y,e.top,e.bottom)),a&&(r.cp2x=rn(r.cp2x,e.left,e.right),r.cp2y=rn(r.cp2y,e.top,e.bottom)))}(t,n)}function sn(){return"undefined"!=typeof window&&"undefined"!=typeof document}function an(t){let e=t.parentNode;return e&&"[object ShadowRoot]"===e.toString()&&(e=e.host),e}function ln(t,e,n){let i;return"string"==typeof t?(i=parseInt(t,10),-1!==t.indexOf("%")&&(i=i/100*e.parentNode[n])):i=t,i}const cn=t=>window.getComputedStyle(t,null),un=["top","right","bottom","left"];function hn(t,e,n){const i={};n=n?"-"+n:"";for(let r=0;r<4;r++){const o=un[r];i[o]=parseFloat(t[e+"-"+o+n])||0}return i.width=i.left+i.right,i.height=i.top+i.bottom,i}function dn(t,e){const{canvas:n,currentDevicePixelRatio:i}=e,r=cn(n),o="border-box"===r.boxSizing,s=hn(r,"padding"),a=hn(r,"border","width"),{x:l,y:c,box:u}=function(t,e){const n=t.native||t,i=n.touches,r=i&&i.length?i[0]:n,{offsetX:o,offsetY:s}=r;let a,l,c=!1;if(((t,e,n)=>(t>0||e>0)&&(!n||!n.shadowRoot))(o,s,n.target))a=o,l=s;else{const t=e.getBoundingClientRect();a=r.clientX-t.left,l=r.clientY-t.top,c=!0}return{x:a,y:l,box:c}}(t,n),h=s.left+(u&&a.left),d=s.top+(u&&a.top);let{width:f,height:p}=e;return o&&(f-=s.width+a.width,p-=s.height+a.height),{x:Math.round((l-h)/f*n.width/i),y:Math.round((c-d)/p*n.height/i)}}const fn=t=>Math.round(10*t)/10;function pn(t,e,n){const i=e||1,r=Math.floor(t.height*i),o=Math.floor(t.width*i);t.height=r/i,t.width=o/i;const s=t.canvas;return s.style&&(n||!s.style.height&&!s.style.width)&&(s.style.height=`${t.height}px`,s.style.width=`${t.width}px`),(t.currentDevicePixelRatio!==i||s.height!==r||s.width!==o)&&(t.currentDevicePixelRatio=i,s.height=r,s.width=o,t.ctx.setTransform(i,0,0,i,0,0),!0)}const gn=function(){let t=!1;try{const e={get passive(){return t=!0,!1}};window.addEventListener("test",null,e),window.removeEventListener("test",null,e)}catch(t){}return t}();function mn(t,e){const n=function(t,e){return cn(t).getPropertyValue(e)}(t,e),i=n&&n.match(/^(\d+)(\.\d+)?px$/);return i?+i[1]:void 0}function bn(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:t.y+n*(e.y-t.y)}}function yn(t,e,n,i){return{x:t.x+n*(e.x-t.x),y:"middle"===i?n<.5?t.y:e.y:"after"===i?n<1?t.y:e.y:n>0?e.y:t.y}}function vn(t,e,n,i){const r={x:t.cp2x,y:t.cp2y},o={x:e.cp1x,y:e.cp1y},s=bn(t,r,n),a=bn(r,o,n),l=bn(o,e,n),c=bn(s,a,n),u=bn(a,l,n);return bn(c,u,n)}const xn=new Map;function _n(t,e,n){return function(t,e){e=e||{};const n=t+JSON.stringify(e);let i=xn.get(n);return i||(i=new Intl.NumberFormat(t,e),xn.set(n,i)),i}(e,n).format(t)}function wn(t,e,n){return t?function(t,e){return{x:n=>t+t+e-n,setWidth(t){e=t},textAlign:t=>"center"===t?t:"right"===t?"left":"right",xPlus:(t,e)=>t-e,leftForLtr:(t,e)=>t-e}}(e,n):{x:t=>t,setWidth(t){},textAlign:t=>t,xPlus:(t,e)=>t+e,leftForLtr:(t,e)=>t}}function kn(t,e){let n,i;"ltr"!==e&&"rtl"!==e||(n=t.canvas.style,i=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",e,"important"),t.prevTextDirection=i)}function An(t,e){void 0!==e&&(delete t.prevTextDirection,t.canvas.style.setProperty("direction",e[0],e[1]))}function Cn(t){return"angle"===t?{between:_t,compare:vt,normalize:xt}:{between:kt,compare:(t,e)=>t-e,normalize:t=>t}}function Sn({start:t,end:e,count:n,loop:i,style:r}){return{start:t%n,end:e%n,loop:i&&(e-t+1)%n==0,style:r}}function En(t,e,n){if(!n)return[t];const{property:i,start:r,end:o}=n,s=e.length,{compare:a,between:l,normalize:c}=Cn(i),{start:u,end:h,loop:d,style:f}=function(t,e,n){const{property:i,start:r,end:o}=n,{between:s,normalize:a}=Cn(i),l=e.length;let c,u,{start:h,end:d,loop:f}=t;if(f){for(h+=l,d+=l,c=0,u=l;c<u&&s(a(e[h%l][i]),r,o);++c)h--,d--;h%=l,d%=l}return d<h&&(d+=l),{start:h,end:d,loop:f,style:t.style}}(t,e,n),p=[];let g,m,b,y=!1,v=null;for(let t=u,n=u;t<=h;++t)m=e[t%s],m.skip||(g=c(m[i]),g!==b&&(y=l(g,r,o),null===v&&(y||l(r,b,g)&&0!==a(r,b))&&(v=0===a(g,r)?t:n),null!==v&&(!y||0===a(o,g)||l(o,b,g))&&(p.push(Sn({start:v,end:t,loop:d,count:s,style:f})),v=null),n=t,b=g));return null!==v&&p.push(Sn({start:v,end:h,loop:d,count:s,style:f})),p}function Mn(t,e){const n=[],i=t.segments;for(let r=0;r<i.length;r++){const o=En(i[r],t.points,e);o.length&&n.push(...o)}return n}function Pn(t){return{backgroundColor:t.backgroundColor,borderCapStyle:t.borderCapStyle,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderJoinStyle:t.borderJoinStyle,borderWidth:t.borderWidth,borderColor:t.borderColor}}function On(t,e){return e&&JSON.stringify(t)!==JSON.stringify(e)}var Tn=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(t,e,n,i){const r=e.listeners[i],o=e.duration;r.forEach((i=>i({chart:t,initial:e.initial,numSteps:o,currentStep:Math.min(n-e.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=S.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(t=Date.now()){let e=0;this._charts.forEach(((n,i)=>{if(!n.running||!n.items.length)return;const r=n.items;let o,s=r.length-1,a=!1;for(;s>=0;--s)o=r[s],o._active?(o._total>n.duration&&(n.duration=o._total),o.tick(t),a=!0):(r[s]=r[r.length-1],r.pop());a&&(i.draw(),this._notify(i,n,t,"progress")),r.length||(n.running=!1,this._notify(i,n,t,"complete"),n.initial=!1),e+=r.length})),this._lastDate=t,0===e&&(this._running=!1)}_getAnims(t){const e=this._charts;let n=e.get(t);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},e.set(t,n)),n}listen(t,e,n){this._getAnims(t).listeners[e].push(n)}add(t,e){e&&e.length&&this._getAnims(t).items.push(...e)}has(t){return this._getAnims(t).items.length>0}start(t){const e=this._charts.get(t);e&&(e.running=!0,e.start=Date.now(),e.duration=e.items.reduce(((t,e)=>Math.max(t,e._duration)),0),this._refresh())}running(t){if(!this._running)return!1;const e=this._charts.get(t);return!!(e&&e.running&&e.items.length)}stop(t){const e=this._charts.get(t);if(!e||!e.items.length)return;const n=e.items;let i=n.length-1;for(;i>=0;--i)n[i].cancel();e.items=[],this._notify(t,e,Date.now(),"complete")}remove(t){return this._charts.delete(t)}};const Dn="transparent",Ln={boolean:(t,e,n)=>n>.5?e:t,color(t,e,n){const i=re(t||Dn),r=i.valid&&re(e||Dn);return r&&r.valid?r.mix(i,n).hexString():e},number:(t,e,n)=>t+(e-t)*n};class Rn{constructor(t,e,n,i){const r=e[n];i=De([t.to,i,r,t.from]);const o=De([t.from,r,i]);this._active=!0,this._fn=t.fn||Ln[t.type||typeof o],this._easing=Et[t.easing]||Et.linear,this._start=Math.floor(Date.now()+(t.delay||0)),this._duration=this._total=Math.floor(t.duration),this._loop=!!t.loop,this._target=e,this._prop=n,this._from=o,this._to=i,this._promises=void 0}active(){return this._active}update(t,e,n){if(this._active){this._notify(!1);const i=this._target[this._prop],r=n-this._start,o=this._duration-r;this._start=n,this._duration=Math.floor(Math.max(o,t.duration)),this._total+=r,this._loop=!!t.loop,this._to=De([t.to,e,i,t.from]),this._from=De([t.from,i,e])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(t){const e=t-this._start,n=this._duration,i=this._prop,r=this._from,o=this._loop,s=this._to;let a;if(this._active=r!==s&&(o||e<n),!this._active)return this._target[i]=s,void this._notify(!0);e<0?this._target[i]=r:(a=e/n%2,a=o&&a>1?2-a:a,a=this._easing(Math.min(1,Math.max(0,a))),this._target[i]=this._fn(r,s,a))}wait(){const t=this._promises||(this._promises=[]);return new Promise(((e,n)=>{t.push({res:e,rej:n})}))}_notify(t){const e=t?"res":"rej",n=this._promises||[];for(let t=0;t<n.length;t++)n[t][e]()}}ue.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const In=Object.keys(ue.animation);ue.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:t=>"onProgress"!==t&&"onComplete"!==t&&"fn"!==t}),ue.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),ue.describe("animations",{_fallback:"animation"}),ue.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:t=>0|t}}}});class Bn{constructor(t,e){this._chart=t,this._properties=new Map,this.configure(e)}configure(t){if(!R(t))return;const e=this._properties;Object.getOwnPropertyNames(t).forEach((n=>{const i=t[n];if(!R(i))return;const r={};for(const t of In)r[t]=i[t];(L(i.properties)&&i.properties||[n]).forEach((t=>{t!==n&&e.has(t)||e.set(t,r)}))}))}_animateOptions(t,e){const n=e.options,i=function(t,e){if(!e)return;let n=t.options;if(n)return n.$shared&&(t.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;t.options=e}(t,n);if(!i)return[];const r=this._createAnimations(i,n);return n.$shared&&function(t,e){const n=[],i=Object.keys(e);for(let e=0;e<i.length;e++){const r=t[i[e]];r&&r.active()&&n.push(r.wait())}return Promise.all(n)}(t.options.$animations,n).then((()=>{t.options=n}),(()=>{})),r}_createAnimations(t,e){const n=this._properties,i=[],r=t.$animations||(t.$animations={}),o=Object.keys(e),s=Date.now();let a;for(a=o.length-1;a>=0;--a){const l=o[a];if("$"===l.charAt(0))continue;if("options"===l){i.push(...this._animateOptions(t,e));continue}const c=e[l];let u=r[l];const h=n.get(l);if(u){if(h&&u.active()){u.update(h,c,s);continue}u.cancel()}h&&h.duration?(r[l]=u=new Rn(h,t,l,c),i.push(u)):t[l]=c}return i}update(t,e){if(0===this._properties.size)return void Object.assign(t,e);const n=this._createAnimations(t,e);return n.length?(Tn.add(this._chart,n),!0):void 0}}function Nn(t,e){const n=t&&t.options||{},i=n.reverse,r=void 0===n.min?e:0,o=void 0===n.max?e:0;return{start:i?o:r,end:i?r:o}}function zn(t,e){const n=[],i=t._getSortedDatasetMetas(e);let r,o;for(r=0,o=i.length;r<o;++r)n.push(i[r].index);return n}function Fn(t,e,n,i={}){const r=t.keys,o="single"===i.mode;let s,a,l,c;if(null!==e){for(s=0,a=r.length;s<a;++s){if(l=+r[s],l===n){if(i.all)continue;break}c=t.values[l],I(c)&&(o||0===e||ct(e)===ct(c))&&(e+=c)}return e}}function jn(t,e){const n=t&&t.options.stacked;return n||void 0===n&&void 0!==e.stack}function Vn(t,e,n){const i=t[e]||(t[e]={});return i[n]||(i[n]={})}function Wn(t,e,n,i){for(const r of e.getMatchingVisibleMetas(i).reverse()){const e=t[r.index];if(n&&e>0||!n&&e<0)return r.index}return null}function Hn(t,e){const{chart:n,_cachedMeta:i}=t,r=n._stacks||(n._stacks={}),{iScale:o,vScale:s,index:a}=i,l=o.axis,c=s.axis,u=function(t,e,n){return`${t.id}.${e.id}.${n.stack||n.type}`}(o,s,i),h=e.length;let d;for(let t=0;t<h;++t){const n=e[t],{[l]:o,[c]:h}=n;d=(n._stacks||(n._stacks={}))[c]=Vn(r,u,o),d[a]=h,d._top=Wn(d,s,!0,i.type),d._bottom=Wn(d,s,!1,i.type)}}function Un(t,e){const n=t.scales;return Object.keys(n).filter((t=>n[t].axis===e)).shift()}function $n(t,e){const n=t.controller.index,i=t.vScale&&t.vScale.axis;if(i){e=e||t._parsed;for(const t of e){const e=t._stacks;if(!e||void 0===e[i]||void 0===e[i][n])return;delete e[i][n]}}}const Yn=t=>"reset"===t||"none"===t,qn=(t,e)=>e?t:Object.assign({},t);class Qn{constructor(t,e){this.chart=t,this._ctx=t.ctx,this.index=e,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const t=this._cachedMeta;this.configure(),this.linkScales(),t._stacked=jn(t.vScale,t),this.addElements()}updateIndex(t){this.index!==t&&$n(this._cachedMeta),this.index=t}linkScales(){const t=this.chart,e=this._cachedMeta,n=this.getDataset(),i=(t,e,n,i)=>"x"===t?e:"r"===t?i:n,r=e.xAxisID=N(n.xAxisID,Un(t,"x")),o=e.yAxisID=N(n.yAxisID,Un(t,"y")),s=e.rAxisID=N(n.rAxisID,Un(t,"r")),a=e.indexAxis,l=e.iAxisID=i(a,r,o,s),c=e.vAxisID=i(a,o,r,s);e.xScale=this.getScaleForId(r),e.yScale=this.getScaleForId(o),e.rScale=this.getScaleForId(s),e.iScale=this.getScaleForId(l),e.vScale=this.getScaleForId(c)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(t){return this.chart.scales[t]}_getOtherScale(t){const e=this._cachedMeta;return t===e.iScale?e.vScale:e.iScale}reset(){this._update("reset")}_destroy(){const t=this._cachedMeta;this._data&&ze(this._data,this),t._stacked&&$n(t)}_dataCheck(){const t=this.getDataset(),e=t.data||(t.data=[]),n=this._data;if(R(e))this._data=function(t){const e=Object.keys(t),n=new Array(e.length);let i,r,o;for(i=0,r=e.length;i<r;++i)o=e[i],n[i]={x:o,y:t[o]};return n}(e);else if(n!==e){if(n){ze(n,this);const t=this._cachedMeta;$n(t),t._parsed=[]}e&&Object.isExtensible(e)&&(this,(i=e)._chartjs?i._chartjs.listeners.push(this):(Object.defineProperty(i,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[this]}}),Ne.forEach((t=>{const e="_onData"+K(t),n=i[t];Object.defineProperty(i,t,{configurable:!0,enumerable:!1,value(...t){const r=n.apply(this,t);return i._chartjs.listeners.forEach((n=>{"function"==typeof n[e]&&n[e](...t)})),r}})})))),this._syncList=[],this._data=e}var i}addElements(){const t=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(t.dataset=new this.datasetElementType)}buildOrUpdateElements(t){const e=this._cachedMeta,n=this.getDataset();let i=!1;this._dataCheck();const r=e._stacked;e._stacked=jn(e.vScale,e),e.stack!==n.stack&&(i=!0,$n(e),e.stack=n.stack),this._resyncElements(t),(i||r!==e._stacked)&&Hn(this,e._parsed)}configure(){const t=this.chart.config,e=t.datasetScopeKeys(this._type),n=t.getOptionScopes(this.getDataset(),e,!0);this.options=t.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(t,e){const{_cachedMeta:n,_data:i}=this,{iScale:r,_stacked:o}=n,s=r.axis;let a,l,c,u=0===t&&e===i.length||n._sorted,h=t>0&&n._parsed[t-1];if(!1===this._parsing)n._parsed=i,n._sorted=!0,c=i;else{c=L(i[t])?this.parseArrayData(n,i,t,e):R(i[t])?this.parseObjectData(n,i,t,e):this.parsePrimitiveData(n,i,t,e);const r=()=>null===l[s]||h&&l[s]<h[s];for(a=0;a<e;++a)n._parsed[a+t]=l=c[a],u&&(r()&&(u=!1),h=l);n._sorted=u}o&&Hn(this,c)}parsePrimitiveData(t,e,n,i){const{iScale:r,vScale:o}=t,s=r.axis,a=o.axis,l=r.getLabels(),c=r===o,u=new Array(i);let h,d,f;for(h=0,d=i;h<d;++h)f=h+n,u[h]={[s]:c||r.parse(l[f],f),[a]:o.parse(e[f],f)};return u}parseArrayData(t,e,n,i){const{xScale:r,yScale:o}=t,s=new Array(i);let a,l,c,u;for(a=0,l=i;a<l;++a)c=a+n,u=e[c],s[a]={x:r.parse(u[0],c),y:o.parse(u[1],c)};return s}parseObjectData(t,e,n,i){const{xScale:r,yScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l=new Array(i);let c,u,h,d;for(c=0,u=i;c<u;++c)h=c+n,d=e[h],l[c]={x:r.parse(X(d,s),h),y:o.parse(X(d,a),h)};return l}getParsed(t){return this._cachedMeta._parsed[t]}getDataElement(t){return this._cachedMeta.data[t]}applyStack(t,e,n){const i=this.chart,r=this._cachedMeta,o=e[t.axis];return Fn({keys:zn(i,!0),values:e._stacks[t.axis]},o,r.index,{mode:n})}updateRangeFromParsed(t,e,n,i){const r=n[e.axis];let o=null===r?NaN:r;const s=i&&n._stacks[e.axis];i&&s&&(i.values=s,o=Fn(i,r,this._cachedMeta.index)),t.min=Math.min(t.min,o),t.max=Math.max(t.max,o)}getMinMax(t,e){const n=this._cachedMeta,i=n._parsed,r=n._sorted&&t===n.iScale,o=i.length,s=this._getOtherScale(t),a=((t,e,n)=>t&&!e.hidden&&e._stacked&&{keys:zn(n,!0),values:null})(e,n,this.chart),l={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:c,max:u}=function(t){const{min:e,max:n,minDefined:i,maxDefined:r}=t.getUserBounds();return{min:i?e:Number.NEGATIVE_INFINITY,max:r?n:Number.POSITIVE_INFINITY}}(s);let h,d;function f(){d=i[h];const e=d[s.axis];return!I(d[t.axis])||c>e||u<e}for(h=0;h<o&&(f()||(this.updateRangeFromParsed(l,t,d,a),!r));++h);if(r)for(h=o-1;h>=0;--h)if(!f()){this.updateRangeFromParsed(l,t,d,a);break}return l}getAllParsedValues(t){const e=this._cachedMeta._parsed,n=[];let i,r,o;for(i=0,r=e.length;i<r;++i)o=e[i][t.axis],I(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(t){const e=this._cachedMeta,n=e.iScale,i=e.vScale,r=this.getParsed(t);return{label:n?""+n.getLabelForValue(r[n.axis]):"",value:i?""+i.getLabelForValue(r[i.axis]):""}}_update(t){const e=this._cachedMeta;this.update(t||"default"),e._clip=function(t){let e,n,i,r;return R(t)?(e=t.top,n=t.right,i=t.bottom,r=t.left):e=n=i=r=t,{top:e,right:n,bottom:i,left:r,disabled:!1===t}}(N(this.options.clip,function(t,e,n){if(!1===n)return!1;const i=Nn(t,n),r=Nn(e,n);return{top:r.end,right:i.end,bottom:r.start,left:i.start}}(e.xScale,e.yScale,this.getMaxOverflow())))}update(t){}draw(){const t=this._ctx,e=this.chart,n=this._cachedMeta,i=n.data||[],r=e.chartArea,o=[],s=this._drawStart||0,a=this._drawCount||i.length-s,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(t,r,s,a),c=s;c<s+a;++c){const e=i[c];e.hidden||(e.active&&l?o.push(e):e.draw(t,r))}for(c=0;c<o.length;++c)o[c].draw(t,r)}getStyle(t,e){const n=e?"active":"default";return void 0===t&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(t||0,n)}getContext(t,e,n){const i=this.getDataset();let r;if(t>=0&&t<this._cachedMeta.data.length){const e=this._cachedMeta.data[t];r=e.$context||(e.$context=function(t,e,n){return Le(t,{active:!1,dataIndex:e,parsed:void 0,raw:void 0,element:n,index:e,mode:"default",type:"data"})}(this.getContext(),t,e)),r.parsed=this.getParsed(t),r.raw=i.data[t],r.index=r.dataIndex=t}else r=this.$context||(this.$context=function(t,e){return Le(t,{active:!1,dataset:void 0,datasetIndex:e,index:e,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),r.dataset=i,r.index=r.datasetIndex=this.index;return r.active=!!e,r.mode=n,r}resolveDatasetElementOptions(t){return this._resolveElementOptions(this.datasetElementType.id,t)}resolveDataElementOptions(t,e){return this._resolveElementOptions(this.dataElementType.id,e,t)}_resolveElementOptions(t,e="default",n){const i="active"===e,r=this._cachedDataOpts,o=t+"-"+e,s=r[o],a=this.enableOptionSharing&&Z(n);if(s)return qn(s,a);const l=this.chart.config,c=l.datasetElementScopeKeys(this._type,t),u=i?[`${t}Hover`,"hover",t,""]:[t,""],h=l.getOptionScopes(this.getDataset(),c),d=Object.keys(ue.elements[t]),f=l.resolveNamedOptions(h,d,(()=>this.getContext(n,i)),u);return f.$shared&&(f.$shared=a,r[o]=Object.freeze(qn(f,a))),f}_resolveAnimations(t,e,n){const i=this.chart,r=this._cachedDataOpts,o=`animation-${e}`,s=r[o];if(s)return s;let a;if(!1!==i.options.animation){const i=this.chart.config,r=i.datasetAnimationScopeKeys(this._type,e),o=i.getOptionScopes(this.getDataset(),r);a=i.createResolver(o,this.getContext(t,n,e))}const l=new Bn(i,a&&a.animations);return a&&a._cacheable&&(r[o]=Object.freeze(l)),l}getSharedOptions(t){if(t.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},t))}includeOptions(t,e){return!e||Yn(t)||this.chart._animationsDisabled}updateElement(t,e,n,i){Yn(i)?Object.assign(t,n):this._resolveAnimations(e,i).update(t,n)}updateSharedOptions(t,e,n){t&&!Yn(e)&&this._resolveAnimations(void 0,e).update(t,n)}_setStyle(t,e,n,i){t.active=i;const r=this.getStyle(e,i);this._resolveAnimations(e,n,i).update(t,{options:!i&&this.getSharedOptions(r)||r})}removeHoverStyle(t,e,n){this._setStyle(t,n,"active",!1)}setHoverStyle(t,e,n){this._setStyle(t,n,"active",!0)}_removeDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!1)}_setDatasetHoverStyle(){const t=this._cachedMeta.dataset;t&&this._setStyle(t,void 0,"active",!0)}_resyncElements(t){const e=this._data,n=this._cachedMeta.data;for(const[t,e,n]of this._syncList)this[t](e,n);this._syncList=[];const i=n.length,r=e.length,o=Math.min(r,i);o&&this.parse(0,o),r>i?this._insertElements(i,r-i,t):r<i&&this._removeElements(r,i-r)}_insertElements(t,e,n=!0){const i=this._cachedMeta,r=i.data,o=t+e;let s;const a=t=>{for(t.length+=e,s=t.length-1;s>=o;s--)t[s]=t[s-e]};for(a(r),s=t;s<o;++s)r[s]=new this.dataElementType;this._parsing&&a(i._parsed),this.parse(t,e),n&&this.updateElements(r,t,e,"reset")}updateElements(t,e,n,i){}_removeElements(t,e){const n=this._cachedMeta;if(this._parsing){const i=n._parsed.splice(t,e);n._stacked&&$n(n,i)}n.data.splice(t,e)}_sync(t){if(this._parsing)this._syncList.push(t);else{const[e,n,i]=t;this[e](n,i)}this.chart._dataChanges.push([this.index,...t])}_onDataPush(){const t=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-t,t])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(t,e){e&&this._sync(["_removeElements",t,e]);const n=arguments.length-2;n&&this._sync(["_insertElements",t,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function Xn(t){const e=t.iScale,n=function(t,e){if(!t._cache.$bar){const n=t.getMatchingVisibleMetas(e);let i=[];for(let e=0,r=n.length;e<r;e++)i=i.concat(n[e].controller.getAllParsedValues(t));t._cache.$bar=Fe(i.sort(((t,e)=>t-e)))}return t._cache.$bar}(e,t.type);let i,r,o,s,a=e._length;const l=()=>{32767!==o&&-32768!==o&&(Z(s)&&(a=Math.min(a,Math.abs(o-s)||a)),s=o)};for(i=0,r=n.length;i<r;++i)o=e.getPixelForValue(n[i]),l();for(s=void 0,i=0,r=e.ticks.length;i<r;++i)o=e.getPixelForTick(i),l();return a}function Kn(t,e,n,i){return L(t)?function(t,e,n,i){const r=n.parse(t[0],i),o=n.parse(t[1],i),s=Math.min(r,o),a=Math.max(r,o);let l=s,c=a;Math.abs(s)>Math.abs(a)&&(l=a,c=s),e[n.axis]=c,e._custom={barStart:l,barEnd:c,start:r,end:o,min:s,max:a}}(t,e,n,i):e[n.axis]=n.parse(t,i),e}function Zn(t,e,n,i){const r=t.iScale,o=t.vScale,s=r.getLabels(),a=r===o,l=[];let c,u,h,d;for(c=n,u=n+i;c<u;++c)d=e[c],h={},h[r.axis]=a||r.parse(s[c],c),l.push(Kn(d,h,o,c));return l}function Gn(t){return t&&void 0!==t.barStart&&void 0!==t.barEnd}function Jn(t,e,n,i){let r=e.borderSkipped;const o={};if(!r)return void(t.borderSkipped=o);const{start:s,end:a,reverse:l,top:c,bottom:u}=function(t){let e,n,i,r,o;return t.horizontal?(e=t.base>t.x,n="left",i="right"):(e=t.base<t.y,n="bottom",i="top"),e?(r="end",o="start"):(r="start",o="end"),{start:n,end:i,reverse:e,top:r,bottom:o}}(t);"middle"===r&&n&&(t.enableBorderRadius=!0,(n._top||0)===i?r=c:(n._bottom||0)===i?r=u:(o[ti(u,s,a,l)]=!0,r=c)),o[ti(r,s,a,l)]=!0,t.borderSkipped=o}function ti(t,e,n,i){var r,o,s;return i?(s=n,t=ei(t=(r=t)===(o=e)?s:r===s?o:r,n,e)):t=ei(t,e,n),t}function ei(t,e,n){return"start"===t?e:"end"===t?n:t}function ni(t,{inflateAmount:e},n){t.inflateAmount="auto"===e?1===n?.33:0:e}Qn.defaults={},Qn.prototype.datasetElementType=null,Qn.prototype.dataElementType=null;class ii extends Qn{parsePrimitiveData(t,e,n,i){return Zn(t,e,n,i)}parseArrayData(t,e,n,i){return Zn(t,e,n,i)}parseObjectData(t,e,n,i){const{iScale:r,vScale:o}=t,{xAxisKey:s="x",yAxisKey:a="y"}=this._parsing,l="x"===r.axis?s:a,c="x"===o.axis?s:a,u=[];let h,d,f,p;for(h=n,d=n+i;h<d;++h)p=e[h],f={},f[r.axis]=r.parse(X(p,l),h),u.push(Kn(X(p,c),f,o,h));return u}updateRangeFromParsed(t,e,n,i){super.updateRangeFromParsed(t,e,n,i);const r=n._custom;r&&e===this._cachedMeta.vScale&&(t.min=Math.min(t.min,r.min),t.max=Math.max(t.max,r.max))}getMaxOverflow(){return 0}getLabelAndValue(t){const e=this._cachedMeta,{iScale:n,vScale:i}=e,r=this.getParsed(t),o=r._custom,s=Gn(o)?"["+o.start+", "+o.end+"]":""+i.getLabelForValue(r[i.axis]);return{label:""+n.getLabelForValue(r[n.axis]),value:s}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(t){const e=this._cachedMeta;this.updateElements(e.data,0,e.data.length,t)}updateElements(t,e,n,i){const r="reset"===i,{index:o,_cachedMeta:{vScale:s}}=this,a=s.getBasePixel(),l=s.isHorizontal(),c=this._getRuler(),u=this.resolveDataElementOptions(e,i),h=this.getSharedOptions(u),d=this.includeOptions(i,h);this.updateSharedOptions(h,i,u);for(let u=e;u<e+n;u++){const e=this.getParsed(u),n=r||D(e[s.axis])?{base:a,head:a}:this._calculateBarValuePixels(u),f=this._calculateBarIndexPixels(u,c),p=(e._stacks||{})[s.axis],g={horizontal:l,base:n.base,enableBorderRadius:!p||Gn(e._custom)||o===p._top||o===p._bottom,x:l?n.head:f.center,y:l?f.center:n.head,height:l?f.size:Math.abs(n.size),width:l?Math.abs(n.size):f.size};d&&(g.options=h||this.resolveDataElementOptions(u,t[u].active?"active":i));const m=g.options||t[u].options;Jn(g,m,p,o),ni(g,m,c.ratio),this.updateElement(t[u],u,g,i)}}_getStacks(t,e){const n=this._cachedMeta.iScale,i=n.getMatchingVisibleMetas(this._type),r=n.options.stacked,o=i.length,s=[];let a,l;for(a=0;a<o;++a)if(l=i[a],l.controller.options.grouped){if(void 0!==e){const t=l.controller.getParsed(e)[l.controller._cachedMeta.vScale.axis];if(D(t)||isNaN(t))continue}if((!1===r||-1===s.indexOf(l.stack)||void 0===r&&void 0===l.stack)&&s.push(l.stack),l.index===t)break}return s.length||s.push(void 0),s}_getStackCount(t){return this._getStacks(void 0,t).length}_getStackIndex(t,e,n){const i=this._getStacks(t,n),r=void 0!==e?i.indexOf(e):-1;return-1===r?i.length-1:r}_getRuler(){const t=this.options,e=this._cachedMeta,n=e.iScale,i=[];let r,o;for(r=0,o=e.data.length;r<o;++r)i.push(n.getPixelForValue(this.getParsed(r)[n.axis],r));const s=t.barThickness;return{min:s||Xn(e),pixels:i,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:t.grouped,ratio:s?1:t.categoryPercentage*t.barPercentage}}_calculateBarValuePixels(t){const{_cachedMeta:{vScale:e,_stacked:n},options:{base:i,minBarLength:r}}=this,o=i||0,s=this.getParsed(t),a=s._custom,l=Gn(a);let c,u,h=s[e.axis],d=0,f=n?this.applyStack(e,s,n):h;f!==h&&(d=f-h,f=h),l&&(h=a.barStart,f=a.barEnd-a.barStart,0!==h&&ct(h)!==ct(a.barEnd)&&(d=0),d+=h);const p=D(i)||l?d:i;let g=e.getPixelForValue(p);if(c=this.chart.getDataVisibility(t)?e.getPixelForValue(d+f):g,u=c-g,Math.abs(u)<r&&(u=function(t,e,n){return 0!==t?ct(t):(e.isHorizontal()?1:-1)*(e.min>=n?1:-1)}(u,e,o)*r,h===o&&(g-=u/2),c=g+u),g===e.getPixelForValue(o)){const t=ct(u)*e.getLineWidthForValue(o)/2;g+=t,u-=t}return{size:u,base:g,head:c,center:c+u/2}}_calculateBarIndexPixels(t,e){const n=e.scale,i=this.options,r=i.skipNull,o=N(i.maxBarThickness,1/0);let s,a;if(e.grouped){const n=r?this._getStackCount(t):e.stackCount,l="flex"===i.barThickness?function(t,e,n,i){const r=e.pixels,o=r[t];let s=t>0?r[t-1]:null,a=t<r.length-1?r[t+1]:null;const l=n.categoryPercentage;null===s&&(s=o-(null===a?e.end-e.start:a-o)),null===a&&(a=o+o-s);const c=o-(o-Math.min(s,a))/2*l;return{chunk:Math.abs(a-s)/2*l/i,ratio:n.barPercentage,start:c}}(t,e,i,n):function(t,e,n,i){const r=n.barThickness;let o,s;return D(r)?(o=e.min*n.categoryPercentage,s=n.barPercentage):(o=r*i,s=1),{chunk:o/i,ratio:s,start:e.pixels[t]-o/2}}(t,e,i,n),c=this._getStackIndex(this.index,this._cachedMeta.stack,r?t:void 0);s=l.start+l.chunk*c+l.chunk/2,a=Math.min(o,l.chunk*l.ratio)}else s=n.getPixelForValue(this.getParsed(t)[n.axis],t),a=Math.min(o,e.min*e.ratio);return{base:s-a/2,head:s+a/2,center:s,size:a}}draw(){const t=this._cachedMeta,e=t.vScale,n=t.data,i=n.length;let r=0;for(;r<i;++r)null!==this.getParsed(r)[e.axis]&&n[r].draw(this._ctx)}}ii.id="bar",ii.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},ii.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class ri extends Qn{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(t,e,n,i){const r=super.parsePrimitiveData(t,e,n,i);for(let t=0;t<r.length;t++)r[t]._custom=this.resolveDataElementOptions(t+n).radius;return r}parseArrayData(t,e,n,i){const r=super.parseArrayData(t,e,n,i);for(let t=0;t<r.length;t++){const i=e[n+t];r[t]._custom=N(i[2],this.resolveDataElementOptions(t+n).radius)}return r}parseObjectData(t,e,n,i){const r=super.parseObjectData(t,e,n,i);for(let t=0;t<r.length;t++){const i=e[n+t];r[t]._custom=N(i&&i.r&&+i.r,this.resolveDataElementOptions(t+n).radius)}return r}getMaxOverflow(){const t=this._cachedMeta.data;let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}getLabelAndValue(t){const e=this._cachedMeta,{xScale:n,yScale:i}=e,r=this.getParsed(t),o=n.getLabelForValue(r.x),s=i.getLabelForValue(r.y),a=r._custom;return{label:e.label,value:"("+o+", "+s+(a?", "+a:"")+")"}}update(t){const e=this._cachedMeta.data;this.updateElements(e,0,e.length,t)}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:s}=this._cachedMeta,a=this.resolveDataElementOptions(e,i),l=this.getSharedOptions(a),c=this.includeOptions(i,l),u=o.axis,h=s.axis;for(let a=e;a<e+n;a++){const e=t[a],n=!r&&this.getParsed(a),l={},d=l[u]=r?o.getPixelForDecimal(.5):o.getPixelForValue(n[u]),f=l[h]=r?s.getBasePixel():s.getPixelForValue(n[h]);l.skip=isNaN(d)||isNaN(f),c&&(l.options=this.resolveDataElementOptions(a,e.active?"active":i),r&&(l.options.radius=0)),this.updateElement(e,a,l,i)}this.updateSharedOptions(l,i,a)}resolveDataElementOptions(t,e){const n=this.getParsed(t);let i=super.resolveDataElementOptions(t,e);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const r=i.radius;return"active"!==e&&(i.radius=0),i.radius+=N(n&&n._custom,r),i}}ri.id="bubble",ri.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},ri.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class oi extends Qn{constructor(t,e){super(t,e),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(t,e){const n=this.getDataset().data,i=this._cachedMeta;if(!1===this._parsing)i._parsed=n;else{let r,o,s=t=>+n[t];if(R(n[t])){const{key:t="value"}=this._parsing;s=e=>+X(n[e],t)}for(r=t,o=t+e;r<o;++r)i._parsed[r]=s(r)}}_getRotation(){return pt(this.options.rotation-90)}_getCircumference(){return pt(this.options.circumference)}_getRotationExtents(){let t=et,e=-et;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)){const i=this.chart.getDatasetMeta(n).controller,r=i._getRotation(),o=i._getCircumference();t=Math.min(t,r),e=Math.max(e,r+o)}return{rotation:t,circumference:e-t}}update(t){const e=this.chart,{chartArea:n}=e,i=this._cachedMeta,r=i.data,o=this.getMaxBorderWidth()+this.getMaxOffset(r)+this.options.spacing,s=Math.max((Math.min(n.width,n.height)-o)/2,0),a=Math.min((c=s,"string"==typeof(l=this.options.cutout)&&l.endsWith("%")?parseFloat(l)/100:l/c),1);var l,c;const u=this._getRingWeight(this.index),{circumference:h,rotation:d}=this._getRotationExtents(),{ratioX:f,ratioY:p,offsetX:g,offsetY:m}=function(t,e,n){let i=1,r=1,o=0,s=0;if(e<et){const a=t,l=a+e,c=Math.cos(a),u=Math.sin(a),h=Math.cos(l),d=Math.sin(l),f=(t,e,i)=>_t(t,a,l,!0)?1:Math.max(e,e*n,i,i*n),p=(t,e,i)=>_t(t,a,l,!0)?-1:Math.min(e,e*n,i,i*n),g=f(0,c,h),m=f(ot,u,d),b=p(tt,c,h),y=p(tt+ot,u,d);i=(g-b)/2,r=(m-y)/2,o=-(g+b)/2,s=-(m+y)/2}return{ratioX:i,ratioY:r,offsetX:o,offsetY:s}}(d,h,a),b=(n.width-o)/f,y=(n.height-o)/p,v=Math.max(Math.min(b,y)/2,0),x=z(this.options.radius,v),_=(x-Math.max(x*a,0))/this._getVisibleDatasetWeightTotal();this.offsetX=g*x,this.offsetY=m*x,i.total=this.calculateTotal(),this.outerRadius=x-_*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-_*u,0),this.updateElements(r,0,r.length,t)}_circumference(t,e){const n=this.options,i=this._cachedMeta,r=this._getCircumference();return e&&n.animation.animateRotate||!this.chart.getDataVisibility(t)||null===i._parsed[t]||i.data[t].hidden?0:this.calculateCircumference(i._parsed[t]*r/et)}updateElements(t,e,n,i){const r="reset"===i,o=this.chart,s=o.chartArea,a=o.options.animation,l=(s.left+s.right)/2,c=(s.top+s.bottom)/2,u=r&&a.animateScale,h=u?0:this.innerRadius,d=u?0:this.outerRadius,f=this.resolveDataElementOptions(e,i),p=this.getSharedOptions(f),g=this.includeOptions(i,p);let m,b=this._getRotation();for(m=0;m<e;++m)b+=this._circumference(m,r);for(m=e;m<e+n;++m){const e=this._circumference(m,r),n=t[m],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:b,endAngle:b+e,circumference:e,outerRadius:d,innerRadius:h};g&&(o.options=p||this.resolveDataElementOptions(m,n.active?"active":i)),b+=e,this.updateElement(n,m,o,i)}this.updateSharedOptions(p,i,f)}calculateTotal(){const t=this._cachedMeta,e=t.data;let n,i=0;for(n=0;n<e.length;n++){const r=t._parsed[n];null===r||isNaN(r)||!this.chart.getDataVisibility(n)||e[n].hidden||(i+=Math.abs(r))}return i}calculateCircumference(t){const e=this._cachedMeta.total;return e>0&&!isNaN(t)?et*(Math.abs(t)/e):0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],r=_n(e._parsed[t],n.options.locale);return{label:i[t]||"",value:r}}getMaxBorderWidth(t){let e=0;const n=this.chart;let i,r,o,s,a;if(!t)for(i=0,r=n.data.datasets.length;i<r;++i)if(n.isDatasetVisible(i)){o=n.getDatasetMeta(i),t=o.data,s=o.controller;break}if(!t)return 0;for(i=0,r=t.length;i<r;++i)a=s.resolveDataElementOptions(i),"inner"!==a.borderAlign&&(e=Math.max(e,a.borderWidth||0,a.hoverBorderWidth||0));return e}getMaxOffset(t){let e=0;for(let n=0,i=t.length;n<i;++n){const t=this.resolveDataElementOptions(n);e=Math.max(e,t.offset||0,t.hoverOffset||0)}return e}_getRingWeightOffset(t){let e=0;for(let n=0;n<t;++n)this.chart.isDatasetVisible(n)&&(e+=this._getRingWeight(n));return e}_getRingWeight(t){return Math.max(N(this.chart.data.datasets[t].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}oi.id="doughnut",oi.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},oi.descriptors={_scriptable:t=>"spacing"!==t,_indexable:t=>"spacing"!==t},oi.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,i)=>{const r=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(t){let e=t.label;const n=": "+t.formattedValue;return L(e)?(e=e.slice(),e[0]+=n):e+=n,e}}}}};class si extends Qn{initialize(){this.enableOptionSharing=!0,super.initialize()}update(t){const e=this._cachedMeta,{dataset:n,data:i=[],_dataset:r}=e,o=this.chart._animationsDisabled;let{start:s,count:a}=function(t,e,n){const i=e.length;let r=0,o=i;if(t._sorted){const{iScale:s,_parsed:a}=t,l=s.axis,{min:c,max:u,minDefined:h,maxDefined:d}=s.getUserBounds();h&&(r=wt(Math.min(Ie(a,s.axis,c).lo,n?i:Ie(e,l,s.getPixelForValue(c)).lo),0,i-1)),o=d?wt(Math.max(Ie(a,s.axis,u).hi+1,n?0:Ie(e,l,s.getPixelForValue(u)).hi+1),r,i)-r:i-r}return{start:r,count:o}}(e,i,o);this._drawStart=s,this._drawCount=a,function(t){const{xScale:e,yScale:n,_scaleRanges:i}=t,r={xmin:e.min,xmax:e.max,ymin:n.min,ymax:n.max};if(!i)return t._scaleRanges=r,!0;const o=i.xmin!==e.min||i.xmax!==e.max||i.ymin!==n.min||i.ymax!==n.max;return Object.assign(i,r),o}(e)&&(s=0,a=i.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!r._decimated,n.points=i;const l=this.resolveDatasetElementOptions(t);this.options.showLine||(l.borderWidth=0),l.segment=this.options.segment,this.updateElement(n,void 0,{animated:!o,options:l},t),this.updateElements(i,s,a,t)}updateElements(t,e,n,i){const r="reset"===i,{iScale:o,vScale:s,_stacked:a,_dataset:l}=this._cachedMeta,c=this.resolveDataElementOptions(e,i),u=this.getSharedOptions(c),h=this.includeOptions(i,u),d=o.axis,f=s.axis,{spanGaps:p,segment:g}=this.options,m=ht(p)?p:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||r||"none"===i;let y=e>0&&this.getParsed(e-1);for(let c=e;c<e+n;++c){const e=t[c],n=this.getParsed(c),p=b?e:{},v=D(n[f]),x=p[d]=o.getPixelForValue(n[d],c),_=p[f]=r||v?s.getBasePixel():s.getPixelForValue(a?this.applyStack(s,n,a):n[f],c);p.skip=isNaN(x)||isNaN(_)||v,p.stop=c>0&&n[d]-y[d]>m,g&&(p.parsed=n,p.raw=l.data[c]),h&&(p.options=u||this.resolveDataElementOptions(c,e.active?"active":i)),b||this.updateElement(e,c,p,i),y=n}this.updateSharedOptions(u,i,c)}getMaxOverflow(){const t=this._cachedMeta,e=t.dataset,n=e.options&&e.options.borderWidth||0,i=t.data||[];if(!i.length)return n;const r=i[0].size(this.resolveDataElementOptions(0)),o=i[i.length-1].size(this.resolveDataElementOptions(i.length-1));return Math.max(n,r,o)/2}draw(){const t=this._cachedMeta;t.dataset.updateControlPoints(this.chart.chartArea,t.iScale.axis),super.draw()}}si.id="line",si.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},si.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class ai extends Qn{constructor(t,e){super(t,e),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(t){const e=this._cachedMeta,n=this.chart,i=n.data.labels||[],r=_n(e._parsed[t].r,n.options.locale);return{label:i[t]||"",value:r}}update(t){const e=this._cachedMeta.data;this._updateRadius(),this.updateElements(e,0,e.length,t)}_updateRadius(){const t=this.chart,e=t.chartArea,n=t.options,i=Math.min(e.right-e.left,e.bottom-e.top),r=Math.max(i/2,0),o=(r-Math.max(n.cutoutPercentage?r/100*n.cutoutPercentage:1,0))/t.getVisibleDatasetCount();this.outerRadius=r-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(t,e,n,i){const r="reset"===i,o=this.chart,s=this.getDataset(),a=o.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,u=l.yCenter,h=l.getIndexAngle(0)-.5*tt;let d,f=h;const p=360/this.countVisibleElements();for(d=0;d<e;++d)f+=this._computeAngle(d,i,p);for(d=e;d<e+n;d++){const e=t[d];let n=f,g=f+this._computeAngle(d,i,p),m=o.getDataVisibility(d)?l.getDistanceFromCenterForValue(s.data[d]):0;f=g,r&&(a.animateScale&&(m=0),a.animateRotate&&(n=g=h));const b={x:c,y:u,innerRadius:0,outerRadius:m,startAngle:n,endAngle:g,options:this.resolveDataElementOptions(d,e.active?"active":i)};this.updateElement(e,d,b,i)}}countVisibleElements(){const t=this.getDataset(),e=this._cachedMeta;let n=0;return e.data.forEach(((e,i)=>{!isNaN(t.data[i])&&this.chart.getDataVisibility(i)&&n++})),n}_computeAngle(t,e,n){return this.chart.getDataVisibility(t)?pt(this.resolveDataElementOptions(t,e).angle||n):0}}ai.id="polarArea",ai.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},ai.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(t){const e=t.data;if(e.labels.length&&e.datasets.length){const{labels:{pointStyle:n}}=t.legend.options;return e.labels.map(((e,i)=>{const r=t.getDatasetMeta(0).controller.getStyle(i);return{text:e,fillStyle:r.backgroundColor,strokeStyle:r.borderColor,lineWidth:r.borderWidth,pointStyle:n,hidden:!t.getDataVisibility(i),index:i}}))}return[]}},onClick(t,e,n){n.chart.toggleDataVisibility(e.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:t=>t.chart.data.labels[t.dataIndex]+": "+t.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class li extends oi{}li.id="pie",li.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class ci extends Qn{getLabelAndValue(t){const e=this._cachedMeta.vScale,n=this.getParsed(t);return{label:e.getLabels()[t],value:""+e.getLabelForValue(n[e.axis])}}update(t){const e=this._cachedMeta,n=e.dataset,i=e.data||[],r=e.iScale.getLabels();if(n.points=i,"resize"!==t){const e=this.resolveDatasetElementOptions(t);this.options.showLine||(e.borderWidth=0);const o={_loop:!0,_fullLoop:r.length===i.length,options:e};this.updateElement(n,void 0,o,t)}this.updateElements(i,0,i.length,t)}updateElements(t,e,n,i){const r=this.getDataset(),o=this._cachedMeta.rScale,s="reset"===i;for(let a=e;a<e+n;a++){const e=t[a],n=this.resolveDataElementOptions(a,e.active?"active":i),l=o.getPointPositionForValue(a,r.data[a]),c=s?o.xCenter:l.x,u=s?o.yCenter:l.y,h={x:c,y:u,angle:l.angle,skip:isNaN(c)||isNaN(u),options:n};this.updateElement(e,a,h,i)}}}ci.id="radar",ci.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},ci.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class ui extends si{}ui.id="scatter",ui.defaults={showLine:!1,fill:!1},ui.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:t=>"("+t.label+", "+t.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var hi=Object.freeze({__proto__:null,BarController:ii,BubbleController:ri,DoughnutController:oi,LineController:si,PolarAreaController:ai,PieController:li,RadarController:ci,ScatterController:ui});function di(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class fi{constructor(t){this.options=t||{}}formats(){return di()}parse(t,e){return di()}format(t,e){return di()}add(t,e,n){return di()}diff(t,e,n){return di()}startOf(t,e,n){return di()}endOf(t,e){return di()}}fi.override=function(t){Object.assign(fi.prototype,t)};var pi={_date:fi};function gi(t,e){return"native"in t?{x:t.x,y:t.y}:dn(t,e)}function mi(t,e,n,i){const{controller:r,data:o,_sorted:s}=t,a=r._cachedMeta.iScale;if(a&&e===a.axis&&"r"!==e&&s&&o.length){const t=a._reversePixels?Be:Ie;if(!i)return t(o,e,n);if(r._sharedOptions){const i=o[0],r="function"==typeof i.getRange&&i.getRange(e);if(r){const i=t(o,e,n-r),s=t(o,e,n+r);return{lo:i.lo,hi:s.hi}}}}return{lo:0,hi:o.length-1}}function bi(t,e,n,i,r){const o=t.getSortedVisibleDatasetMetas(),s=n[e];for(let t=0,n=o.length;t<n;++t){const{index:n,data:a}=o[t],{lo:l,hi:c}=mi(o[t],e,s,r);for(let t=l;t<=c;++t){const e=a[t];e.skip||i(e,n,t)}}}function yi(t,e,n,i){const r=[];return me(e,t.chartArea,t._minPadding)?(bi(t,n,e,(function(t,n,o){t.inRange(e.x,e.y,i)&&r.push({element:t,datasetIndex:n,index:o})}),!0),r):r}function vi(t,e,n,i,r){return me(e,t.chartArea,t._minPadding)?"r"!==n||i?function(t,e,n,i,r){let o=[];const s=function(t){const e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,i){const r=e?Math.abs(t.x-i.x):0,o=n?Math.abs(t.y-i.y):0;return Math.sqrt(Math.pow(r,2)+Math.pow(o,2))}}(n);let a=Number.POSITIVE_INFINITY;return bi(t,n,e,(function(n,l,c){const u=n.inRange(e.x,e.y,r);if(i&&!u)return;const h=n.getCenterPoint(r);if(!me(h,t.chartArea,t._minPadding)&&!u)return;const d=s(e,h);d<a?(o=[{element:n,datasetIndex:l,index:c}],a=d):d===a&&o.push({element:n,datasetIndex:l,index:c})})),o}(t,e,n,i,r):function(t,e,n,i){let r=[];return bi(t,n,e,(function(t,n,o){const{startAngle:s,endAngle:a}=t.getProps(["startAngle","endAngle"],i),{angle:l}=bt(t,{x:e.x,y:e.y});_t(l,s,a)&&r.push({element:t,datasetIndex:n,index:o})})),r}(t,e,n,r):[]}function xi(t,e,n,i){const r=gi(e,t),o=[],s=n.axis,a="x"===s?"inXRange":"inYRange";let l=!1;return function(t,e){const n=t.getSortedVisibleDatasetMetas();let i,r,o;for(let t=0,s=n.length;t<s;++t){({index:i,data:r}=n[t]);for(let t=0,n=r.length;t<n;++t)o=r[t],o.skip||e(o,i,t)}}(t,((t,e,n)=>{t[a](r[s],i)&&o.push({element:t,datasetIndex:e,index:n}),t.inRange(r.x,r.y,i)&&(l=!0)})),n.intersect&&!l?[]:o}var _i={modes:{index(t,e,n,i){const r=gi(e,t),o=n.axis||"x",s=n.intersect?yi(t,r,o,i):vi(t,r,o,!1,i),a=[];return s.length?(t.getSortedVisibleDatasetMetas().forEach((t=>{const e=s[0].index,n=t.data[e];n&&!n.skip&&a.push({element:n,datasetIndex:t.index,index:e})})),a):[]},dataset(t,e,n,i){const r=gi(e,t),o=n.axis||"xy";let s=n.intersect?yi(t,r,o,i):vi(t,r,o,!1,i);if(s.length>0){const e=s[0].datasetIndex,n=t.getDatasetMeta(e).data;s=[];for(let t=0;t<n.length;++t)s.push({element:n[t],datasetIndex:e,index:t})}return s},point:(t,e,n,i)=>yi(t,gi(e,t),n.axis||"xy",i),nearest:(t,e,n,i)=>vi(t,gi(e,t),n.axis||"xy",n.intersect,i),x:(t,e,n,i)=>xi(t,e,{axis:"x",intersect:n.intersect},i),y:(t,e,n,i)=>xi(t,e,{axis:"y",intersect:n.intersect},i)}};const wi=["left","top","right","bottom"];function ki(t,e){return t.filter((t=>t.pos===e))}function Ai(t,e){return t.filter((t=>-1===wi.indexOf(t.pos)&&t.box.axis===e))}function Ci(t,e){return t.sort(((t,n)=>{const i=e?n:t,r=e?t:n;return i.weight===r.weight?i.index-r.index:i.weight-r.weight}))}function Si(t,e,n,i){return Math.max(t[n],e[n])+Math.max(t[i],e[i])}function Ei(t,e){t.top=Math.max(t.top,e.top),t.left=Math.max(t.left,e.left),t.bottom=Math.max(t.bottom,e.bottom),t.right=Math.max(t.right,e.right)}function Mi(t,e,n,i){const{pos:r,box:o}=n,s=t.maxPadding;if(!R(r)){n.size&&(t[r]-=n.size);const e=i[n.stack]||{size:0,count:1};e.size=Math.max(e.size,n.horizontal?o.height:o.width),n.size=e.size/e.count,t[r]+=n.size}o.getPadding&&Ei(s,o.getPadding());const a=Math.max(0,e.outerWidth-Si(s,t,"left","right")),l=Math.max(0,e.outerHeight-Si(s,t,"top","bottom")),c=a!==t.w,u=l!==t.h;return t.w=a,t.h=l,n.horizontal?{same:c,other:u}:{same:u,other:c}}function Pi(t,e){const n=e.maxPadding;return function(t){const i={left:0,top:0,right:0,bottom:0};return t.forEach((t=>{i[t]=Math.max(e[t],n[t])})),i}(t?["left","right"]:["top","bottom"])}function Oi(t,e,n,i){const r=[];let o,s,a,l,c,u;for(o=0,s=t.length,c=0;o<s;++o){a=t[o],l=a.box,l.update(a.width||e.w,a.height||e.h,Pi(a.horizontal,e));const{same:s,other:h}=Mi(e,n,a,i);c|=s&&r.length,u=u||h,l.fullSize||r.push(a)}return c&&Oi(r,e,n,i)||u}function Ti(t,e,n,i,r){t.top=n,t.left=e,t.right=e+i,t.bottom=n+r,t.width=i,t.height=r}function Di(t,e,n,i){const r=n.padding;let{x:o,y:s}=e;for(const a of t){const t=a.box,l=i[a.stack]||{count:1,placed:0,weight:1},c=a.stackWeight/l.weight||1;if(a.horizontal){const i=e.w*c,o=l.size||t.height;Z(l.start)&&(s=l.start),t.fullSize?Ti(t,r.left,s,n.outerWidth-r.right-r.left,o):Ti(t,e.left+l.placed,s,i,o),l.start=s,l.placed+=i,s=t.bottom}else{const i=e.h*c,s=l.size||t.width;Z(l.start)&&(o=l.start),t.fullSize?Ti(t,o,r.top,s,n.outerHeight-r.bottom-r.top):Ti(t,o,e.top+l.placed,s,i),l.start=o,l.placed+=i,o=t.right}}e.x=o,e.y=s}ue.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var Li={addBox(t,e){t.boxes||(t.boxes=[]),e.fullSize=e.fullSize||!1,e.position=e.position||"top",e.weight=e.weight||0,e._layers=e._layers||function(){return[{z:0,draw(t){e.draw(t)}}]},t.boxes.push(e)},removeBox(t,e){const n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure(t,e,n){e.fullSize=n.fullSize,e.position=n.position,e.weight=n.weight},update(t,e,n,i){if(!t)return;const r=Oe(t.options.layout.padding),o=Math.max(e-r.width,0),s=Math.max(n-r.height,0),a=function(t){const e=function(t){const e=[];let n,i,r,o,s,a;for(n=0,i=(t||[]).length;n<i;++n)r=t[n],({position:o,options:{stack:s,stackWeight:a=1}}=r),e.push({index:n,box:r,pos:o,horizontal:r.isHorizontal(),weight:r.weight,stack:s&&o+s,stackWeight:a});return e}(t),n=Ci(e.filter((t=>t.box.fullSize)),!0),i=Ci(ki(e,"left"),!0),r=Ci(ki(e,"right")),o=Ci(ki(e,"top"),!0),s=Ci(ki(e,"bottom")),a=Ai(e,"x"),l=Ai(e,"y");return{fullSize:n,leftAndTop:i.concat(o),rightAndBottom:r.concat(l).concat(s).concat(a),chartArea:ki(e,"chartArea"),vertical:i.concat(r).concat(l),horizontal:o.concat(s).concat(a)}}(t.boxes),l=a.vertical,c=a.horizontal;j(t.boxes,(t=>{"function"==typeof t.beforeLayout&&t.beforeLayout()}));const u=l.reduce(((t,e)=>e.box.options&&!1===e.box.options.display?t:t+1),0)||1,h=Object.freeze({outerWidth:e,outerHeight:n,padding:r,availableWidth:o,availableHeight:s,vBoxMaxWidth:o/2/u,hBoxMaxHeight:s/2}),d=Object.assign({},r);Ei(d,Oe(i));const f=Object.assign({maxPadding:d,w:o,h:s,x:r.left,y:r.top},r),p=function(t,e){const n=function(t){const e={};for(const n of t){const{stack:t,pos:i,stackWeight:r}=n;if(!t||!wi.includes(i))continue;const o=e[t]||(e[t]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=r}return e}(t),{vBoxMaxWidth:i,hBoxMaxHeight:r}=e;let o,s,a;for(o=0,s=t.length;o<s;++o){a=t[o];const{fullSize:s}=a.box,l=n[a.stack],c=l&&a.stackWeight/l.weight;a.horizontal?(a.width=c?c*i:s&&e.availableWidth,a.height=r):(a.width=i,a.height=c?c*r:s&&e.availableHeight)}return n}(l.concat(c),h);Oi(a.fullSize,f,h,p),Oi(l,f,h,p),Oi(c,f,h,p)&&Oi(l,f,h,p),function(t){const e=t.maxPadding;function n(n){const i=Math.max(e[n]-t[n],0);return t[n]+=i,i}t.y+=n("top"),t.x+=n("left"),n("right"),n("bottom")}(f),Di(a.leftAndTop,f,h,p),f.x+=f.w,f.y+=f.h,Di(a.rightAndBottom,f,h,p),t.chartArea={left:f.left,top:f.top,right:f.left+f.w,bottom:f.top+f.h,height:f.h,width:f.w},j(a.chartArea,(e=>{const n=e.box;Object.assign(n,t.chartArea),n.update(f.w,f.h,{left:0,top:0,right:0,bottom:0})}))}};class Ri{acquireContext(t,e){}releaseContext(t){return!1}addEventListener(t,e,n){}removeEventListener(t,e,n){}getDevicePixelRatio(){return 1}getMaximumSize(t,e,n,i){return e=Math.max(0,e||t.width),n=n||t.height,{width:e,height:Math.max(0,i?Math.floor(e/i):n)}}isAttached(t){return!0}updateConfig(t){}}class Ii extends Ri{acquireContext(t){return t&&t.getContext&&t.getContext("2d")||null}updateConfig(t){t.options.animation=!1}}const Bi={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},Ni=t=>null===t||""===t,zi=!!gn&&{passive:!0};function Fi(t,e,n){t.canvas.removeEventListener(e,n,zi)}function ji(t,e){for(const n of t)if(n===e||n.contains(e))return!0}function Vi(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||ji(n.addedNodes,i),e=e&&!ji(n.removedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}function Wi(t,e,n){const i=t.canvas,r=new MutationObserver((t=>{let e=!1;for(const n of t)e=e||ji(n.removedNodes,i),e=e&&!ji(n.addedNodes,i);e&&n()}));return r.observe(document,{childList:!0,subtree:!0}),r}const Hi=new Map;let Ui=0;function $i(){const t=window.devicePixelRatio;t!==Ui&&(Ui=t,Hi.forEach(((e,n)=>{n.currentDevicePixelRatio!==t&&e()})))}function Yi(t,e,n){const i=t.canvas,r=i&&an(i);if(!r)return;const o=E(((t,e)=>{const i=r.clientWidth;n(t,e),i<r.clientWidth&&n()}),window),s=new ResizeObserver((t=>{const e=t[0],n=e.contentRect.width,i=e.contentRect.height;0===n&&0===i||o(n,i)}));return s.observe(r),function(t,e){Hi.size||window.addEventListener("resize",$i),Hi.set(t,e)}(t,o),s}function qi(t,e,n){n&&n.disconnect(),"resize"===e&&function(t){Hi.delete(t),Hi.size||window.removeEventListener("resize",$i)}(t)}function Qi(t,e,n){const i=t.canvas,r=E((e=>{null!==t.ctx&&n(function(t,e){const n=Bi[t.type]||t.type,{x:i,y:r}=dn(t,e);return{type:n,chart:e,native:t,x:void 0!==i?i:null,y:void 0!==r?r:null}}(e,t))}),t,(t=>{const e=t[0];return[e,e.offsetX,e.offsetY]}));return function(t,e,n){t.addEventListener(e,n,zi)}(i,e,r),r}class Xi extends Ri{acquireContext(t,e){const n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){const n=t.style,i=t.getAttribute("height"),r=t.getAttribute("width");if(t.$chartjs={initial:{height:i,width:r,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",Ni(r)){const e=mn(t,"width");void 0!==e&&(t.width=e)}if(Ni(i))if(""===t.style.height)t.height=t.width/(e||2);else{const e=mn(t,"height");void 0!==e&&(t.height=e)}}(t,e),n):null}releaseContext(t){const e=t.canvas;if(!e.$chartjs)return!1;const n=e.$chartjs.initial;["height","width"].forEach((t=>{const i=n[t];D(i)?e.removeAttribute(t):e.setAttribute(t,i)}));const i=n.style||{};return Object.keys(i).forEach((t=>{e.style[t]=i[t]})),e.width=e.width,delete e.$chartjs,!0}addEventListener(t,e,n){this.removeEventListener(t,e);const i=t.$proxies||(t.$proxies={}),r={attach:Vi,detach:Wi,resize:Yi}[e]||Qi;i[e]=r(t,e,n)}removeEventListener(t,e){const n=t.$proxies||(t.$proxies={}),i=n[e];i&&(({attach:qi,detach:qi,resize:qi}[e]||Fi)(t,e,i),n[e]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(t,e,n,i){return function(t,e,n,i){const r=cn(t),o=hn(r,"margin"),s=ln(r.maxWidth,t,"clientWidth")||it,a=ln(r.maxHeight,t,"clientHeight")||it,l=function(t,e,n){let i,r;if(void 0===e||void 0===n){const o=an(t);if(o){const t=o.getBoundingClientRect(),s=cn(o),a=hn(s,"border","width"),l=hn(s,"padding");e=t.width-l.width-a.width,n=t.height-l.height-a.height,i=ln(s.maxWidth,o,"clientWidth"),r=ln(s.maxHeight,o,"clientHeight")}else e=t.clientWidth,n=t.clientHeight}return{width:e,height:n,maxWidth:i||it,maxHeight:r||it}}(t,e,n);let{width:c,height:u}=l;if("content-box"===r.boxSizing){const t=hn(r,"border","width"),e=hn(r,"padding");c-=e.width+t.width,u-=e.height+t.height}return c=Math.max(0,c-o.width),u=Math.max(0,i?Math.floor(c/i):u-o.height),c=fn(Math.min(c,s,l.maxWidth)),u=fn(Math.min(u,a,l.maxHeight)),c&&!u&&(u=fn(c/2)),{width:c,height:u}}(t,e,n,i)}isAttached(t){const e=an(t);return!(!e||!e.isConnected)}}class Ki{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}hasValue(){return ht(this.x)&&ht(this.y)}getProps(t,e){const n=this.$animations;if(!e||!n)return this;const i={};return t.forEach((t=>{i[t]=n[t]&&n[t].active()?n[t]._to:this[t]})),i}}Ki.defaults={},Ki.defaultRoutes=void 0;const Zi={values:t=>L(t)?t:""+t,numeric(t,e,n){if(0===t)return"0";const i=this.chart.options.locale;let r,o=t;if(n.length>1){const e=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(e<1e-4||e>1e15)&&(r="scientific"),o=function(t,e){let n=e.length>3?e[2].value-e[1].value:e[1].value-e[0].value;return Math.abs(n)>=1&&t!==Math.floor(t)&&(n=t-Math.floor(t)),n}(t,n)}const s=lt(Math.abs(o)),a=Math.max(Math.min(-1*Math.floor(s),20),0),l={notation:r,minimumFractionDigits:a,maximumFractionDigits:a};return Object.assign(l,this.options.ticks.format),_n(t,i,l)},logarithmic(t,e,n){if(0===t)return"0";const i=t/Math.pow(10,Math.floor(lt(t)));return 1===i||2===i||5===i?Zi.numeric.call(this,t,e,n):""}};var Gi={formatters:Zi};function Ji(t,e,n,i,r){const o=N(i,0),s=Math.min(N(r,t.length),t.length);let a,l,c,u=0;for(n=Math.ceil(n),r&&(a=r-i,n=a/Math.floor(a/n)),c=o;c<0;)u++,c=Math.round(o+u*n);for(l=Math.max(o,0);l<s;l++)l===c&&(e.push(t[l]),u++,c=Math.round(o+u*n))}ue.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(t,e)=>e.lineWidth,tickColor:(t,e)=>e.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:Gi.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),ue.route("scale.ticks","color","","color"),ue.route("scale.grid","color","","borderColor"),ue.route("scale.grid","borderColor","","borderColor"),ue.route("scale.title","color","","color"),ue.describe("scale",{_fallback:!1,_scriptable:t=>!t.startsWith("before")&&!t.startsWith("after")&&"callback"!==t&&"parser"!==t,_indexable:t=>"borderDash"!==t&&"tickBorderDash"!==t}),ue.describe("scales",{_fallback:"scale"}),ue.describe("scale.ticks",{_scriptable:t=>"backdropPadding"!==t&&"callback"!==t,_indexable:t=>"backdropPadding"!==t});const tr=(t,e,n)=>"top"===e||"left"===e?t[e]+n:t[e]-n;function er(t,e){const n=[],i=t.length/e,r=t.length;let o=0;for(;o<r;o+=i)n.push(t[Math.floor(o)]);return n}function nr(t,e,n){const i=t.ticks.length,r=Math.min(e,i-1),o=t._startPixel,s=t._endPixel,a=1e-6;let l,c=t.getPixelForTick(r);if(!(n&&(l=1===i?Math.max(c-o,s-c):0===e?(t.getPixelForTick(1)-c)/2:(c-t.getPixelForTick(r-1))/2,c+=r<e?l:-l,c<o-a||c>s+a)))return c}function ir(t){return t.drawTicks?t.tickLength:0}function rr(t,e){if(!t.display)return 0;const n=Te(t.font,e),i=Oe(t.padding);return(L(t.text)?t.text.length:1)*n.lineHeight+i.height}function or(t,e,n){let i=M(t);return(n&&"right"!==e||!n&&"right"===e)&&(i=(t=>"left"===t?"right":"right"===t?"left":t)(i)),i}class sr extends Ki{constructor(t){super(),this.id=t.id,this.type=t.type,this.options=void 0,this.ctx=t.ctx,this.chart=t.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(t){this.options=t.setContext(this.getContext()),this.axis=t.axis,this._userMin=this.parse(t.min),this._userMax=this.parse(t.max),this._suggestedMin=this.parse(t.suggestedMin),this._suggestedMax=this.parse(t.suggestedMax)}parse(t,e){return t}getUserBounds(){let{_userMin:t,_userMax:e,_suggestedMin:n,_suggestedMax:i}=this;return t=B(t,Number.POSITIVE_INFINITY),e=B(e,Number.NEGATIVE_INFINITY),n=B(n,Number.POSITIVE_INFINITY),i=B(i,Number.NEGATIVE_INFINITY),{min:B(t,n),max:B(e,i),minDefined:I(t),maxDefined:I(e)}}getMinMax(t){let e,{min:n,max:i,minDefined:r,maxDefined:o}=this.getUserBounds();if(r&&o)return{min:n,max:i};const s=this.getMatchingVisibleMetas();for(let a=0,l=s.length;a<l;++a)e=s[a].controller.getMinMax(this,t),r||(n=Math.min(n,e.min)),o||(i=Math.max(i,e.max));return n=o&&n>i?i:n,i=r&&n>i?n:i,{min:B(n,B(i,n)),max:B(i,B(n,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){F(this.options.beforeUpdate,[this])}update(t,e,n){const{beginAtZero:i,grace:r,ticks:o}=this.options,s=o.sampleSize;this.beforeUpdate(),this.maxWidth=t,this.maxHeight=e,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=function(t,e,n){const{min:i,max:r}=t,o=z(e,(r-i)/2),s=(t,e)=>n&&0===t?0:t+e;return{min:s(i,-Math.abs(o)),max:s(r,o)}}(this,r,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const a=s<this.ticks.length;this._convertTicksToLabels(a?er(this.ticks,s):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(t,e){const n=t.options.ticks,i=n.maxTicksLimit||function(t){const e=t.options.offset,n=t._tickSize(),i=t._length/n+(e?0:1),r=t._maxLength/n;return Math.floor(Math.min(i,r))}(t),r=n.major.enabled?function(t){const e=[];let n,i;for(n=0,i=t.length;n<i;n++)t[n].major&&e.push(n);return e}(e):[],o=r.length,s=r[0],a=r[o-1],l=[];if(o>i)return function(t,e,n,i){let r,o=0,s=n[0];for(i=Math.ceil(i),r=0;r<t.length;r++)r===s&&(e.push(t[r]),o++,s=n[o*i])}(e,l,r,o/i),l;const c=function(t,e,n){const i=function(t){const e=t.length;let n,i;if(e<2)return!1;for(i=t[0],n=1;n<e;++n)if(t[n]-t[n-1]!==i)return!1;return i}(t),r=e.length/n;if(!i)return Math.max(r,1);const o=function(t){const e=[],n=Math.sqrt(t);let i;for(i=1;i<n;i++)t%i==0&&(e.push(i),e.push(t/i));return n===(0|n)&&e.push(n),e.sort(((t,e)=>t-e)).pop(),e}(i);for(let t=0,e=o.length-1;t<e;t++){const e=o[t];if(e>r)return e}return Math.max(r,1)}(r,e,i);if(o>0){let t,n;const i=o>1?Math.round((a-s)/(o-1)):null;for(Ji(e,l,c,D(i)?0:s-i,s),t=0,n=o-1;t<n;t++)Ji(e,l,c,r[t],r[t+1]);return Ji(e,l,c,a,D(i)?e.length:a+i),l}return Ji(e,l,c),l}(this,this.ticks),this._labelSizes=null),a&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let t,e,n=this.options.reverse;this.isHorizontal()?(t=this.left,e=this.right):(t=this.top,e=this.bottom,n=!n),this._startPixel=t,this._endPixel=e,this._reversePixels=n,this._length=e-t,this._alignToPixels=this.options.alignToPixels}afterUpdate(){F(this.options.afterUpdate,[this])}beforeSetDimensions(){F(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){F(this.options.afterSetDimensions,[this])}_callHooks(t){this.chart.notifyPlugins(t,this.getContext()),F(this.options[t],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){F(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(t){const e=this.options.ticks;let n,i,r;for(n=0,i=t.length;n<i;n++)r=t[n],r.label=F(e.callback,[r.value,n,t],this)}afterTickToLabelConversion(){F(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){F(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const t=this.options,e=t.ticks,n=this.ticks.length,i=e.minRotation||0,r=e.maxRotation;let o,s,a,l=i;if(!this._isVisible()||!e.display||i>=r||n<=1||!this.isHorizontal())return void(this.labelRotation=i);const c=this._getLabelSizes(),u=c.widest.width,h=c.highest.height,d=wt(this.chart.width-u,0,this.maxWidth);o=t.offset?this.maxWidth/n:d/(n-1),u+6>o&&(o=d/(n-(t.offset?.5:1)),s=this.maxHeight-ir(t.grid)-e.padding-rr(t.title,this.chart.options.font),a=Math.sqrt(u*u+h*h),l=gt(Math.min(Math.asin(wt((c.highest.height+6)/o,-1,1)),Math.asin(wt(s/a,-1,1))-Math.asin(wt(h/a,-1,1)))),l=Math.max(i,Math.min(r,l))),this.labelRotation=l}afterCalculateLabelRotation(){F(this.options.afterCalculateLabelRotation,[this])}beforeFit(){F(this.options.beforeFit,[this])}fit(){const t={width:0,height:0},{chart:e,options:{ticks:n,title:i,grid:r}}=this,o=this._isVisible(),s=this.isHorizontal();if(o){const o=rr(i,e.options.font);if(s?(t.width=this.maxWidth,t.height=ir(r)+o):(t.height=this.maxHeight,t.width=ir(r)+o),n.display&&this.ticks.length){const{first:e,last:i,widest:r,highest:o}=this._getLabelSizes(),a=2*n.padding,l=pt(this.labelRotation),c=Math.cos(l),u=Math.sin(l);if(s){const e=n.mirror?0:u*r.width+c*o.height;t.height=Math.min(this.maxHeight,t.height+e+a)}else{const e=n.mirror?0:c*r.width+u*o.height;t.width=Math.min(this.maxWidth,t.width+e+a)}this._calculatePadding(e,i,u,c)}}this._handleMargins(),s?(this.width=this._length=e.width-this._margins.left-this._margins.right,this.height=t.height):(this.width=t.width,this.height=this._length=e.height-this._margins.top-this._margins.bottom)}_calculatePadding(t,e,n,i){const{ticks:{align:r,padding:o},position:s}=this.options,a=0!==this.labelRotation,l="top"!==s&&"x"===this.axis;if(this.isHorizontal()){const s=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,h=0;a?l?(u=i*t.width,h=n*e.height):(u=n*t.height,h=i*e.width):"start"===r?h=e.width:"end"===r?u=t.width:(u=t.width/2,h=e.width/2),this.paddingLeft=Math.max((u-s+o)*this.width/(this.width-s),0),this.paddingRight=Math.max((h-c+o)*this.width/(this.width-c),0)}else{let n=e.height/2,i=t.height/2;"start"===r?(n=0,i=t.height):"end"===r&&(n=e.height,i=0),this.paddingTop=n+o,this.paddingBottom=i+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){F(this.options.afterFit,[this])}isHorizontal(){const{axis:t,position:e}=this.options;return"top"===e||"bottom"===e||"x"===t}isFullSize(){return this.options.fullSize}_convertTicksToLabels(t){let e,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(t),e=0,n=t.length;e<n;e++)D(t[e].label)&&(t.splice(e,1),n--,e--);this.afterTickToLabelConversion()}_getLabelSizes(){let t=this._labelSizes;if(!t){const e=this.options.ticks.sampleSize;let n=this.ticks;e<n.length&&(n=er(n,e)),this._labelSizes=t=this._computeLabelSizes(n,n.length)}return t}_computeLabelSizes(t,e){const{ctx:n,_longestTextCache:i}=this,r=[],o=[];let s,a,l,c,u,h,d,f,p,g,m,b=0,y=0;for(s=0;s<e;++s){if(c=t[s].label,u=this._resolveTickFontOptions(s),n.font=h=u.string,d=i[h]=i[h]||{data:{},gc:[]},f=u.lineHeight,p=g=0,D(c)||L(c)){if(L(c))for(a=0,l=c.length;a<l;++a)m=c[a],D(m)||L(m)||(p=he(n,d.data,d.gc,p,m),g+=f)}else p=he(n,d.data,d.gc,p,c),g=f;r.push(p),o.push(g),b=Math.max(p,b),y=Math.max(g,y)}!function(t,e){j(t,(t=>{const n=t.gc,i=n.length/2;let r;if(i>e){for(r=0;r<i;++r)delete t.data[n[r]];n.splice(0,i)}}))}(i,e);const v=r.indexOf(b),x=o.indexOf(y),_=t=>({width:r[t]||0,height:o[t]||0});return{first:_(0),last:_(e-1),widest:_(v),highest:_(x),widths:r,heights:o}}getLabelForValue(t){return t}getPixelForValue(t,e){return NaN}getValueForPixel(t){}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getPixelForDecimal(t){this._reversePixels&&(t=1-t);const e=this._startPixel+t*this._length;return wt(this._alignToPixels?fe(this.chart,e,0):e,-32768,32767)}getDecimalForPixel(t){const e=(t-this._startPixel)/this._length;return this._reversePixels?1-e:e}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:t,max:e}=this;return t<0&&e<0?e:t>0&&e>0?t:0}getContext(t){const e=this.ticks||[];if(t>=0&&t<e.length){const n=e[t];return n.$context||(n.$context=function(t,e,n){return Le(t,{tick:n,index:e,type:"tick"})}(this.getContext(),t,n))}return this.$context||(this.$context=Le(this.chart.getContext(),{scale:this,type:"scale"}))}_tickSize(){const t=this.options.ticks,e=pt(this.labelRotation),n=Math.abs(Math.cos(e)),i=Math.abs(Math.sin(e)),r=this._getLabelSizes(),o=t.autoSkipPadding||0,s=r?r.widest.width+o:0,a=r?r.highest.height+o:0;return this.isHorizontal()?a*n>s*i?s/n:a/i:a*i<s*n?a/n:s/i}_isVisible(){const t=this.options.display;return"auto"!==t?!!t:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(t){const e=this.axis,n=this.chart,i=this.options,{grid:r,position:o}=i,s=r.offset,a=this.isHorizontal(),l=this.ticks.length+(s?1:0),c=ir(r),u=[],h=r.setContext(this.getContext()),d=h.drawBorder?h.borderWidth:0,f=d/2,p=function(t){return fe(n,t,d)};let g,m,b,y,v,x,_,w,k,A,C,S;if("top"===o)g=p(this.bottom),x=this.bottom-c,w=g-f,A=p(t.top)+f,S=t.bottom;else if("bottom"===o)g=p(this.top),A=t.top,S=p(t.bottom)-f,x=g+f,w=this.top+c;else if("left"===o)g=p(this.right),v=this.right-c,_=g-f,k=p(t.left)+f,C=t.right;else if("right"===o)g=p(this.left),k=t.left,C=p(t.right)-f,v=g+f,_=this.left+c;else if("x"===e){if("center"===o)g=p((t.top+t.bottom)/2+.5);else if(R(o)){const t=Object.keys(o)[0],e=o[t];g=p(this.chart.scales[t].getPixelForValue(e))}A=t.top,S=t.bottom,x=g+f,w=x+c}else if("y"===e){if("center"===o)g=p((t.left+t.right)/2);else if(R(o)){const t=Object.keys(o)[0],e=o[t];g=p(this.chart.scales[t].getPixelForValue(e))}v=g-f,_=v-c,k=t.left,C=t.right}const E=N(i.ticks.maxTicksLimit,l),M=Math.max(1,Math.ceil(l/E));for(m=0;m<l;m+=M){const t=r.setContext(this.getContext(m)),e=t.lineWidth,i=t.color,o=r.borderDash||[],l=t.borderDashOffset,c=t.tickWidth,h=t.tickColor,d=t.tickBorderDash||[],f=t.tickBorderDashOffset;b=nr(this,m,s),void 0!==b&&(y=fe(n,b,e),a?v=_=k=C=y:x=w=A=S=y,u.push({tx1:v,ty1:x,tx2:_,ty2:w,x1:k,y1:A,x2:C,y2:S,width:e,color:i,borderDash:o,borderDashOffset:l,tickWidth:c,tickColor:h,tickBorderDash:d,tickBorderDashOffset:f}))}return this._ticksLength=l,this._borderValue=g,u}_computeLabelItems(t){const e=this.axis,n=this.options,{position:i,ticks:r}=n,o=this.isHorizontal(),s=this.ticks,{align:a,crossAlign:l,padding:c,mirror:u}=r,h=ir(n.grid),d=h+c,f=u?-c:d,p=-pt(this.labelRotation),g=[];let m,b,y,v,x,_,w,k,A,C,S,E,M="middle";if("top"===i)_=this.bottom-f,w=this._getXAxisLabelAlignment();else if("bottom"===i)_=this.top+f,w=this._getXAxisLabelAlignment();else if("left"===i){const t=this._getYAxisLabelAlignment(h);w=t.textAlign,x=t.x}else if("right"===i){const t=this._getYAxisLabelAlignment(h);w=t.textAlign,x=t.x}else if("x"===e){if("center"===i)_=(t.top+t.bottom)/2+d;else if(R(i)){const t=Object.keys(i)[0],e=i[t];_=this.chart.scales[t].getPixelForValue(e)+d}w=this._getXAxisLabelAlignment()}else if("y"===e){if("center"===i)x=(t.left+t.right)/2-d;else if(R(i)){const t=Object.keys(i)[0],e=i[t];x=this.chart.scales[t].getPixelForValue(e)}w=this._getYAxisLabelAlignment(h).textAlign}"y"===e&&("start"===a?M="top":"end"===a&&(M="bottom"));const P=this._getLabelSizes();for(m=0,b=s.length;m<b;++m){y=s[m],v=y.label;const t=r.setContext(this.getContext(m));k=this.getPixelForTick(m)+r.labelOffset,A=this._resolveTickFontOptions(m),C=A.lineHeight,S=L(v)?v.length:1;const e=S/2,n=t.color,a=t.textStrokeColor,c=t.textStrokeWidth;let h;if(o?(x=k,E="top"===i?"near"===l||0!==p?-S*C+C/2:"center"===l?-P.highest.height/2-e*C+C:-P.highest.height+C/2:"near"===l||0!==p?C/2:"center"===l?P.highest.height/2-e*C:P.highest.height-S*C,u&&(E*=-1)):(_=k,E=(1-S)*C/2),t.showLabelBackdrop){const e=Oe(t.backdropPadding),n=P.heights[m],i=P.widths[m];let r=_+E-e.top,o=x-e.left;switch(M){case"middle":r-=n/2;break;case"bottom":r-=n}switch(w){case"center":o-=i/2;break;case"right":o-=i}h={left:o,top:r,width:i+e.width,height:n+e.height,color:t.backdropColor}}g.push({rotation:p,label:v,font:A,color:n,strokeColor:a,strokeWidth:c,textOffset:E,textAlign:w,textBaseline:M,translation:[x,_],backdrop:h})}return g}_getXAxisLabelAlignment(){const{position:t,ticks:e}=this.options;if(-pt(this.labelRotation))return"top"===t?"left":"right";let n="center";return"start"===e.align?n="left":"end"===e.align&&(n="right"),n}_getYAxisLabelAlignment(t){const{position:e,ticks:{crossAlign:n,mirror:i,padding:r}}=this.options,o=t+r,s=this._getLabelSizes().widest.width;let a,l;return"left"===e?i?(l=this.right+r,"near"===n?a="left":"center"===n?(a="center",l+=s/2):(a="right",l+=s)):(l=this.right-o,"near"===n?a="right":"center"===n?(a="center",l-=s/2):(a="left",l=this.left)):"right"===e?i?(l=this.left+r,"near"===n?a="right":"center"===n?(a="center",l-=s/2):(a="left",l-=s)):(l=this.left+o,"near"===n?a="left":"center"===n?(a="center",l+=s/2):(a="right",l=this.right)):a="right",{textAlign:a,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const t=this.chart,e=this.options.position;return"left"===e||"right"===e?{top:0,left:this.left,bottom:t.height,right:this.right}:"top"===e||"bottom"===e?{top:this.top,left:0,bottom:this.bottom,right:t.width}:void 0}drawBackground(){const{ctx:t,options:{backgroundColor:e},left:n,top:i,width:r,height:o}=this;e&&(t.save(),t.fillStyle=e,t.fillRect(n,i,r,o),t.restore())}getLineWidthForValue(t){const e=this.options.grid;if(!this._isVisible()||!e.display)return 0;const n=this.ticks.findIndex((e=>e.value===t));return n>=0?e.setContext(this.getContext(n)).lineWidth:0}drawGrid(t){const e=this.options.grid,n=this.ctx,i=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(t));let r,o;const s=(t,e,i)=>{i.width&&i.color&&(n.save(),n.lineWidth=i.width,n.strokeStyle=i.color,n.setLineDash(i.borderDash||[]),n.lineDashOffset=i.borderDashOffset,n.beginPath(),n.moveTo(t.x,t.y),n.lineTo(e.x,e.y),n.stroke(),n.restore())};if(e.display)for(r=0,o=i.length;r<o;++r){const t=i[r];e.drawOnChartArea&&s({x:t.x1,y:t.y1},{x:t.x2,y:t.y2},t),e.drawTicks&&s({x:t.tx1,y:t.ty1},{x:t.tx2,y:t.ty2},{color:t.tickColor,width:t.tickWidth,borderDash:t.tickBorderDash,borderDashOffset:t.tickBorderDashOffset})}}drawBorder(){const{chart:t,ctx:e,options:{grid:n}}=this,i=n.setContext(this.getContext()),r=n.drawBorder?i.borderWidth:0;if(!r)return;const o=n.setContext(this.getContext(0)).lineWidth,s=this._borderValue;let a,l,c,u;this.isHorizontal()?(a=fe(t,this.left,r)-r/2,l=fe(t,this.right,o)+o/2,c=u=s):(c=fe(t,this.top,r)-r/2,u=fe(t,this.bottom,o)+o/2,a=l=s),e.save(),e.lineWidth=i.borderWidth,e.strokeStyle=i.borderColor,e.beginPath(),e.moveTo(a,c),e.lineTo(l,u),e.stroke(),e.restore()}drawLabels(t){if(!this.options.ticks.display)return;const e=this.ctx,n=this._computeLabelArea();n&&be(e,n);const i=this._labelItems||(this._labelItems=this._computeLabelItems(t));let r,o;for(r=0,o=i.length;r<o;++r){const t=i[r],n=t.font,o=t.label;t.backdrop&&(e.fillStyle=t.backdrop.color,e.fillRect(t.backdrop.left,t.backdrop.top,t.backdrop.width,t.backdrop.height)),_e(e,o,0,t.textOffset,n,t)}n&&ye(e)}drawTitle(){const{ctx:t,options:{position:e,title:n,reverse:i}}=this;if(!n.display)return;const r=Te(n.font),o=Oe(n.padding),s=n.align;let a=r.lineHeight/2;"bottom"===e||"center"===e||R(e)?(a+=o.bottom,L(n.text)&&(a+=r.lineHeight*(n.text.length-1))):a+=o.top;const{titleX:l,titleY:c,maxWidth:u,rotation:h}=function(t,e,n,i){const{top:r,left:o,bottom:s,right:a,chart:l}=t,{chartArea:c,scales:u}=l;let h,d,f,p=0;const g=s-r,m=a-o;if(t.isHorizontal()){if(d=P(i,o,a),R(n)){const t=Object.keys(n)[0],i=n[t];f=u[t].getPixelForValue(i)+g-e}else f="center"===n?(c.bottom+c.top)/2+g-e:tr(t,n,e);h=a-o}else{if(R(n)){const t=Object.keys(n)[0],i=n[t];d=u[t].getPixelForValue(i)-m+e}else d="center"===n?(c.left+c.right)/2-m+e:tr(t,n,e);f=P(i,s,r),p="left"===n?-ot:ot}return{titleX:d,titleY:f,maxWidth:h,rotation:p}}(this,a,e,s);_e(t,n.text,0,0,r,{color:n.color,maxWidth:u,rotation:h,textAlign:or(s,e,i),textBaseline:"middle",translation:[l,c]})}draw(t){this._isVisible()&&(this.drawBackground(),this.drawGrid(t),this.drawBorder(),this.drawTitle(),this.drawLabels(t))}_layers(){const t=this.options,e=t.ticks&&t.ticks.z||0,n=N(t.grid&&t.grid.z,-1);return this._isVisible()&&this.draw===sr.prototype.draw?[{z:n,draw:t=>{this.drawBackground(),this.drawGrid(t),this.drawTitle()}},{z:n+1,draw:()=>{this.drawBorder()}},{z:e,draw:t=>{this.drawLabels(t)}}]:[{z:e,draw:t=>{this.draw(t)}}]}getMatchingVisibleMetas(t){const e=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",i=[];let r,o;for(r=0,o=e.length;r<o;++r){const o=e[r];o[n]!==this.id||t&&o.type!==t||i.push(o)}return i}_resolveTickFontOptions(t){return Te(this.options.ticks.setContext(this.getContext(t)).font)}_maxDigits(){const t=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/t}}class ar{constructor(t,e,n){this.type=t,this.scope=e,this.override=n,this.items=Object.create(null)}isForType(t){return Object.prototype.isPrototypeOf.call(this.type.prototype,t.prototype)}register(t){const e=Object.getPrototypeOf(t);let n;(function(t){return"id"in t&&"defaults"in t})(e)&&(n=this.register(e));const i=this.items,r=t.id,o=this.scope+"."+r;if(!r)throw new Error("class does not have id: "+t);return r in i||(i[r]=t,function(t,e,n){const i=$(Object.create(null),[n?ue.get(n):{},ue.get(e),t.defaults]);ue.set(e,i),t.defaultRoutes&&function(t,e){Object.keys(e).forEach((n=>{const i=n.split("."),r=i.pop(),o=[t].concat(i).join("."),s=e[n].split("."),a=s.pop(),l=s.join(".");ue.route(o,r,l,a)}))}(e,t.defaultRoutes),t.descriptors&&ue.describe(e,t.descriptors)}(t,o,n),this.override&&ue.override(t.id,t.overrides)),o}get(t){return this.items[t]}unregister(t){const e=this.items,n=t.id,i=this.scope;n in e&&delete e[n],i&&n in ue[i]&&(delete ue[i][n],this.override&&delete se[n])}}var lr=new class{constructor(){this.controllers=new ar(Qn,"datasets",!0),this.elements=new ar(Ki,"elements"),this.plugins=new ar(Object,"plugins"),this.scales=new ar(sr,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...t){this._each("register",t)}remove(...t){this._each("unregister",t)}addControllers(...t){this._each("register",t,this.controllers)}addElements(...t){this._each("register",t,this.elements)}addPlugins(...t){this._each("register",t,this.plugins)}addScales(...t){this._each("register",t,this.scales)}getController(t){return this._get(t,this.controllers,"controller")}getElement(t){return this._get(t,this.elements,"element")}getPlugin(t){return this._get(t,this.plugins,"plugin")}getScale(t){return this._get(t,this.scales,"scale")}removeControllers(...t){this._each("unregister",t,this.controllers)}removeElements(...t){this._each("unregister",t,this.elements)}removePlugins(...t){this._each("unregister",t,this.plugins)}removeScales(...t){this._each("unregister",t,this.scales)}_each(t,e,n){[...e].forEach((e=>{const i=n||this._getRegistryForType(e);n||i.isForType(e)||i===this.plugins&&e.id?this._exec(t,i,e):j(e,(e=>{const i=n||this._getRegistryForType(e);this._exec(t,i,e)}))}))}_exec(t,e,n){const i=K(t);F(n["before"+i],[],n),e[t](n),F(n["after"+i],[],n)}_getRegistryForType(t){for(let e=0;e<this._typedRegistries.length;e++){const n=this._typedRegistries[e];if(n.isForType(t))return n}return this.plugins}_get(t,e,n){const i=e.get(t);if(void 0===i)throw new Error('"'+t+'" is not a registered '+n+".");return i}};class cr{constructor(){this._init=[]}notify(t,e,n,i){"beforeInit"===e&&(this._init=this._createDescriptors(t,!0),this._notify(this._init,t,"install"));const r=i?this._descriptors(t).filter(i):this._descriptors(t),o=this._notify(r,t,e,n);return"afterDestroy"===e&&(this._notify(r,t,"stop"),this._notify(this._init,t,"uninstall")),o}_notify(t,e,n,i){i=i||{};for(const r of t){const t=r.plugin;if(!1===F(t[n],[e,i,r.options],t)&&i.cancelable)return!1}return!0}invalidate(){D(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(t){if(this._cache)return this._cache;const e=this._cache=this._createDescriptors(t);return this._notifyStateChanges(t),e}_createDescriptors(t,e){const n=t&&t.config,i=N(n.options&&n.options.plugins,{}),r=function(t){const e=[],n=Object.keys(lr.plugins.items);for(let t=0;t<n.length;t++)e.push(lr.getPlugin(n[t]));const i=t.plugins||[];for(let t=0;t<i.length;t++){const n=i[t];-1===e.indexOf(n)&&e.push(n)}return e}(n);return!1!==i||e?function(t,e,n,i){const r=[],o=t.getContext();for(let s=0;s<e.length;s++){const a=e[s],l=ur(n[a.id],i);null!==l&&r.push({plugin:a,options:hr(t.config,a,l,o)})}return r}(t,r,i,e):[]}_notifyStateChanges(t){const e=this._oldCache||[],n=this._cache,i=(t,e)=>t.filter((t=>!e.some((e=>t.plugin.id===e.plugin.id))));this._notify(i(e,n),t,"stop"),this._notify(i(n,e),t,"start")}}function ur(t,e){return e||!1!==t?!0===t?{}:t:null}function hr(t,e,n,i){const r=t.pluginScopeKeys(e),o=t.getOptionScopes(n,r);return t.createResolver(o,i,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function dr(t,e){const n=ue.datasets[t]||{};return((e.datasets||{})[t]||{}).indexAxis||e.indexAxis||n.indexAxis||"x"}function fr(t,e){return"x"===t||"y"===t?t:e.axis||("top"===(n=e.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||t.charAt(0).toLowerCase();var n}function pr(t){const e=t.options||(t.options={});e.plugins=N(e.plugins,{}),e.scales=function(t,e){const n=se[t.type]||{scales:{}},i=e.scales||{},r=dr(t.type,e),o=Object.create(null),s=Object.create(null);return Object.keys(i).forEach((t=>{const e=i[t];if(!R(e))return console.error(`Invalid scale configuration for scale: ${t}`);if(e._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const a=fr(t,e),l=function(t,e){return t===e?"_index_":"_value_"}(a,r),c=n.scales||{};o[a]=o[a]||t,s[t]=Y(Object.create(null),[{axis:a},e,c[a],c[l]])})),t.data.datasets.forEach((n=>{const r=n.type||t.type,a=n.indexAxis||dr(r,e),l=(se[r]||{}).scales||{};Object.keys(l).forEach((t=>{const e=function(t,e){let n=t;return"_index_"===t?n=e:"_value_"===t&&(n="x"===e?"y":"x"),n}(t,a),r=n[e+"AxisID"]||o[e]||e;s[r]=s[r]||Object.create(null),Y(s[r],[{axis:e},i[r],l[t]])}))})),Object.keys(s).forEach((t=>{const e=s[t];Y(e,[ue.scales[e.type],ue.scale])})),s}(t,e)}function gr(t){return(t=t||{}).datasets=t.datasets||[],t.labels=t.labels||[],t}const mr=new Map,br=new Set;function yr(t,e){let n=mr.get(t);return n||(n=e(),mr.set(t,n),br.add(n)),n}const vr=(t,e,n)=>{const i=X(e,n);void 0!==i&&t.add(i)};class xr{constructor(t){this._config=function(t){return(t=t||{}).data=gr(t.data),pr(t),t}(t),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(t){this._config.type=t}get data(){return this._config.data}set data(t){this._config.data=gr(t)}get options(){return this._config.options}set options(t){this._config.options=t}get plugins(){return this._config.plugins}update(){const t=this._config;this.clearCache(),pr(t)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(t){return yr(t,(()=>[[`datasets.${t}`,""]]))}datasetAnimationScopeKeys(t,e){return yr(`${t}.transition.${e}`,(()=>[[`datasets.${t}.transitions.${e}`,`transitions.${e}`],[`datasets.${t}`,""]]))}datasetElementScopeKeys(t,e){return yr(`${t}-${e}`,(()=>[[`datasets.${t}.elements.${e}`,`datasets.${t}`,`elements.${e}`,""]]))}pluginScopeKeys(t){const e=t.id;return yr(`${this.type}-plugin-${e}`,(()=>[[`plugins.${e}`,...t.additionalOptionScopes||[]]]))}_cachedScopes(t,e){const n=this._scopeCache;let i=n.get(t);return i&&!e||(i=new Map,n.set(t,i)),i}getOptionScopes(t,e,n){const{options:i,type:r}=this,o=this._cachedScopes(t,n),s=o.get(e);if(s)return s;const a=new Set;e.forEach((e=>{t&&(a.add(t),e.forEach((e=>vr(a,t,e)))),e.forEach((t=>vr(a,i,t))),e.forEach((t=>vr(a,se[r]||{},t))),e.forEach((t=>vr(a,ue,t))),e.forEach((t=>vr(a,ae,t)))}));const l=Array.from(a);return 0===l.length&&l.push(Object.create(null)),br.has(e)&&o.set(e,l),l}chartOptionScopes(){const{options:t,type:e}=this;return[t,se[e]||{},ue.datasets[e]||{},{type:e},ue,ae]}resolveNamedOptions(t,e,n,i=[""]){const r={$shared:!0},{resolver:o,subPrefixes:s}=_r(this._resolverCache,t,i);let a=o;(function(t,e){const{isScriptable:n,isIndexable:i}=We(t);for(const r of e){const e=n(r),o=i(r),s=(o||e)&&t[r];if(e&&(G(s)||wr(s))||o&&L(s))return!0}return!1})(o,e)&&(r.$shared=!1,a=Ve(o,n=G(n)?n():n,this.createResolver(t,n,s)));for(const t of e)r[t]=a[t];return r}createResolver(t,e,n=[""],i){const{resolver:r}=_r(this._resolverCache,t,n);return R(e)?Ve(r,e,void 0,i):r}}function _r(t,e,n){let i=t.get(e);i||(i=new Map,t.set(e,i));const r=n.join();let o=i.get(r);return o||(o={resolver:je(e,n),subPrefixes:n.filter((t=>!t.toLowerCase().includes("hover")))},i.set(r,o)),o}const wr=t=>R(t)&&Object.getOwnPropertyNames(t).reduce(((e,n)=>e||G(t[n])),!1),kr=["top","bottom","left","right","chartArea"];function Ar(t,e){return"top"===t||"bottom"===t||-1===kr.indexOf(t)&&"x"===e}function Cr(t,e){return function(n,i){return n[t]===i[t]?n[e]-i[e]:n[t]-i[t]}}function Sr(t){const e=t.chart,n=e.options.animation;e.notifyPlugins("afterRender"),F(n&&n.onComplete,[t],e)}function Er(t){const e=t.chart,n=e.options.animation;F(n&&n.onProgress,[t],e)}function Mr(t){return sn()&&"string"==typeof t?t=document.getElementById(t):t&&t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas),t}const Pr={},Or=t=>{const e=Mr(t);return Object.values(Pr).filter((t=>t.canvas===e)).pop()};function Tr(t,e,n){const i=Object.keys(t);for(const r of i){const i=+r;if(i>=e){const o=t[r];delete t[r],(n>0||i>e)&&(t[i+n]=o)}}}class Dr{constructor(t,e){const n=this.config=new xr(e),i=Mr(t),r=Or(i);if(r)throw new Error("Canvas is already in use. Chart with ID '"+r.id+"' must be destroyed before the canvas can be reused.");const o=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||function(t){return!sn()||"undefined"!=typeof OffscreenCanvas&&t instanceof OffscreenCanvas?Ii:Xi}(i)),this.platform.updateConfig(n);const s=this.platform.acquireContext(i,o.aspectRatio),a=s&&s.canvas,l=a&&a.height,c=a&&a.width;this.id=T(),this.ctx=s,this.canvas=a,this.width=c,this.height=l,this._options=o,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new cr,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=function(t,e){let n;return function(...i){return e?(clearTimeout(n),n=setTimeout(t,e,i)):t.apply(this,i),e}}((t=>this.update(t)),o.resizeDelay||0),this._dataChanges=[],Pr[this.id]=this,s&&a?(Tn.listen(this,"complete",Sr),Tn.listen(this,"progress",Er),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:t,maintainAspectRatio:e},width:n,height:i,_aspectRatio:r}=this;return D(t)?e&&r?r:i?n/i:null:t}get data(){return this.config.data}set data(t){this.config.data=t}get options(){return this._options}set options(t){this.config.options=t}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():pn(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return pe(this.canvas,this.ctx),this}stop(){return Tn.stop(this),this}resize(t,e){Tn.running(this)?this._resizeBeforeDraw={width:t,height:e}:this._resize(t,e)}_resize(t,e){const n=this.options,i=this.canvas,r=n.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(i,t,e,r),s=n.devicePixelRatio||this.platform.getDevicePixelRatio(),a=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,pn(this,s,!0)&&(this.notifyPlugins("resize",{size:o}),F(n.onResize,[this,o],this),this.attached&&this._doResize(a)&&this.render())}ensureScalesHaveIDs(){j(this.options.scales||{},((t,e)=>{t.id=e}))}buildOrUpdateScales(){const t=this.options,e=t.scales,n=this.scales,i=Object.keys(n).reduce(((t,e)=>(t[e]=!1,t)),{});let r=[];e&&(r=r.concat(Object.keys(e).map((t=>{const n=e[t],i=fr(t,n),r="r"===i,o="x"===i;return{options:n,dposition:r?"chartArea":o?"bottom":"left",dtype:r?"radialLinear":o?"category":"linear"}})))),j(r,(e=>{const r=e.options,o=r.id,s=fr(o,r),a=N(r.type,e.dtype);void 0!==r.position&&Ar(r.position,s)===Ar(e.dposition)||(r.position=e.dposition),i[o]=!0;let l=null;o in n&&n[o].type===a?l=n[o]:(l=new(lr.getScale(a))({id:o,type:a,ctx:this.ctx,chart:this}),n[l.id]=l),l.init(r,t)})),j(i,((t,e)=>{t||delete n[e]})),j(n,(t=>{Li.configure(this,t,t.options),Li.addBox(this,t)}))}_updateMetasets(){const t=this._metasets,e=this.data.datasets.length,n=t.length;if(t.sort(((t,e)=>t.index-e.index)),n>e){for(let t=e;t<n;++t)this._destroyDatasetMeta(t);t.splice(e,n-e)}this._sortedMetasets=t.slice(0).sort(Cr("order","index"))}_removeUnreferencedMetasets(){const{_metasets:t,data:{datasets:e}}=this;t.length>e.length&&delete this._stacks,t.forEach(((t,n)=>{0===e.filter((e=>e===t._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const t=[],e=this.data.datasets;let n,i;for(this._removeUnreferencedMetasets(),n=0,i=e.length;n<i;n++){const i=e[n];let r=this.getDatasetMeta(n);const o=i.type||this.config.type;if(r.type&&r.type!==o&&(this._destroyDatasetMeta(n),r=this.getDatasetMeta(n)),r.type=o,r.indexAxis=i.indexAxis||dr(o,this.options),r.order=i.order||0,r.index=n,r.label=""+i.label,r.visible=this.isDatasetVisible(n),r.controller)r.controller.updateIndex(n),r.controller.linkScales();else{const e=lr.getController(o),{datasetElementType:i,dataElementType:s}=ue.datasets[o];Object.assign(e.prototype,{dataElementType:lr.getElement(s),datasetElementType:i&&lr.getElement(i)}),r.controller=new e(this,n),t.push(r.controller)}}return this._updateMetasets(),t}_resetElements(){j(this.data.datasets,((t,e)=>{this.getDatasetMeta(e).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(t){const e=this.config;e.update();const n=this._options=e.createResolver(e.chartOptionScopes(),this.getContext()),i=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:t,cancelable:!0}))return;const r=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let t=0,e=this.data.datasets.length;t<e;t++){const{controller:e}=this.getDatasetMeta(t),n=!i&&-1===r.indexOf(e);e.buildOrUpdateElements(n),o=Math.max(+e.getMaxOverflow(),o)}o=this._minPadding=n.layout.autoPadding?o:0,this._updateLayout(o),i||j(r,(t=>{t.reset()})),this._updateDatasets(t),this.notifyPlugins("afterUpdate",{mode:t}),this._layers.sort(Cr("z","_idx"));const{_active:s,_lastEvent:a}=this;a?this._eventHandler(a,!0):s.length&&this._updateHoverStyles(s,s,!0),this.render()}_updateScales(){j(this.scales,(t=>{Li.removeBox(this,t)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const t=this.options,e=new Set(Object.keys(this._listeners)),n=new Set(t.events);J(e,n)&&!!this._responsiveListeners===t.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:t}=this,e=this._getUniformDataChanges()||[];for(const{method:n,start:i,count:r}of e)Tr(t,i,"_removeElements"===n?-r:r)}_getUniformDataChanges(){const t=this._dataChanges;if(!t||!t.length)return;this._dataChanges=[];const e=this.data.datasets.length,n=e=>new Set(t.filter((t=>t[0]===e)).map(((t,e)=>e+","+t.splice(1).join(",")))),i=n(0);for(let t=1;t<e;t++)if(!J(i,n(t)))return;return Array.from(i).map((t=>t.split(","))).map((t=>({method:t[1],start:+t[2],count:+t[3]})))}_updateLayout(t){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;Li.update(this,this.width,this.height,t);const e=this.chartArea,n=e.width<=0||e.height<=0;this._layers=[],j(this.boxes,(t=>{n&&"chartArea"===t.position||(t.configure&&t.configure(),this._layers.push(...t._layers()))}),this),this._layers.forEach(((t,e)=>{t._idx=e})),this.notifyPlugins("afterLayout")}_updateDatasets(t){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:t,cancelable:!0})){for(let t=0,e=this.data.datasets.length;t<e;++t)this.getDatasetMeta(t).controller.configure();for(let e=0,n=this.data.datasets.length;e<n;++e)this._updateDataset(e,G(t)?t({datasetIndex:e}):t);this.notifyPlugins("afterDatasetsUpdate",{mode:t})}}_updateDataset(t,e){const n=this.getDatasetMeta(t),i={meta:n,index:t,mode:e,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",i)&&(n.controller._update(e),i.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",i))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(Tn.has(this)?this.attached&&!Tn.running(this)&&Tn.start(this):(this.draw(),Sr({chart:this})))}draw(){let t;if(this._resizeBeforeDraw){const{width:t,height:e}=this._resizeBeforeDraw;this._resize(t,e),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const e=this._layers;for(t=0;t<e.length&&e[t].z<=0;++t)e[t].draw(this.chartArea);for(this._drawDatasets();t<e.length;++t)e[t].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(t){const e=this._sortedMetasets,n=[];let i,r;for(i=0,r=e.length;i<r;++i){const r=e[i];t&&!r.visible||n.push(r)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const t=this.getSortedVisibleDatasetMetas();for(let e=t.length-1;e>=0;--e)this._drawDataset(t[e]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(t){const e=this.ctx,n=t._clip,i=!n.disabled,r=this.chartArea,o={meta:t,index:t.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(i&&be(e,{left:!1===n.left?0:r.left-n.left,right:!1===n.right?this.width:r.right+n.right,top:!1===n.top?0:r.top-n.top,bottom:!1===n.bottom?this.height:r.bottom+n.bottom}),t.controller.draw(),i&&ye(e),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}getElementsAtEventForMode(t,e,n,i){const r=_i.modes[e];return"function"==typeof r?r(this,t,n,i):[]}getDatasetMeta(t){const e=this.data.datasets[t],n=this._metasets;let i=n.filter((t=>t&&t._dataset===e)).pop();return i||(i={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:e&&e.order||0,index:t,_dataset:e,_parsed:[],_sorted:!1},n.push(i)),i}getContext(){return this.$context||(this.$context=Le(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(t){const e=this.data.datasets[t];if(!e)return!1;const n=this.getDatasetMeta(t);return"boolean"==typeof n.hidden?!n.hidden:!e.hidden}setDatasetVisibility(t,e){this.getDatasetMeta(t).hidden=!e}toggleDataVisibility(t){this._hiddenIndices[t]=!this._hiddenIndices[t]}getDataVisibility(t){return!this._hiddenIndices[t]}_updateVisibility(t,e,n){const i=n?"show":"hide",r=this.getDatasetMeta(t),o=r.controller._resolveAnimations(void 0,i);Z(e)?(r.data[e].hidden=!n,this.update()):(this.setDatasetVisibility(t,n),o.update(r,{visible:n}),this.update((e=>e.datasetIndex===t?i:void 0)))}hide(t,e){this._updateVisibility(t,e,!1)}show(t,e){this._updateVisibility(t,e,!0)}_destroyDatasetMeta(t){const e=this._metasets[t];e&&e.controller&&e.controller._destroy(),delete this._metasets[t]}_stop(){let t,e;for(this.stop(),Tn.remove(this),t=0,e=this.data.datasets.length;t<e;++t)this._destroyDatasetMeta(t)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:t,ctx:e}=this;this._stop(),this.config.clearCache(),t&&(this.unbindEvents(),pe(t,e),this.platform.releaseContext(e),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete Pr[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...t){return this.canvas.toDataURL(...t)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const t=this._listeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(t,e,n)=>{t.offsetX=e,t.offsetY=n,this._eventHandler(t)};j(this.options.events,(t=>n(t,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const t=this._responsiveListeners,e=this.platform,n=(n,i)=>{e.addEventListener(this,n,i),t[n]=i},i=(n,i)=>{t[n]&&(e.removeEventListener(this,n,i),delete t[n])},r=(t,e)=>{this.canvas&&this.resize(t,e)};let o;const s=()=>{i("attach",s),this.attached=!0,this.resize(),n("resize",r),n("detach",o)};o=()=>{this.attached=!1,i("resize",r),this._stop(),this._resize(0,0),n("attach",s)},e.isAttached(this.canvas)?s():o()}unbindEvents(){j(this._listeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._listeners={},j(this._responsiveListeners,((t,e)=>{this.platform.removeEventListener(this,e,t)})),this._responsiveListeners=void 0}updateHoverStyle(t,e,n){const i=n?"set":"remove";let r,o,s,a;for("dataset"===e&&(r=this.getDatasetMeta(t[0].datasetIndex),r.controller["_"+i+"DatasetHoverStyle"]()),s=0,a=t.length;s<a;++s){o=t[s];const e=o&&this.getDatasetMeta(o.datasetIndex).controller;e&&e[i+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(t){const e=this._active||[],n=t.map((({datasetIndex:t,index:e})=>{const n=this.getDatasetMeta(t);if(!n)throw new Error("No dataset found at index "+t);return{datasetIndex:t,element:n.data[e],index:e}}));!V(n,e)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,e))}notifyPlugins(t,e,n){return this._plugins.notify(this,t,e,n)}_updateHoverStyles(t,e,n){const i=this.options.hover,r=(t,e)=>t.filter((t=>!e.some((e=>t.datasetIndex===e.datasetIndex&&t.index===e.index)))),o=r(e,t),s=n?t:r(t,e);o.length&&this.updateHoverStyle(o,i.mode,!1),s.length&&i.mode&&this.updateHoverStyle(s,i.mode,!0)}_eventHandler(t,e){const n={event:t,replay:e,cancelable:!0,inChartArea:me(t,this.chartArea,this._minPadding)},i=e=>(e.options.events||this.options.events).includes(t.native.type);if(!1===this.notifyPlugins("beforeEvent",n,i))return;const r=this._handleEvent(t,e,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,i),(r||n.changed)&&this.render(),this}_handleEvent(t,e,n){const{_active:i=[],options:r}=this,o=e,s=this._getActiveElements(t,i,n,o),a=function(t){return"mouseup"===t.type||"click"===t.type||"contextmenu"===t.type}(t),l=function(t,e,n,i){return n&&"mouseout"!==t.type?i?e:t:null}(t,this._lastEvent,n,a);n&&(this._lastEvent=null,F(r.onHover,[t,s,this],this),a&&F(r.onClick,[t,s,this],this));const c=!V(s,i);return(c||e)&&(this._active=s,this._updateHoverStyles(s,i,e)),this._lastEvent=l,c}_getActiveElements(t,e,n,i){if("mouseout"===t.type)return[];if(!n)return e;const r=this.options.hover;return this.getElementsAtEventForMode(t,r.mode,r,i)}}const Lr=()=>j(Dr.instances,(t=>t._plugins.invalidate())),Rr=!0;function Ir(t,e,n){const{startAngle:i,pixelMargin:r,x:o,y:s,outerRadius:a,innerRadius:l}=e;let c=r/a;t.beginPath(),t.arc(o,s,a,i-c,n+c),l>r?(c=r/l,t.arc(o,s,l,n+c,i-c,!0)):t.arc(o,s,r,n+ot,i-ot),t.closePath(),t.clip()}function Br(t,e,n,i){return{x:n+t*Math.cos(e),y:i+t*Math.sin(e)}}function Nr(t,e,n,i,r){const{x:o,y:s,startAngle:a,pixelMargin:l,innerRadius:c}=e,u=Math.max(e.outerRadius+i+n-l,0),h=c>0?c+i+n+l:0;let d=0;const f=r-a;if(i){const t=((c>0?c-i:0)+(u>0?u-i:0))/2;d=(f-(0!==t?f*t/(t+i):f))/2}const p=(f-Math.max(.001,f*u-n/tt)/u)/2,g=a+p+d,m=r-p-d,{outerStart:b,outerEnd:y,innerStart:v,innerEnd:x}=function(t,e,n,i){const r=Ee(t.options.borderRadius,["outerStart","outerEnd","innerStart","innerEnd"]),o=(n-e)/2,s=Math.min(o,i*e/2),a=t=>{const e=(n-Math.min(o,t))*i/2;return wt(t,0,Math.min(o,e))};return{outerStart:a(r.outerStart),outerEnd:a(r.outerEnd),innerStart:wt(r.innerStart,0,s),innerEnd:wt(r.innerEnd,0,s)}}(e,h,u,m-g),_=u-b,w=u-y,k=g+b/_,A=m-y/w,C=h+v,S=h+x,E=g+v/C,M=m-x/S;if(t.beginPath(),t.arc(o,s,u,k,A),y>0){const e=Br(w,A,o,s);t.arc(e.x,e.y,y,A,m+ot)}const P=Br(S,m,o,s);if(t.lineTo(P.x,P.y),x>0){const e=Br(S,M,o,s);t.arc(e.x,e.y,x,m+ot,M+Math.PI)}if(t.arc(o,s,h,m-x/h,g+v/h,!0),v>0){const e=Br(C,E,o,s);t.arc(e.x,e.y,v,E+Math.PI,g-ot)}const O=Br(_,g,o,s);if(t.lineTo(O.x,O.y),b>0){const e=Br(_,k,o,s);t.arc(e.x,e.y,b,g-ot,k)}t.closePath()}Object.defineProperties(Dr,{defaults:{enumerable:Rr,value:ue},instances:{enumerable:Rr,value:Pr},overrides:{enumerable:Rr,value:se},registry:{enumerable:Rr,value:lr},version:{enumerable:Rr,value:"3.7.1"},getChart:{enumerable:Rr,value:Or},register:{enumerable:Rr,value:(...t)=>{lr.add(...t),Lr()}},unregister:{enumerable:Rr,value:(...t)=>{lr.remove(...t),Lr()}}});class zr extends Ki{constructor(t){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.getProps(["x","y"],n),{angle:r,distance:o}=bt(i,{x:t,y:e}),{startAngle:s,endAngle:a,innerRadius:l,outerRadius:c,circumference:u}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),h=this.options.spacing/2,d=N(u,a-s)>=et||_t(r,s,a),f=kt(o,l+h,c+h);return d&&f}getCenterPoint(t){const{x:e,y:n,startAngle:i,endAngle:r,innerRadius:o,outerRadius:s}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],t),{offset:a,spacing:l}=this.options,c=(i+r)/2,u=(o+s+l+a)/2;return{x:e+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(t){return this.getCenterPoint(t)}draw(t){const{options:e,circumference:n}=this,i=(e.offset||0)/2,r=(e.spacing||0)/2;if(this.pixelMargin="inner"===e.borderAlign?.33:0,this.fullCircles=n>et?Math.floor(n/et):0,0===n||this.innerRadius<0||this.outerRadius<0)return;t.save();let o=0;if(i){o=i/2;const e=(this.startAngle+this.endAngle)/2;t.translate(Math.cos(e)*o,Math.sin(e)*o),this.circumference>=tt&&(o=i)}t.fillStyle=e.backgroundColor,t.strokeStyle=e.borderColor;const s=function(t,e,n,i){const{fullCircles:r,startAngle:o,circumference:s}=e;let a=e.endAngle;if(r){Nr(t,e,n,i,o+et);for(let e=0;e<r;++e)t.fill();isNaN(s)||(a=o+s%et,s%et==0&&(a+=et))}return Nr(t,e,n,i,a),t.fill(),a}(t,this,o,r);(function(t,e,n,i,r){const{options:o}=e,{borderWidth:s,borderJoinStyle:a}=o,l="inner"===o.borderAlign;s&&(l?(t.lineWidth=2*s,t.lineJoin=a||"round"):(t.lineWidth=s,t.lineJoin=a||"bevel"),e.fullCircles&&function(t,e,n){const{x:i,y:r,startAngle:o,pixelMargin:s,fullCircles:a}=e,l=Math.max(e.outerRadius-s,0),c=e.innerRadius+s;let u;for(n&&Ir(t,e,o+et),t.beginPath(),t.arc(i,r,c,o+et,o,!0),u=0;u<a;++u)t.stroke();for(t.beginPath(),t.arc(i,r,l,o,o+et),u=0;u<a;++u)t.stroke()}(t,e,l),l&&Ir(t,e,r),Nr(t,e,n,i,r),t.stroke())})(t,this,o,r,s),t.restore()}}function Fr(t,e,n=e){t.lineCap=N(n.borderCapStyle,e.borderCapStyle),t.setLineDash(N(n.borderDash,e.borderDash)),t.lineDashOffset=N(n.borderDashOffset,e.borderDashOffset),t.lineJoin=N(n.borderJoinStyle,e.borderJoinStyle),t.lineWidth=N(n.borderWidth,e.borderWidth),t.strokeStyle=N(n.borderColor,e.borderColor)}function jr(t,e,n){t.lineTo(n.x,n.y)}function Vr(t,e,n={}){const i=t.length,{start:r=0,end:o=i-1}=n,{start:s,end:a}=e,l=Math.max(r,s),c=Math.min(o,a),u=r<s&&o<s||r>a&&o>a;return{count:i,start:l,loop:e.loop,ilen:c<l&&!u?i+c-l:c-l}}function Wr(t,e,n,i){const{points:r,options:o}=e,{count:s,start:a,loop:l,ilen:c}=Vr(r,n,i),u=function(t){return t.stepped?ve:t.tension||"monotone"===t.cubicInterpolationMode?xe:jr}(o);let h,d,f,{move:p=!0,reverse:g}=i||{};for(h=0;h<=c;++h)d=r[(a+(g?c-h:h))%s],d.skip||(p?(t.moveTo(d.x,d.y),p=!1):u(t,f,d,g,o.stepped),f=d);return l&&(d=r[(a+(g?c:0))%s],u(t,f,d,g,o.stepped)),!!l}function Hr(t,e,n,i){const r=e.points,{count:o,start:s,ilen:a}=Vr(r,n,i),{move:l=!0,reverse:c}=i||{};let u,h,d,f,p,g,m=0,b=0;const y=t=>(s+(c?a-t:t))%o,v=()=>{f!==p&&(t.lineTo(m,p),t.lineTo(m,f),t.lineTo(m,g))};for(l&&(h=r[y(0)],t.moveTo(h.x,h.y)),u=0;u<=a;++u){if(h=r[y(u)],h.skip)continue;const e=h.x,n=h.y,i=0|e;i===d?(n<f?f=n:n>p&&(p=n),m=(b*m+e)/++b):(v(),t.lineTo(e,n),d=i,b=0,f=p=n),g=n}v()}function Ur(t){const e=t.options,n=e.borderDash&&e.borderDash.length;return t._decimated||t._loop||e.tension||"monotone"===e.cubicInterpolationMode||e.stepped||n?Wr:Hr}zr.id="arc",zr.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0},zr.defaultRoutes={backgroundColor:"backgroundColor"};const $r="function"==typeof Path2D;class Yr extends Ki{constructor(t){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,t&&Object.assign(this,t)}updateControlPoints(t,e){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const i=n.spanGaps?this._loop:this._fullLoop;on(this._points,n,t,i,e),this._pointsUpdated=!0}}set points(t){this._points=t,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=function(t,e){const n=t.points,i=t.options.spanGaps,r=n.length;if(!r)return[];const o=!!t._loop,{start:s,end:a}=function(t,e,n,i){let r=0,o=e-1;if(n&&!i)for(;r<e&&!t[r].skip;)r++;for(;r<e&&t[r].skip;)r++;for(r%=e,n&&(o+=r);o>r&&t[o%e].skip;)o--;return o%=e,{start:r,end:o}}(n,r,o,i);return function(t,e,n,i){return i&&i.setContext&&n?function(t,e,n,i){const r=t._chart.getContext(),o=Pn(t.options),{_datasetIndex:s,options:{spanGaps:a}}=t,l=n.length,c=[];let u=o,h=e[0].start,d=h;function f(t,e,i,r){const o=a?-1:1;if(t!==e){for(t+=l;n[t%l].skip;)t-=o;for(;n[e%l].skip;)e+=o;t%l!=e%l&&(c.push({start:t%l,end:e%l,loop:i,style:r}),u=r,h=e%l)}}for(const t of e){h=a?h:t.start;let e,o=n[h%l];for(d=h+1;d<=t.end;d++){const a=n[d%l];e=Pn(i.setContext(Le(r,{type:"segment",p0:o,p1:a,p0DataIndex:(d-1)%l,p1DataIndex:d%l,datasetIndex:s}))),On(e,u)&&f(h,d-1,t.loop,u),o=a,u=e}h<d-1&&f(h,d-1,t.loop,u)}return c}(t,e,n,i):e}(t,!0===i?[{start:s,end:a,loop:o}]:function(t,e,n,i){const r=t.length,o=[];let s,a=e,l=t[e];for(s=e+1;s<=n;++s){const n=t[s%r];n.skip||n.stop?l.skip||(i=!1,o.push({start:e%r,end:(s-1)%r,loop:i}),e=a=n.stop?s:null):(a=s,l.skip&&(e=s)),l=n}return null!==a&&o.push({start:e%r,end:a%r,loop:i}),o}(n,s,a<s?a+r:a,!!t._fullLoop&&0===s&&a===r-1),n,e)}(this,this.options.segment))}first(){const t=this.segments,e=this.points;return t.length&&e[t[0].start]}last(){const t=this.segments,e=this.points,n=t.length;return n&&e[t[n-1].end]}interpolate(t,e){const n=this.options,i=t[e],r=this.points,o=Mn(this,{property:e,start:i,end:i});if(!o.length)return;const s=[],a=function(t){return t.stepped?yn:t.tension||"monotone"===t.cubicInterpolationMode?vn:bn}(n);let l,c;for(l=0,c=o.length;l<c;++l){const{start:c,end:u}=o[l],h=r[c],d=r[u];if(h===d){s.push(h);continue}const f=a(h,d,Math.abs((i-h[e])/(d[e]-h[e])),n.stepped);f[e]=t[e],s.push(f)}return 1===s.length?s[0]:s}pathSegment(t,e,n){return Ur(this)(t,this,e,n)}path(t,e,n){const i=this.segments,r=Ur(this);let o=this._loop;e=e||0,n=n||this.points.length-e;for(const s of i)o&=r(t,this,s,{start:e,end:e+n-1});return!!o}draw(t,e,n,i){const r=this.options||{};(this.points||[]).length&&r.borderWidth&&(t.save(),function(t,e,n,i){$r&&!e.options.segment?function(t,e,n,i){let r=e._path;r||(r=e._path=new Path2D,e.path(r,n,i)&&r.closePath()),Fr(t,e.options),t.stroke(r)}(t,e,n,i):function(t,e,n,i){const{segments:r,options:o}=e,s=Ur(e);for(const a of r)Fr(t,o,a.style),t.beginPath(),s(t,e,a,{start:n,end:n+i-1})&&t.closePath(),t.stroke()}(t,e,n,i)}(t,this,n,i),t.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function qr(t,e,n,i){const r=t.options,{[n]:o}=t.getProps([n],i);return Math.abs(e-o)<r.radius+r.hitRadius}Yr.id="line",Yr.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},Yr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},Yr.descriptors={_scriptable:!0,_indexable:t=>"borderDash"!==t&&"fill"!==t};class Qr extends Ki{constructor(t){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,t&&Object.assign(this,t)}inRange(t,e,n){const i=this.options,{x:r,y:o}=this.getProps(["x","y"],n);return Math.pow(t-r,2)+Math.pow(e-o,2)<Math.pow(i.hitRadius+i.radius,2)}inXRange(t,e){return qr(this,t,"x",e)}inYRange(t,e){return qr(this,t,"y",e)}getCenterPoint(t){const{x:e,y:n}=this.getProps(["x","y"],t);return{x:e,y:n}}size(t){let e=(t=t||this.options||{}).radius||0;return e=Math.max(e,e&&t.hoverRadius||0),2*(e+(e&&t.borderWidth||0))}draw(t,e){const n=this.options;this.skip||n.radius<.1||!me(this,e,this.size(n)/2)||(t.strokeStyle=n.borderColor,t.lineWidth=n.borderWidth,t.fillStyle=n.backgroundColor,ge(t,n,this.x,this.y))}getRange(){const t=this.options||{};return t.radius+t.hitRadius}}function Xr(t,e){const{x:n,y:i,base:r,width:o,height:s}=t.getProps(["x","y","base","width","height"],e);let a,l,c,u,h;return t.horizontal?(h=s/2,a=Math.min(n,r),l=Math.max(n,r),c=i-h,u=i+h):(h=o/2,a=n-h,l=n+h,c=Math.min(i,r),u=Math.max(i,r)),{left:a,top:c,right:l,bottom:u}}function Kr(t,e,n,i){return t?0:wt(e,n,i)}function Zr(t,e,n,i){const r=null===e,o=null===n,s=t&&!(r&&o)&&Xr(t,i);return s&&(r||kt(e,s.left,s.right))&&(o||kt(n,s.top,s.bottom))}function Gr(t,e){t.rect(e.x,e.y,e.w,e.h)}function Jr(t,e,n={}){const i=t.x!==n.x?-e:0,r=t.y!==n.y?-e:0,o=(t.x+t.w!==n.x+n.w?e:0)-i,s=(t.y+t.h!==n.y+n.h?e:0)-r;return{x:t.x+i,y:t.y+r,w:t.w+o,h:t.h+s,radius:t.radius}}Qr.id="point",Qr.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},Qr.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class to extends Ki{constructor(t){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,t&&Object.assign(this,t)}draw(t){const{inflateAmount:e,options:{borderColor:n,backgroundColor:i}}=this,{inner:r,outer:o}=function(t){const e=Xr(t),n=e.right-e.left,i=e.bottom-e.top,r=function(t,e,n){const i=t.options.borderWidth,r=t.borderSkipped,o=Me(i);return{t:Kr(r.top,o.top,0,n),r:Kr(r.right,o.right,0,e),b:Kr(r.bottom,o.bottom,0,n),l:Kr(r.left,o.left,0,e)}}(t,n/2,i/2),o=function(t,e,n){const{enableBorderRadius:i}=t.getProps(["enableBorderRadius"]),r=t.options.borderRadius,o=Pe(r),s=Math.min(e,n),a=t.borderSkipped,l=i||R(r);return{topLeft:Kr(!l||a.top||a.left,o.topLeft,0,s),topRight:Kr(!l||a.top||a.right,o.topRight,0,s),bottomLeft:Kr(!l||a.bottom||a.left,o.bottomLeft,0,s),bottomRight:Kr(!l||a.bottom||a.right,o.bottomRight,0,s)}}(t,n/2,i/2);return{outer:{x:e.left,y:e.top,w:n,h:i,radius:o},inner:{x:e.left+r.l,y:e.top+r.t,w:n-r.l-r.r,h:i-r.t-r.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(r.t,r.l)),topRight:Math.max(0,o.topRight-Math.max(r.t,r.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(r.b,r.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(r.b,r.r))}}}}(this),s=(a=o.radius).topLeft||a.topRight||a.bottomLeft||a.bottomRight?ke:Gr;var a;t.save(),o.w===r.w&&o.h===r.h||(t.beginPath(),s(t,Jr(o,e,r)),t.clip(),s(t,Jr(r,-e,o)),t.fillStyle=n,t.fill("evenodd")),t.beginPath(),s(t,Jr(r,e)),t.fillStyle=i,t.fill(),t.restore()}inRange(t,e,n){return Zr(this,t,e,n)}inXRange(t,e){return Zr(this,t,null,e)}inYRange(t,e){return Zr(this,null,t,e)}getCenterPoint(t){const{x:e,y:n,base:i,horizontal:r}=this.getProps(["x","y","base","horizontal"],t);return{x:r?(e+i)/2:e,y:r?n:(n+i)/2}}getRange(t){return"x"===t?this.width/2:this.height/2}}to.id="bar",to.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},to.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var eo=Object.freeze({__proto__:null,ArcElement:zr,LineElement:Yr,PointElement:Qr,BarElement:to});function no(t){if(t._decimated){const e=t._data;delete t._decimated,delete t._data,Object.defineProperty(t,"data",{value:e})}}function io(t){t.data.datasets.forEach((t=>{no(t)}))}var ro={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(t,e,n)=>{if(!n.enabled)return void io(t);const i=t.width;t.data.datasets.forEach(((e,r)=>{const{_data:o,indexAxis:s}=e,a=t.getDatasetMeta(r),l=o||e.data;if("y"===De([s,t.options.indexAxis]))return;if("line"!==a.type)return;const c=t.scales[a.xAxisID];if("linear"!==c.type&&"time"!==c.type)return;if(t.options.parsing)return;let u,{start:h,count:d}=function(t,e){const n=e.length;let i,r=0;const{iScale:o}=t,{min:s,max:a,minDefined:l,maxDefined:c}=o.getUserBounds();return l&&(r=wt(Ie(e,o.axis,s).lo,0,n-1)),i=c?wt(Ie(e,o.axis,a).hi+1,r,n)-r:n-r,{start:r,count:i}}(a,l);if(d<=(n.threshold||4*i))no(e);else{switch(D(o)&&(e._data=l,delete e.data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(t){this._data=t}})),n.algorithm){case"lttb":u=function(t,e,n,i,r){const o=r.samples||i;if(o>=n)return t.slice(e,e+n);const s=[],a=(n-2)/(o-2);let l=0;const c=e+n-1;let u,h,d,f,p,g=e;for(s[l++]=t[g],u=0;u<o-2;u++){let i,r=0,o=0;const c=Math.floor((u+1)*a)+1+e,m=Math.min(Math.floor((u+2)*a)+1,n)+e,b=m-c;for(i=c;i<m;i++)r+=t[i].x,o+=t[i].y;r/=b,o/=b;const y=Math.floor(u*a)+1+e,v=Math.min(Math.floor((u+1)*a)+1,n)+e,{x:x,y:_}=t[g];for(d=f=-1,i=y;i<v;i++)f=.5*Math.abs((x-r)*(t[i].y-_)-(x-t[i].x)*(o-_)),f>d&&(d=f,h=t[i],p=i);s[l++]=h,g=p}return s[l++]=t[c],s}(l,h,d,i,n);break;case"min-max":u=function(t,e,n,i){let r,o,s,a,l,c,u,h,d,f,p=0,g=0;const m=[],b=e+n-1,y=t[e].x,v=t[b].x-y;for(r=e;r<e+n;++r){o=t[r],s=(o.x-y)/v*i,a=o.y;const e=0|s;if(e===l)a<d?(d=a,c=r):a>f&&(f=a,u=r),p=(g*p+o.x)/++g;else{const n=r-1;if(!D(c)&&!D(u)){const e=Math.min(c,u),i=Math.max(c,u);e!==h&&e!==n&&m.push({...t[e],x:p}),i!==h&&i!==n&&m.push({...t[i],x:p})}r>0&&n!==h&&m.push(t[n]),m.push(o),l=e,g=0,d=f=a,c=u=h=r}}return m}(l,h,d,i);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}e._decimated=u}}))},destroy(t){io(t)}};function oo(t,e,n){const i=function(t){const e=t.options,n=e.fill;let i=N(n&&n.target,n);return void 0===i&&(i=!!e.backgroundColor),!1!==i&&null!==i&&(!0===i?"origin":i)}(t);if(R(i))return!isNaN(i.value)&&i;let r=parseFloat(i);return I(r)&&Math.floor(r)===r?("-"!==i[0]&&"+"!==i[0]||(r=e+r),!(r===e||r<0||r>=n)&&r):["origin","start","end","stack","shape"].indexOf(i)>=0&&i}class so{constructor(t){this.x=t.x,this.y=t.y,this.radius=t.radius}pathSegment(t,e,n){const{x:i,y:r,radius:o}=this;return e=e||{start:0,end:et},t.arc(i,r,o,e.end,e.start,!0),!n.bounds}interpolate(t){const{x:e,y:n,radius:i}=this,r=t.angle;return{x:e+Math.cos(r)*i,y:n+Math.sin(r)*i,angle:r}}}function ao(t,e,n){for(;e>t;e--){const t=n[e];if(!isNaN(t.x)&&!isNaN(t.y))break}return e}function lo(t,e,n){const i=[];for(let r=0;r<n.length;r++){const o=n[r],{first:s,last:a,point:l}=co(o,e,"x");if(!(!l||s&&a))if(s)i.unshift(l);else if(t.push(l),!a)break}t.push(...i)}function co(t,e,n){const i=t.interpolate(e,n);if(!i)return{};const r=i[n],o=t.segments,s=t.points;let a=!1,l=!1;for(let t=0;t<o.length;t++){const e=o[t],i=s[e.start][n],c=s[e.end][n];if(kt(r,i,c)){a=r===i,l=r===c;break}}return{first:a,last:l,point:i}}function uo(t){const{chart:e,fill:n,line:i}=t;if(I(n))return function(t,e){const n=t.getDatasetMeta(e);return n&&t.isDatasetVisible(e)?n.dataset:null}(e,n);if("stack"===n)return function(t){const{scale:e,index:n,line:i}=t,r=[],o=i.segments,s=i.points,a=function(t,e){const n=[],i=t.getMatchingVisibleMetas("line");for(let t=0;t<i.length;t++){const r=i[t];if(r.index===e)break;r.hidden||n.unshift(r.dataset)}return n}(e,n);a.push(ho({x:null,y:e.bottom},i));for(let t=0;t<o.length;t++){const e=o[t];for(let t=e.start;t<=e.end;t++)lo(r,s[t],a)}return new Yr({points:r,options:{}})}(t);if("shape"===n)return!0;const r=function(t){return(t.scale||{}).getPointPositionForValue?function(t){const{scale:e,fill:n}=t,i=e.options,r=e.getLabels().length,o=[],s=i.reverse?e.max:e.min,a=i.reverse?e.min:e.max;let l,c,u;if(u="start"===n?s:"end"===n?a:R(n)?n.value:e.getBaseValue(),i.grid.circular)return c=e.getPointPositionForValue(0,s),new so({x:c.x,y:c.y,radius:e.getDistanceFromCenterForValue(u)});for(l=0;l<r;++l)o.push(e.getPointPositionForValue(l,u));return o}(t):function(t){const{scale:e={},fill:n}=t;let i,r=null;return"start"===n?r=e.bottom:"end"===n?r=e.top:R(n)?r=e.getPixelForValue(n.value):e.getBasePixel&&(r=e.getBasePixel()),I(r)?(i=e.isHorizontal(),{x:i?r:null,y:i?null:r}):null}(t)}(t);return r instanceof so?r:ho(r,i)}function ho(t,e){let n=[],i=!1;return L(t)?(i=!0,n=t):n=function(t,e){const{x:n=null,y:i=null}=t||{},r=e.points,o=[];return e.segments.forEach((({start:t,end:e})=>{e=ao(t,e,r);const s=r[t],a=r[e];null!==i?(o.push({x:s.x,y:i}),o.push({x:a.x,y:i})):null!==n&&(o.push({x:n,y:s.y}),o.push({x:n,y:a.y}))})),o}(t,e),n.length?new Yr({points:n,options:{tension:0},_loop:i,_fullLoop:i}):null}function fo(t,e,n){let i=t[e].fill;const r=[e];let o;if(!n)return i;for(;!1!==i&&-1===r.indexOf(i);){if(!I(i))return i;if(o=t[i],!o)return!1;if(o.visible)return i;r.push(i),i=o.fill}return!1}function po(t,e,n){const{segments:i,points:r}=e;let o=!0,s=!1;t.beginPath();for(const a of i){const{start:i,end:l}=a,c=r[i],u=r[ao(i,l,r)];o?(t.moveTo(c.x,c.y),o=!1):(t.lineTo(c.x,n),t.lineTo(c.x,c.y)),s=!!e.pathSegment(t,a,{move:s}),s?t.closePath():t.lineTo(u.x,n)}t.lineTo(e.first().x,n),t.closePath(),t.clip()}function go(t,e,n,i){if(i)return;let r=e[t],o=n[t];return"angle"===t&&(r=xt(r),o=xt(o)),{property:t,start:r,end:o}}function mo(t,e,n,i){return t&&e?i(t[n],e[n]):t?t[n]:e?e[n]:0}function bo(t,e,n){const{top:i,bottom:r}=e.chart.chartArea,{property:o,start:s,end:a}=n||{};"x"===o&&(t.beginPath(),t.rect(s,i,a-s,r-i),t.clip())}function yo(t,e,n,i){const r=e.interpolate(n,i);r&&t.lineTo(r.x,r.y)}function vo(t,e){const{line:n,target:i,property:r,color:o,scale:s}=e,a=function(t,e,n){const i=t.segments,r=t.points,o=e.points,s=[];for(const t of i){let{start:i,end:a}=t;a=ao(i,a,r);const l=go(n,r[i],r[a],t.loop);if(!e.segments){s.push({source:t,target:l,start:r[i],end:r[a]});continue}const c=Mn(e,l);for(const e of c){const i=go(n,o[e.start],o[e.end],e.loop),a=En(t,r,i);for(const t of a)s.push({source:t,target:e,start:{[n]:mo(l,i,"start",Math.max)},end:{[n]:mo(l,i,"end",Math.min)}})}}return s}(n,i,r);for(const{source:e,target:l,start:c,end:u}of a){const{style:{backgroundColor:a=o}={}}=e,h=!0!==i;t.save(),t.fillStyle=a,bo(t,s,h&&go(r,c,u)),t.beginPath();const d=!!n.pathSegment(t,e);let f;if(h){d?t.closePath():yo(t,i,u,r);const e=!!i.pathSegment(t,l,{move:d,reverse:!0});f=d&&e,f||yo(t,i,c,r)}t.closePath(),t.fill(f?"evenodd":"nonzero"),t.restore()}}function xo(t,e,n){const i=uo(e),{line:r,scale:o,axis:s}=e,a=r.options,l=a.fill,c=a.backgroundColor,{above:u=c,below:h=c}=l||{};i&&r.points.length&&(be(t,n),function(t,e){const{line:n,target:i,above:r,below:o,area:s,scale:a}=e,l=n._loop?"angle":e.axis;t.save(),"x"===l&&o!==r&&(po(t,i,s.top),vo(t,{line:n,target:i,color:r,scale:a,property:l}),t.restore(),t.save(),po(t,i,s.bottom)),vo(t,{line:n,target:i,color:o,scale:a,property:l}),t.restore()}(t,{line:r,target:i,above:u,below:h,area:n,scale:o,axis:s}),ye(t))}var _o={id:"filler",afterDatasetsUpdate(t,e,n){const i=(t.data.datasets||[]).length,r=[];let o,s,a,l;for(s=0;s<i;++s)o=t.getDatasetMeta(s),a=o.dataset,l=null,a&&a.options&&a instanceof Yr&&(l={visible:t.isDatasetVisible(s),index:s,fill:oo(a,s,i),chart:t,axis:o.controller.options.indexAxis,scale:o.vScale,line:a}),o.$filler=l,r.push(l);for(s=0;s<i;++s)l=r[s],l&&!1!==l.fill&&(l.fill=fo(r,s,n.propagate))},beforeDraw(t,e,n){const i="beforeDraw"===n.drawTime,r=t.getSortedVisibleDatasetMetas(),o=t.chartArea;for(let e=r.length-1;e>=0;--e){const n=r[e].$filler;n&&(n.line.updateControlPoints(o,n.axis),i&&xo(t.ctx,n,o))}},beforeDatasetsDraw(t,e,n){if("beforeDatasetsDraw"!==n.drawTime)return;const i=t.getSortedVisibleDatasetMetas();for(let e=i.length-1;e>=0;--e){const n=i[e].$filler;n&&xo(t.ctx,n,t.chartArea)}},beforeDatasetDraw(t,e,n){const i=e.meta.$filler;i&&!1!==i.fill&&"beforeDatasetDraw"===n.drawTime&&xo(t.ctx,i,t.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const wo=(t,e)=>{let{boxHeight:n=e,boxWidth:i=e}=t;return t.usePointStyle&&(n=Math.min(n,e),i=Math.min(i,e)),{boxWidth:i,boxHeight:n,itemHeight:Math.max(e,n)}};class ko extends Ki{constructor(t){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e,n){this.maxWidth=t,this.maxHeight=e,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const t=this.options.labels||{};let e=F(t.generateLabels,[this.chart],this)||[];t.filter&&(e=e.filter((e=>t.filter(e,this.chart.data)))),t.sort&&(e=e.sort(((e,n)=>t.sort(e,n,this.chart.data)))),this.options.reverse&&e.reverse(),this.legendItems=e}fit(){const{options:t,ctx:e}=this;if(!t.display)return void(this.width=this.height=0);const n=t.labels,i=Te(n.font),r=i.size,o=this._computeTitleHeight(),{boxWidth:s,itemHeight:a}=wo(n,r);let l,c;e.font=i.string,this.isHorizontal()?(l=this.maxWidth,c=this._fitRows(o,r,s,a)+10):(c=this.maxHeight,l=this._fitCols(o,r,s,a)+10),this.width=Math.min(l,t.maxWidth||this.maxWidth),this.height=Math.min(c,t.maxHeight||this.maxHeight)}_fitRows(t,e,n,i){const{ctx:r,maxWidth:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.lineWidths=[0],c=i+s;let u=t;r.textAlign="left",r.textBaseline="middle";let h=-1,d=-c;return this.legendItems.forEach(((t,f)=>{const p=n+e/2+r.measureText(t.text).width;(0===f||l[l.length-1]+p+2*s>o)&&(u+=c,l[l.length-(f>0?0:1)]=0,d+=c,h++),a[f]={left:0,top:d,row:h,width:p,height:i},l[l.length-1]+=p+s})),u}_fitCols(t,e,n,i){const{ctx:r,maxHeight:o,options:{labels:{padding:s}}}=this,a=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-t;let u=s,h=0,d=0,f=0,p=0;return this.legendItems.forEach(((t,o)=>{const g=n+e/2+r.measureText(t.text).width;o>0&&d+i+2*s>c&&(u+=h+s,l.push({width:h,height:d}),f+=h+s,p++,h=d=0),a[o]={left:f,top:d,col:p,width:g,height:i},h=Math.max(h,g),d+=i+s})),u+=h,l.push({width:h,height:d}),u}adjustHitBoxes(){if(!this.options.display)return;const t=this._computeTitleHeight(),{legendHitBoxes:e,options:{align:n,labels:{padding:i},rtl:r}}=this,o=wn(r,this.left,this.width);if(this.isHorizontal()){let r=0,s=P(n,this.left+i,this.right-this.lineWidths[r]);for(const a of e)r!==a.row&&(r=a.row,s=P(n,this.left+i,this.right-this.lineWidths[r])),a.top+=this.top+t+i,a.left=o.leftForLtr(o.x(s),a.width),s+=a.width+i}else{let r=0,s=P(n,this.top+t+i,this.bottom-this.columnSizes[r].height);for(const a of e)a.col!==r&&(r=a.col,s=P(n,this.top+t+i,this.bottom-this.columnSizes[r].height)),a.top=s,a.left+=this.left+i,a.left=o.leftForLtr(o.x(a.left),a.width),s+=a.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const t=this.ctx;be(t,this),this._draw(),ye(t)}}_draw(){const{options:t,columnSizes:e,lineWidths:n,ctx:i}=this,{align:r,labels:o}=t,s=ue.color,a=wn(t.rtl,this.left,this.width),l=Te(o.font),{color:c,padding:u}=o,h=l.size,d=h/2;let f;this.drawTitle(),i.textAlign=a.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=l.string;const{boxWidth:p,boxHeight:g,itemHeight:m}=wo(o,h),b=this.isHorizontal(),y=this._computeTitleHeight();f=b?{x:P(r,this.left+u,this.right-n[0]),y:this.top+u+y,line:0}:{x:this.left+u,y:P(r,this.top+y+u,this.bottom-e[0].height),line:0},kn(this.ctx,t.textDirection);const v=m+u;this.legendItems.forEach(((x,_)=>{i.strokeStyle=x.fontColor||c,i.fillStyle=x.fontColor||c;const w=i.measureText(x.text).width,k=a.textAlign(x.textAlign||(x.textAlign=o.textAlign)),A=p+d+w;let C=f.x,S=f.y;a.setWidth(this.width),b?_>0&&C+A+u>this.right&&(S=f.y+=v,f.line++,C=f.x=P(r,this.left+u,this.right-n[f.line])):_>0&&S+v>this.bottom&&(C=f.x=C+e[f.line].width+u,f.line++,S=f.y=P(r,this.top+y+u,this.bottom-e[f.line].height)),function(t,e,n){if(isNaN(p)||p<=0||isNaN(g)||g<0)return;i.save();const r=N(n.lineWidth,1);if(i.fillStyle=N(n.fillStyle,s),i.lineCap=N(n.lineCap,"butt"),i.lineDashOffset=N(n.lineDashOffset,0),i.lineJoin=N(n.lineJoin,"miter"),i.lineWidth=r,i.strokeStyle=N(n.strokeStyle,s),i.setLineDash(N(n.lineDash,[])),o.usePointStyle){const o={radius:p*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:r},s=a.xPlus(t,p/2);ge(i,o,s,e+d)}else{const o=e+Math.max((h-g)/2,0),s=a.leftForLtr(t,p),l=Pe(n.borderRadius);i.beginPath(),Object.values(l).some((t=>0!==t))?ke(i,{x:s,y:o,w:p,h:g,radius:l}):i.rect(s,o,p,g),i.fill(),0!==r&&i.stroke()}i.restore()}(a.x(C),S,x),C=((t,e,n,i)=>t===(i?"left":"right")?n:"center"===t?(e+n)/2:e)(k,C+p+d,b?C+A:this.right,t.rtl),function(t,e,n){_e(i,n.text,t,e+m/2,l,{strikethrough:n.hidden,textAlign:a.textAlign(n.textAlign)})}(a.x(C),S,x),b?f.x+=A+u:f.y+=v})),An(this.ctx,t.textDirection)}drawTitle(){const t=this.options,e=t.title,n=Te(e.font),i=Oe(e.padding);if(!e.display)return;const r=wn(t.rtl,this.left,this.width),o=this.ctx,s=e.position,a=n.size/2,l=i.top+a;let c,u=this.left,h=this.width;if(this.isHorizontal())h=Math.max(...this.lineWidths),c=this.top+l,u=P(t.align,u,this.right-h);else{const e=this.columnSizes.reduce(((t,e)=>Math.max(t,e.height)),0);c=l+P(t.align,this.top,this.bottom-e-t.labels.padding-this._computeTitleHeight())}const d=P(s,u,u+h);o.textAlign=r.textAlign(M(s)),o.textBaseline="middle",o.strokeStyle=e.color,o.fillStyle=e.color,o.font=n.string,_e(o,e.text,d,c,n)}_computeTitleHeight(){const t=this.options.title,e=Te(t.font),n=Oe(t.padding);return t.display?e.lineHeight+n.height:0}_getLegendItemAt(t,e){let n,i,r;if(kt(t,this.left,this.right)&&kt(e,this.top,this.bottom))for(r=this.legendHitBoxes,n=0;n<r.length;++n)if(i=r[n],kt(t,i.left,i.left+i.width)&&kt(e,i.top,i.top+i.height))return this.legendItems[n];return null}handleEvent(t){const e=this.options;if(!function(t,e){return!("mousemove"!==t||!e.onHover&&!e.onLeave)||!(!e.onClick||"click"!==t&&"mouseup"!==t)}(t.type,e))return;const n=this._getLegendItemAt(t.x,t.y);if("mousemove"===t.type){const o=this._hoveredItem,s=(r=n,null!==(i=o)&&null!==r&&i.datasetIndex===r.datasetIndex&&i.index===r.index);o&&!s&&F(e.onLeave,[t,o,this],this),this._hoveredItem=n,n&&!s&&F(e.onHover,[t,n,this],this)}else n&&F(e.onClick,[t,n,this],this);var i,r}}var Ao={id:"legend",_element:ko,start(t,e,n){const i=t.legend=new ko({ctx:t.ctx,options:n,chart:t});Li.configure(t,i,n),Li.addBox(t,i)},stop(t){Li.removeBox(t,t.legend),delete t.legend},beforeUpdate(t,e,n){const i=t.legend;Li.configure(t,i,n),i.options=n},afterUpdate(t){const e=t.legend;e.buildLabels(),e.adjustHitBoxes()},afterEvent(t,e){e.replay||t.legend.handleEvent(e.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(t,e,n){const i=e.datasetIndex,r=n.chart;r.isDatasetVisible(i)?(r.hide(i),e.hidden=!0):(r.show(i),e.hidden=!1)},onHover:null,onLeave:null,labels:{color:t=>t.chart.options.color,boxWidth:40,padding:10,generateLabels(t){const e=t.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:r,color:o}}=t.legend.options;return t._getSortedDatasetMetas().map((t=>{const s=t.controller.getStyle(n?0:void 0),a=Oe(s.borderWidth);return{text:e[t.index].label,fillStyle:s.backgroundColor,fontColor:o,hidden:!t.visible,lineCap:s.borderCapStyle,lineDash:s.borderDash,lineDashOffset:s.borderDashOffset,lineJoin:s.borderJoinStyle,lineWidth:(a.width+a.height)/4,strokeStyle:s.borderColor,pointStyle:i||s.pointStyle,rotation:s.rotation,textAlign:r||s.textAlign,borderRadius:0,datasetIndex:t.index}}),this)}},title:{color:t=>t.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:t=>!t.startsWith("on"),labels:{_scriptable:t=>!["generateLabels","filter","sort"].includes(t)}}};class Co extends Ki{constructor(t){super(),this.chart=t.chart,this.options=t.options,this.ctx=t.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(t,e){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=t,this.height=this.bottom=e;const i=L(n.text)?n.text.length:1;this._padding=Oe(n.padding);const r=i*Te(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=r:this.width=r}isHorizontal(){const t=this.options.position;return"top"===t||"bottom"===t}_drawArgs(t){const{top:e,left:n,bottom:i,right:r,options:o}=this,s=o.align;let a,l,c,u=0;return this.isHorizontal()?(l=P(s,n,r),c=e+t,a=r-n):("left"===o.position?(l=n+t,c=P(s,i,e),u=-.5*tt):(l=r-t,c=P(s,e,i),u=.5*tt),a=i-e),{titleX:l,titleY:c,maxWidth:a,rotation:u}}draw(){const t=this.ctx,e=this.options;if(!e.display)return;const n=Te(e.font),i=n.lineHeight/2+this._padding.top,{titleX:r,titleY:o,maxWidth:s,rotation:a}=this._drawArgs(i);_e(t,e.text,0,0,n,{color:e.color,maxWidth:s,rotation:a,textAlign:M(e.align),textBaseline:"middle",translation:[r,o]})}}var So={id:"title",_element:Co,start(t,e,n){!function(t,e){const n=new Co({ctx:t.ctx,options:e,chart:t});Li.configure(t,n,e),Li.addBox(t,n),t.titleBlock=n}(t,n)},stop(t){const e=t.titleBlock;Li.removeBox(t,e),delete t.titleBlock},beforeUpdate(t,e,n){const i=t.titleBlock;Li.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Eo=new WeakMap;var Mo={id:"subtitle",start(t,e,n){const i=new Co({ctx:t.ctx,options:n,chart:t});Li.configure(t,i,n),Li.addBox(t,i),Eo.set(t,i)},stop(t){Li.removeBox(t,Eo.get(t)),Eo.delete(t)},beforeUpdate(t,e,n){const i=Eo.get(t);Li.configure(t,i,n),i.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const Po={average(t){if(!t.length)return!1;let e,n,i=0,r=0,o=0;for(e=0,n=t.length;e<n;++e){const n=t[e].element;if(n&&n.hasValue()){const t=n.tooltipPosition();i+=t.x,r+=t.y,++o}}return{x:i/o,y:r/o}},nearest(t,e){if(!t.length)return!1;let n,i,r,o=e.x,s=e.y,a=Number.POSITIVE_INFINITY;for(n=0,i=t.length;n<i;++n){const i=t[n].element;if(i&&i.hasValue()){const t=yt(e,i.getCenterPoint());t<a&&(a=t,r=i)}}if(r){const t=r.tooltipPosition();o=t.x,s=t.y}return{x:o,y:s}}};function Oo(t,e){return e&&(L(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function To(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function Do(t,e){const{element:n,datasetIndex:i,index:r}=e,o=t.getDatasetMeta(i).controller,{label:s,value:a}=o.getLabelAndValue(r);return{chart:t,label:s,parsed:o.getParsed(r),raw:t.data.datasets[i].data[r],formattedValue:a,dataset:o.getDataset(),dataIndex:r,datasetIndex:i,element:n}}function Lo(t,e){const n=t.chart.ctx,{body:i,footer:r,title:o}=t,{boxWidth:s,boxHeight:a}=e,l=Te(e.bodyFont),c=Te(e.titleFont),u=Te(e.footerFont),h=o.length,d=r.length,f=i.length,p=Oe(e.padding);let g=p.height,m=0,b=i.reduce(((t,e)=>t+e.before.length+e.lines.length+e.after.length),0);b+=t.beforeBody.length+t.afterBody.length,h&&(g+=h*c.lineHeight+(h-1)*e.titleSpacing+e.titleMarginBottom),b&&(g+=f*(e.displayColors?Math.max(a,l.lineHeight):l.lineHeight)+(b-f)*l.lineHeight+(b-1)*e.bodySpacing),d&&(g+=e.footerMarginTop+d*u.lineHeight+(d-1)*e.footerSpacing);let y=0;const v=function(t){m=Math.max(m,n.measureText(t).width+y)};return n.save(),n.font=c.string,j(t.title,v),n.font=l.string,j(t.beforeBody.concat(t.afterBody),v),y=e.displayColors?s+2+e.boxPadding:0,j(i,(t=>{j(t.before,v),j(t.lines,v),j(t.after,v)})),y=0,n.font=u.string,j(t.footer,v),n.restore(),m+=p.width,{width:m,height:g}}function Ro(t,e,n,i){const{x:r,width:o}=n,{width:s,chartArea:{left:a,right:l}}=t;let c="center";return"center"===i?c=r<=(a+l)/2?"left":"right":r<=o/2?c="left":r>=s-o/2&&(c="right"),function(t,e,n,i){const{x:r,width:o}=i,s=n.caretSize+n.caretPadding;return"left"===t&&r+o+s>e.width||"right"===t&&r-o-s<0||void 0}(c,t,e,n)&&(c="center"),c}function Io(t,e,n){const i=n.yAlign||e.yAlign||function(t,e){const{y:n,height:i}=e;return n<i/2?"top":n>t.height-i/2?"bottom":"center"}(t,n);return{xAlign:n.xAlign||e.xAlign||Ro(t,e,n,i),yAlign:i}}function Bo(t,e,n,i){const{caretSize:r,caretPadding:o,cornerRadius:s}=t,{xAlign:a,yAlign:l}=n,c=r+o,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=Pe(s);let p=function(t,e){let{x:n,width:i}=t;return"right"===e?n-=i:"center"===e&&(n-=i/2),n}(e,a);const g=function(t,e,n){let{y:i,height:r}=t;return"top"===e?i+=n:i-="bottom"===e?r+n:r/2,i}(e,l,c);return"center"===l?"left"===a?p+=c:"right"===a&&(p-=c):"left"===a?p-=Math.max(u,d)+r:"right"===a&&(p+=Math.max(h,f)+r),{x:wt(p,0,i.width-e.width),y:wt(g,0,i.height-e.height)}}function No(t,e,n){const i=Oe(n.padding);return"center"===e?t.x+t.width/2:"right"===e?t.x+t.width-i.right:t.x+i.left}function zo(t){return Oo([],To(t))}function Fo(t,e){const n=e&&e.dataset&&e.dataset.tooltip&&e.dataset.tooltip.callbacks;return n?t.override(n):t}class jo extends Ki{constructor(t){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=t.chart||t._chart,this._chart=this.chart,this.options=t.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(t){this.options=t,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const t=this._cachedAnimations;if(t)return t;const e=this.chart,n=this.options.setContext(this.getContext()),i=n.enabled&&e.options.animation&&n.animations,r=new Bn(this.chart,i);return i._cacheable&&(this._cachedAnimations=Object.freeze(r)),r}getContext(){return this.$context||(this.$context=(this,Le(this.chart.getContext(),{tooltip:this,tooltipItems:this._tooltipItems,type:"tooltip"})))}getTitle(t,e){const{callbacks:n}=e,i=n.beforeTitle.apply(this,[t]),r=n.title.apply(this,[t]),o=n.afterTitle.apply(this,[t]);let s=[];return s=Oo(s,To(i)),s=Oo(s,To(r)),s=Oo(s,To(o)),s}getBeforeBody(t,e){return zo(e.callbacks.beforeBody.apply(this,[t]))}getBody(t,e){const{callbacks:n}=e,i=[];return j(t,(t=>{const e={before:[],lines:[],after:[]},r=Fo(n,t);Oo(e.before,To(r.beforeLabel.call(this,t))),Oo(e.lines,r.label.call(this,t)),Oo(e.after,To(r.afterLabel.call(this,t))),i.push(e)})),i}getAfterBody(t,e){return zo(e.callbacks.afterBody.apply(this,[t]))}getFooter(t,e){const{callbacks:n}=e,i=n.beforeFooter.apply(this,[t]),r=n.footer.apply(this,[t]),o=n.afterFooter.apply(this,[t]);let s=[];return s=Oo(s,To(i)),s=Oo(s,To(r)),s=Oo(s,To(o)),s}_createItems(t){const e=this._active,n=this.chart.data,i=[],r=[],o=[];let s,a,l=[];for(s=0,a=e.length;s<a;++s)l.push(Do(this.chart,e[s]));return t.filter&&(l=l.filter(((e,i,r)=>t.filter(e,i,r,n)))),t.itemSort&&(l=l.sort(((e,i)=>t.itemSort(e,i,n)))),j(l,(e=>{const n=Fo(t.callbacks,e);i.push(n.labelColor.call(this,e)),r.push(n.labelPointStyle.call(this,e)),o.push(n.labelTextColor.call(this,e))})),this.labelColors=i,this.labelPointStyles=r,this.labelTextColors=o,this.dataPoints=l,l}update(t,e){const n=this.options.setContext(this.getContext()),i=this._active;let r,o=[];if(i.length){const t=Po[n.position].call(this,i,this._eventPosition);o=this._createItems(n),this.title=this.getTitle(o,n),this.beforeBody=this.getBeforeBody(o,n),this.body=this.getBody(o,n),this.afterBody=this.getAfterBody(o,n),this.footer=this.getFooter(o,n);const e=this._size=Lo(this,n),s=Object.assign({},t,e),a=Io(this.chart,n,s),l=Bo(n,s,a,this.chart);this.xAlign=a.xAlign,this.yAlign=a.yAlign,r={opacity:1,x:l.x,y:l.y,width:e.width,height:e.height,caretX:t.x,caretY:t.y}}else 0!==this.opacity&&(r={opacity:0});this._tooltipItems=o,this.$context=void 0,r&&this._resolveAnimations().update(this,r),t&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:e})}drawCaret(t,e,n,i){const r=this.getCaretPosition(t,n,i);e.lineTo(r.x1,r.y1),e.lineTo(r.x2,r.y2),e.lineTo(r.x3,r.y3)}getCaretPosition(t,e,n){const{xAlign:i,yAlign:r}=this,{caretSize:o,cornerRadius:s}=n,{topLeft:a,topRight:l,bottomLeft:c,bottomRight:u}=Pe(s),{x:h,y:d}=t,{width:f,height:p}=e;let g,m,b,y,v,x;return"center"===r?(v=d+p/2,"left"===i?(g=h,m=g-o,y=v+o,x=v-o):(g=h+f,m=g+o,y=v-o,x=v+o),b=g):(m="left"===i?h+Math.max(a,c)+o:"right"===i?h+f-Math.max(l,u)-o:this.caretX,"top"===r?(y=d,v=y-o,g=m-o,b=m+o):(y=d+p,v=y+o,g=m+o,b=m-o),x=y),{x1:g,x2:m,x3:b,y1:y,y2:v,y3:x}}drawTitle(t,e,n){const i=this.title,r=i.length;let o,s,a;if(r){const l=wn(n.rtl,this.x,this.width);for(t.x=No(this,n.titleAlign,n),e.textAlign=l.textAlign(n.titleAlign),e.textBaseline="middle",o=Te(n.titleFont),s=n.titleSpacing,e.fillStyle=n.titleColor,e.font=o.string,a=0;a<r;++a)e.fillText(i[a],l.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+s,a+1===r&&(t.y+=n.titleMarginBottom-s)}}_drawColorBox(t,e,n,i,r){const o=this.labelColors[n],s=this.labelPointStyles[n],{boxHeight:a,boxWidth:l,boxPadding:c}=r,u=Te(r.bodyFont),h=No(this,"left",r),d=i.x(h),f=a<u.lineHeight?(u.lineHeight-a)/2:0,p=e.y+f;if(r.usePointStyle){const e={radius:Math.min(l,a)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=i.leftForLtr(d,l)+l/2,c=p+a/2;t.strokeStyle=r.multiKeyBackground,t.fillStyle=r.multiKeyBackground,ge(t,e,n,c),t.strokeStyle=o.borderColor,t.fillStyle=o.backgroundColor,ge(t,e,n,c)}else{t.lineWidth=o.borderWidth||1,t.strokeStyle=o.borderColor,t.setLineDash(o.borderDash||[]),t.lineDashOffset=o.borderDashOffset||0;const e=i.leftForLtr(d,l-c),n=i.leftForLtr(i.xPlus(d,1),l-c-2),s=Pe(o.borderRadius);Object.values(s).some((t=>0!==t))?(t.beginPath(),t.fillStyle=r.multiKeyBackground,ke(t,{x:e,y:p,w:l,h:a,radius:s}),t.fill(),t.stroke(),t.fillStyle=o.backgroundColor,t.beginPath(),ke(t,{x:n,y:p+1,w:l-2,h:a-2,radius:s}),t.fill()):(t.fillStyle=r.multiKeyBackground,t.fillRect(e,p,l,a),t.strokeRect(e,p,l,a),t.fillStyle=o.backgroundColor,t.fillRect(n,p+1,l-2,a-2))}t.fillStyle=this.labelTextColors[n]}drawBody(t,e,n){const{body:i}=this,{bodySpacing:r,bodyAlign:o,displayColors:s,boxHeight:a,boxWidth:l,boxPadding:c}=n,u=Te(n.bodyFont);let h=u.lineHeight,d=0;const f=wn(n.rtl,this.x,this.width),p=function(n){e.fillText(n,f.x(t.x+d),t.y+h/2),t.y+=h+r},g=f.textAlign(o);let m,b,y,v,x,_,w;for(e.textAlign=o,e.textBaseline="middle",e.font=u.string,t.x=No(this,g,n),e.fillStyle=n.bodyColor,j(this.beforeBody,p),d=s&&"right"!==g?"center"===o?l/2+c:l+2+c:0,v=0,_=i.length;v<_;++v){for(m=i[v],b=this.labelTextColors[v],e.fillStyle=b,j(m.before,p),y=m.lines,s&&y.length&&(this._drawColorBox(e,t,v,f,n),h=Math.max(u.lineHeight,a)),x=0,w=y.length;x<w;++x)p(y[x]),h=u.lineHeight;j(m.after,p)}d=0,h=u.lineHeight,j(this.afterBody,p),t.y-=r}drawFooter(t,e,n){const i=this.footer,r=i.length;let o,s;if(r){const a=wn(n.rtl,this.x,this.width);for(t.x=No(this,n.footerAlign,n),t.y+=n.footerMarginTop,e.textAlign=a.textAlign(n.footerAlign),e.textBaseline="middle",o=Te(n.footerFont),e.fillStyle=n.footerColor,e.font=o.string,s=0;s<r;++s)e.fillText(i[s],a.x(t.x),t.y+o.lineHeight/2),t.y+=o.lineHeight+n.footerSpacing}}drawBackground(t,e,n,i){const{xAlign:r,yAlign:o}=this,{x:s,y:a}=t,{width:l,height:c}=n,{topLeft:u,topRight:h,bottomLeft:d,bottomRight:f}=Pe(i.cornerRadius);e.fillStyle=i.backgroundColor,e.strokeStyle=i.borderColor,e.lineWidth=i.borderWidth,e.beginPath(),e.moveTo(s+u,a),"top"===o&&this.drawCaret(t,e,n,i),e.lineTo(s+l-h,a),e.quadraticCurveTo(s+l,a,s+l,a+h),"center"===o&&"right"===r&&this.drawCaret(t,e,n,i),e.lineTo(s+l,a+c-f),e.quadraticCurveTo(s+l,a+c,s+l-f,a+c),"bottom"===o&&this.drawCaret(t,e,n,i),e.lineTo(s+d,a+c),e.quadraticCurveTo(s,a+c,s,a+c-d),"center"===o&&"left"===r&&this.drawCaret(t,e,n,i),e.lineTo(s,a+u),e.quadraticCurveTo(s,a,s+u,a),e.closePath(),e.fill(),i.borderWidth>0&&e.stroke()}_updateAnimationTarget(t){const e=this.chart,n=this.$animations,i=n&&n.x,r=n&&n.y;if(i||r){const n=Po[t.position].call(this,this._active,this._eventPosition);if(!n)return;const o=this._size=Lo(this,t),s=Object.assign({},n,this._size),a=Io(e,t,s),l=Bo(t,s,a,e);i._to===l.x&&r._to===l.y||(this.xAlign=a.xAlign,this.yAlign=a.yAlign,this.width=o.width,this.height=o.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}draw(t){const e=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(e);const i={width:this.width,height:this.height},r={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const o=Oe(e.padding),s=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;e.enabled&&s&&(t.save(),t.globalAlpha=n,this.drawBackground(r,t,i,e),kn(t,e.textDirection),r.y+=o.top,this.drawTitle(r,t,e),this.drawBody(r,t,e),this.drawFooter(r,t,e),An(t,e.textDirection),t.restore())}getActiveElements(){return this._active||[]}setActiveElements(t,e){const n=this._active,i=t.map((({datasetIndex:t,index:e})=>{const n=this.chart.getDatasetMeta(t);if(!n)throw new Error("Cannot find a dataset at index "+t);return{datasetIndex:t,element:n.data[e],index:e}})),r=!V(n,i),o=this._positionChanged(i,e);(r||o)&&(this._active=i,this._eventPosition=e,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(t,e,n=!0){if(e&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const i=this.options,r=this._active||[],o=this._getActiveElements(t,r,e,n),s=this._positionChanged(o,t),a=e||!V(o,r)||s;return a&&(this._active=o,(i.enabled||i.external)&&(this._eventPosition={x:t.x,y:t.y},this.update(!0,e))),a}_getActiveElements(t,e,n,i){const r=this.options;if("mouseout"===t.type)return[];if(!i)return e;const o=this.chart.getElementsAtEventForMode(t,r.mode,r,n);return r.reverse&&o.reverse(),o}_positionChanged(t,e){const{caretX:n,caretY:i,options:r}=this,o=Po[r.position].call(this,t,e);return!1!==o&&(n!==o.x||i!==o.y)}}jo.positioners=Po;var Vo={id:"tooltip",_element:jo,positioners:Po,afterInit(t,e,n){n&&(t.tooltip=new jo({chart:t,options:n}))},beforeUpdate(t,e,n){t.tooltip&&t.tooltip.initialize(n)},reset(t,e,n){t.tooltip&&t.tooltip.initialize(n)},afterDraw(t){const e=t.tooltip,n={tooltip:e};!1!==t.notifyPlugins("beforeTooltipDraw",n)&&(e&&e.draw(t.ctx),t.notifyPlugins("afterTooltipDraw",n))},afterEvent(t,e){if(t.tooltip){const n=e.replay;t.tooltip.handleEvent(e.event,n,e.inChartArea)&&(e.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(t,e)=>e.bodyFont.size,boxWidth:(t,e)=>e.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:O,title(t){if(t.length>0){const e=t[0],n=e.chart.data.labels,i=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return e.dataset.label||"";if(e.label)return e.label;if(i>0&&e.dataIndex<i)return n[e.dataIndex]}return""},afterTitle:O,beforeBody:O,beforeLabel:O,label(t){if(this&&this.options&&"dataset"===this.options.mode)return t.label+": "+t.formattedValue||t.formattedValue;let e=t.dataset.label||"";e&&(e+=": ");const n=t.formattedValue;return D(n)||(e+=n),e},labelColor(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{borderColor:e.borderColor,backgroundColor:e.backgroundColor,borderWidth:e.borderWidth,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(t){const e=t.chart.getDatasetMeta(t.datasetIndex).controller.getStyle(t.dataIndex);return{pointStyle:e.pointStyle,rotation:e.rotation}},afterLabel:O,afterBody:O,beforeFooter:O,footer:O,afterFooter:O}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:t=>"filter"!==t&&"itemSort"!==t&&"external"!==t,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Wo=Object.freeze({__proto__:null,Decimation:ro,Filler:_o,Legend:Ao,SubTitle:Mo,Title:So,Tooltip:Vo});class Ho extends sr{constructor(t){super(t),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(t){const e=this._addedLabels;if(e.length){const t=this.getLabels();for(const{index:n,label:i}of e)t[n]===i&&t.splice(n,1);this._addedLabels=[]}super.init(t)}parse(t,e){if(D(t))return null;const n=this.getLabels();return((t,e)=>null===t?null:wt(Math.round(t),0,e))(e=isFinite(e)&&n[e]===t?e:function(t,e,n,i){const r=t.indexOf(e);return-1===r?((t,e,n,i)=>("string"==typeof e?(n=t.push(e)-1,i.unshift({index:n,label:e})):isNaN(e)&&(n=null),n))(t,e,n,i):r!==t.lastIndexOf(e)?n:r}(n,t,N(e,t),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let{min:n,max:i}=this.getMinMax(!0);"ticks"===this.options.bounds&&(t||(n=0),e||(i=this.getLabels().length-1)),this.min=n,this.max=i}buildTicks(){const t=this.min,e=this.max,n=this.options.offset,i=[];let r=this.getLabels();r=0===t&&e===r.length-1?r:r.slice(t,e+1),this._valueRange=Math.max(r.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=t;n<=e;n++)i.push({value:n});return i}getLabelForValue(t){const e=this.getLabels();return t>=0&&t<e.length?e[t]:t}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(t){return"number"!=typeof t&&(t=this.parse(t)),null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getPixelForTick(t){const e=this.ticks;return t<0||t>e.length-1?null:this.getPixelForValue(e[t].value)}getValueForPixel(t){return Math.round(this._startValue+this.getDecimalForPixel(t)*this._valueRange)}getBasePixel(){return this.bottom}}function Uo(t,e,{horizontal:n,minRotation:i}){const r=pt(i),o=(n?Math.sin(r):Math.cos(r))||.001,s=.75*e*(""+t).length;return Math.min(e/o,s)}Ho.id="category",Ho.defaults={ticks:{callback:Ho.prototype.getLabelForValue}};class $o extends sr{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(t,e){return D(t)||("number"==typeof t||t instanceof Number)&&!isFinite(+t)?null:+t}handleTickRangeOptions(){const{beginAtZero:t}=this.options,{minDefined:e,maxDefined:n}=this.getUserBounds();let{min:i,max:r}=this;const o=t=>i=e?i:t,s=t=>r=n?r:t;if(t){const t=ct(i),e=ct(r);t<0&&e<0?s(0):t>0&&e>0&&o(0)}if(i===r){let e=1;(r>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(e=Math.abs(.05*r)),s(r+e),t||o(i-e)}this.min=i,this.max=r}getTickLimit(){const t=this.options.ticks;let e,{maxTicksLimit:n,stepSize:i}=t;return i?(e=Math.ceil(this.max/i)-Math.floor(this.min/i)+1,e>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${i} would result generating up to ${e} ticks. Limiting to 1000.`),e=1e3)):(e=this.computeTickLimit(),n=n||11),n&&(e=Math.min(n,e)),e}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const t=this.options,e=t.ticks;let n=this.getTickLimit();n=Math.max(2,n);const i=function(t,e){const n=[],{bounds:i,step:r,min:o,max:s,precision:a,count:l,maxTicks:c,maxDigits:u,includeBounds:h}=t,d=r||1,f=c-1,{min:p,max:g}=e,m=!D(o),b=!D(s),y=!D(l),v=(g-p)/(u+1);let x,_,w,k,A=ut((g-p)/f/d)*d;if(A<1e-14&&!m&&!b)return[{value:p},{value:g}];k=Math.ceil(g/A)-Math.floor(p/A),k>f&&(A=ut(k*A/f/d)*d),D(a)||(x=Math.pow(10,a),A=Math.ceil(A*x)/x),"ticks"===i?(_=Math.floor(p/A)*A,w=Math.ceil(g/A)*A):(_=p,w=g),m&&b&&r&&function(t,e){const n=Math.round(t);return n-e<=t&&n+e>=t}((s-o)/r,A/1e3)?(k=Math.round(Math.min((s-o)/A,c)),A=(s-o)/k,_=o,w=s):y?(_=m?o:_,w=b?s:w,k=l-1,A=(w-_)/k):(k=(w-_)/A,k=dt(k,Math.round(k),A/1e3)?Math.round(k):Math.ceil(k));const C=Math.max(mt(A),mt(_));x=Math.pow(10,D(a)?C:a),_=Math.round(_*x)/x,w=Math.round(w*x)/x;let S=0;for(m&&(h&&_!==o?(n.push({value:o}),_<o&&S++,dt(Math.round((_+S*A)*x)/x,o,Uo(o,v,t))&&S++):_<o&&S++);S<k;++S)n.push({value:Math.round((_+S*A)*x)/x});return b&&h&&w!==s?n.length&&dt(n[n.length-1].value,s,Uo(s,v,t))?n[n.length-1].value=s:n.push({value:s}):b&&w!==s||n.push({value:w}),n}({maxTicks:n,bounds:t.bounds,min:t.min,max:t.max,precision:e.precision,step:e.stepSize,count:e.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:e.minRotation||0,includeBounds:!1!==e.includeBounds},this._range||this);return"ticks"===t.bounds&&ft(i,this,"value"),t.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const t=this.ticks;let e=this.min,n=this.max;if(super.configure(),this.options.offset&&t.length){const i=(n-e)/Math.max(t.length-1,1)/2;e-=i,n+=i}this._startValue=e,this._endValue=n,this._valueRange=n-e}getLabelForValue(t){return _n(t,this.chart.options.locale,this.options.ticks.format)}}class Yo extends $o{determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=I(t)?t:0,this.max=I(e)?e:1,this.handleTickRangeOptions()}computeTickLimit(){const t=this.isHorizontal(),e=t?this.width:this.height,n=pt(this.options.ticks.minRotation),i=(t?Math.sin(n):Math.cos(n))||.001,r=this._resolveTickFontOptions(0);return Math.ceil(e/Math.min(40,r.lineHeight/i))}getPixelForValue(t){return null===t?NaN:this.getPixelForDecimal((t-this._startValue)/this._valueRange)}getValueForPixel(t){return this._startValue+this.getDecimalForPixel(t)*this._valueRange}}function qo(t){return 1==t/Math.pow(10,Math.floor(lt(t)))}Yo.id="linear",Yo.defaults={ticks:{callback:Gi.formatters.numeric}};class Qo extends sr{constructor(t){super(t),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(t,e){const n=$o.prototype.parse.apply(this,[t,e]);if(0!==n)return I(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!0);this.min=I(t)?Math.max(0,t):null,this.max=I(e)?Math.max(0,e):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:t,maxDefined:e}=this.getUserBounds();let n=this.min,i=this.max;const r=e=>n=t?n:e,o=t=>i=e?i:t,s=(t,e)=>Math.pow(10,Math.floor(lt(t))+e);n===i&&(n<=0?(r(1),o(10)):(r(s(n,-1)),o(s(i,1)))),n<=0&&r(s(i,-1)),i<=0&&o(s(n,1)),this._zero&&this.min!==this._suggestedMin&&n===s(this.min,0)&&r(s(n,-1)),this.min=n,this.max=i}buildTicks(){const t=this.options,e=function(t,e){const n=Math.floor(lt(e.max)),i=Math.ceil(e.max/Math.pow(10,n)),r=[];let o=B(t.min,Math.pow(10,Math.floor(lt(e.min)))),s=Math.floor(lt(o)),a=Math.floor(o/Math.pow(10,s)),l=s<0?Math.pow(10,Math.abs(s)):1;do{r.push({value:o,major:qo(o)}),++a,10===a&&(a=1,++s,l=s>=0?1:l),o=Math.round(a*Math.pow(10,s)*l)/l}while(s<n||s===n&&a<i);const c=B(t.max,o);return r.push({value:c,major:qo(o)}),r}({min:this._userMin,max:this._userMax},this);return"ticks"===t.bounds&&ft(e,this,"value"),t.reverse?(e.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),e}getLabelForValue(t){return void 0===t?"0":_n(t,this.chart.options.locale,this.options.ticks.format)}configure(){const t=this.min;super.configure(),this._startValue=lt(t),this._valueRange=lt(this.max)-lt(t)}getPixelForValue(t){return void 0!==t&&0!==t||(t=this.min),null===t||isNaN(t)?NaN:this.getPixelForDecimal(t===this.min?0:(lt(t)-this._startValue)/this._valueRange)}getValueForPixel(t){const e=this.getDecimalForPixel(t);return Math.pow(10,this._startValue+e*this._valueRange)}}function Xo(t){const e=t.ticks;if(e.display&&t.display){const t=Oe(e.backdropPadding);return N(e.font&&e.font.size,ue.font.size)+t.height}return 0}function Ko(t,e,n,i,r){return t===i||t===r?{start:e-n/2,end:e+n/2}:t<i||t>r?{start:e-n,end:e}:{start:e,end:e+n}}function Zo(t,e,n,i,r){const o=Math.abs(Math.sin(n)),s=Math.abs(Math.cos(n));let a=0,l=0;i.start<e.l?(a=(e.l-i.start)/o,t.l=Math.min(t.l,e.l-a)):i.end>e.r&&(a=(i.end-e.r)/o,t.r=Math.max(t.r,e.r+a)),r.start<e.t?(l=(e.t-r.start)/s,t.t=Math.min(t.t,e.t-l)):r.end>e.b&&(l=(r.end-e.b)/s,t.b=Math.max(t.b,e.b+l))}function Go(t){return 0===t||180===t?"center":t<180?"left":"right"}function Jo(t,e,n){return 90===n||270===n?t-=e/2:(n>270||n<90)&&(t-=e),t}function ts(t,e,n,i){const{ctx:r}=t;if(n)r.arc(t.xCenter,t.yCenter,e,0,et);else{let n=t.getPointPosition(0,e);r.moveTo(n.x,n.y);for(let o=1;o<i;o++)n=t.getPointPosition(o,e),r.lineTo(n.x,n.y)}}Qo.id="logarithmic",Qo.defaults={ticks:{callback:Gi.formatters.logarithmic,major:{enabled:!0}}};class es extends $o{constructor(t){super(t),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const t=this._padding=Oe(Xo(this.options)/2),e=this.width=this.maxWidth-t.width,n=this.height=this.maxHeight-t.height;this.xCenter=Math.floor(this.left+e/2+t.left),this.yCenter=Math.floor(this.top+n/2+t.top),this.drawingArea=Math.floor(Math.min(e,n)/2)}determineDataLimits(){const{min:t,max:e}=this.getMinMax(!1);this.min=I(t)&&!isNaN(t)?t:0,this.max=I(e)&&!isNaN(e)?e:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Xo(this.options))}generateTickLabels(t){$o.prototype.generateTickLabels.call(this,t),this._pointLabels=this.getLabels().map(((t,e)=>{const n=F(this.options.pointLabels.callback,[t,e],this);return n||0===n?n:""})).filter(((t,e)=>this.chart.getDataVisibility(e)))}fit(){const t=this.options;t.display&&t.pointLabels.display?function(t){const e={l:t.left+t._padding.left,r:t.right-t._padding.right,t:t.top+t._padding.top,b:t.bottom-t._padding.bottom},n=Object.assign({},e),i=[],r=[],o=t._pointLabels.length,s=t.options.pointLabels,a=s.centerPointLabels?tt/o:0;for(let h=0;h<o;h++){const o=s.setContext(t.getPointLabelContext(h));r[h]=o.padding;const d=t.getPointPosition(h,t.drawingArea+r[h],a),f=Te(o.font),p=(l=t.ctx,c=f,u=L(u=t._pointLabels[h])?u:[u],{w:de(l,c.string,u),h:u.length*c.lineHeight});i[h]=p;const g=xt(t.getIndexAngle(h)+a),m=Math.round(gt(g));Zo(n,e,g,Ko(m,d.x,p.w,0,180),Ko(m,d.y,p.h,90,270))}var l,c,u;t.setCenterPoint(e.l-n.l,n.r-e.r,e.t-n.t,n.b-e.b),t._pointLabelItems=function(t,e,n){const i=[],r=t._pointLabels.length,o=t.options,s=Xo(o)/2,a=t.drawingArea,l=o.pointLabels.centerPointLabels?tt/r:0;for(let o=0;o<r;o++){const r=t.getPointPosition(o,a+s+n[o],l),d=Math.round(gt(xt(r.angle+ot))),f=e[o],p=Jo(r.y,f.h,d),g=Go(d),m=(c=r.x,u=f.w,"right"===(h=g)?c-=u:"center"===h&&(c-=u/2),c);i.push({x:r.x,y:p,textAlign:g,left:m,top:p,right:m+f.w,bottom:p+f.h})}var c,u,h;return i}(t,i,r)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(t,e,n,i){this.xCenter+=Math.floor((t-e)/2),this.yCenter+=Math.floor((n-i)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(t,e,n,i))}getIndexAngle(t){return xt(t*(et/(this._pointLabels.length||1))+pt(this.options.startAngle||0))}getDistanceFromCenterForValue(t){if(D(t))return NaN;const e=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-t)*e:(t-this.min)*e}getValueForDistanceFromCenter(t){if(D(t))return NaN;const e=t/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-e:this.min+e}getPointLabelContext(t){const e=this._pointLabels||[];if(t>=0&&t<e.length){const n=e[t];return function(t,e,n){return Le(t,{label:n,index:e,type:"pointLabel"})}(this.getContext(),t,n)}}getPointPosition(t,e,n=0){const i=this.getIndexAngle(t)-ot+n;return{x:Math.cos(i)*e+this.xCenter,y:Math.sin(i)*e+this.yCenter,angle:i}}getPointPositionForValue(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))}getBasePosition(t){return this.getPointPositionForValue(t||0,this.getBaseValue())}getPointLabelPosition(t){const{left:e,top:n,right:i,bottom:r}=this._pointLabelItems[t];return{left:e,top:n,right:i,bottom:r}}drawBackground(){const{backgroundColor:t,grid:{circular:e}}=this.options;if(t){const n=this.ctx;n.save(),n.beginPath(),ts(this,this.getDistanceFromCenterForValue(this._endValue),e,this._pointLabels.length),n.closePath(),n.fillStyle=t,n.fill(),n.restore()}}drawGrid(){const t=this.ctx,e=this.options,{angleLines:n,grid:i}=e,r=this._pointLabels.length;let o,s,a;if(e.pointLabels.display&&function(t,e){const{ctx:n,options:{pointLabels:i}}=t;for(let r=e-1;r>=0;r--){const e=i.setContext(t.getPointLabelContext(r)),o=Te(e.font),{x:s,y:a,textAlign:l,left:c,top:u,right:h,bottom:d}=t._pointLabelItems[r],{backdropColor:f}=e;if(!D(f)){const t=Oe(e.backdropPadding);n.fillStyle=f,n.fillRect(c-t.left,u-t.top,h-c+t.width,d-u+t.height)}_e(n,t._pointLabels[r],s,a+o.lineHeight/2,o,{color:e.color,textAlign:l,textBaseline:"middle"})}}(this,r),i.display&&this.ticks.forEach(((t,e)=>{0!==e&&(s=this.getDistanceFromCenterForValue(t.value),function(t,e,n,i){const r=t.ctx,o=e.circular,{color:s,lineWidth:a}=e;!o&&!i||!s||!a||n<0||(r.save(),r.strokeStyle=s,r.lineWidth=a,r.setLineDash(e.borderDash),r.lineDashOffset=e.borderDashOffset,r.beginPath(),ts(t,n,o,i),r.closePath(),r.stroke(),r.restore())}(this,i.setContext(this.getContext(e-1)),s,r))})),n.display){for(t.save(),o=r-1;o>=0;o--){const i=n.setContext(this.getPointLabelContext(o)),{color:r,lineWidth:l}=i;l&&r&&(t.lineWidth=l,t.strokeStyle=r,t.setLineDash(i.borderDash),t.lineDashOffset=i.borderDashOffset,s=this.getDistanceFromCenterForValue(e.ticks.reverse?this.min:this.max),a=this.getPointPosition(o,s),t.beginPath(),t.moveTo(this.xCenter,this.yCenter),t.lineTo(a.x,a.y),t.stroke())}t.restore()}}drawBorder(){}drawLabels(){const t=this.ctx,e=this.options,n=e.ticks;if(!n.display)return;const i=this.getIndexAngle(0);let r,o;t.save(),t.translate(this.xCenter,this.yCenter),t.rotate(i),t.textAlign="center",t.textBaseline="middle",this.ticks.forEach(((i,s)=>{if(0===s&&!e.reverse)return;const a=n.setContext(this.getContext(s)),l=Te(a.font);if(r=this.getDistanceFromCenterForValue(this.ticks[s].value),a.showLabelBackdrop){t.font=l.string,o=t.measureText(i.label).width,t.fillStyle=a.backdropColor;const e=Oe(a.backdropPadding);t.fillRect(-o/2-e.left,-r-l.size/2-e.top,o+e.width,l.size+e.height)}_e(t,i.label,0,-r,l,{color:a.color})})),t.restore()}drawTitle(){}}es.id="radialLinear",es.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:Gi.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:t=>t,padding:5,centerPointLabels:!1}},es.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},es.descriptors={angleLines:{_fallback:"grid"}};const ns={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},is=Object.keys(ns);function rs(t,e){return t-e}function os(t,e){if(D(e))return null;const n=t._adapter,{parser:i,round:r,isoWeekday:o}=t._parseOpts;let s=e;return"function"==typeof i&&(s=i(s)),I(s)||(s="string"==typeof i?n.parse(s,i):n.parse(s)),null===s?null:(r&&(s="week"!==r||!ht(o)&&!0!==o?n.startOf(s,r):n.startOf(s,"isoWeek",o)),+s)}function ss(t,e,n,i){const r=is.length;for(let o=is.indexOf(t);o<r-1;++o){const t=ns[is[o]],r=t.steps?t.steps:Number.MAX_SAFE_INTEGER;if(t.common&&Math.ceil((n-e)/(r*t.size))<=i)return is[o]}return is[r-1]}function as(t,e,n){if(n){if(n.length){const{lo:i,hi:r}=Re(n,e);t[n[i]>=e?n[i]:n[r]]=!0}}else t[e]=!0}function ls(t,e,n){const i=[],r={},o=e.length;let s,a;for(s=0;s<o;++s)a=e[s],r[a]=s,i.push({value:a,major:!1});return 0!==o&&n?function(t,e,n,i){const r=t._adapter,o=+r.startOf(e[0].value,i),s=e[e.length-1].value;let a,l;for(a=o;a<=s;a=+r.add(a,1,i))l=n[a],l>=0&&(e[l].major=!0);return e}(t,i,r,n):i}class cs extends sr{constructor(t){super(t),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(t,e){const n=t.time||(t.time={}),i=this._adapter=new pi._date(t.adapters.date);Y(n.displayFormats,i.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(t),this._normalized=e.normalized}parse(t,e){return void 0===t?null:os(this,t)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const t=this.options,e=this._adapter,n=t.time.unit||"day";let{min:i,max:r,minDefined:o,maxDefined:s}=this.getUserBounds();function a(t){o||isNaN(t.min)||(i=Math.min(i,t.min)),s||isNaN(t.max)||(r=Math.max(r,t.max))}o&&s||(a(this._getLabelBounds()),"ticks"===t.bounds&&"labels"===t.ticks.source||a(this.getMinMax(!1))),i=I(i)&&!isNaN(i)?i:+e.startOf(Date.now(),n),r=I(r)&&!isNaN(r)?r:+e.endOf(Date.now(),n)+1,this.min=Math.min(i,r-1),this.max=Math.max(i+1,r)}_getLabelBounds(){const t=this.getLabelTimestamps();let e=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return t.length&&(e=t[0],n=t[t.length-1]),{min:e,max:n}}buildTicks(){const t=this.options,e=t.time,n=t.ticks,i="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===t.bounds&&i.length&&(this.min=this._userMin||i[0],this.max=this._userMax||i[i.length-1]);const r=this.min,o=function(t,e,n){let i=0,r=t.length;for(;i<r&&t[i]<e;)i++;for(;r>i&&t[r-1]>n;)r--;return i>0||r<t.length?t.slice(i,r):t}(i,r,this.max);return this._unit=e.unit||(n.autoSkip?ss(e.minUnit,this.min,this.max,this._getLabelCapacity(r)):function(t,e,n,i,r){for(let o=is.length-1;o>=is.indexOf(n);o--){const n=is[o];if(ns[n].common&&t._adapter.diff(r,i,n)>=e-1)return n}return is[n?is.indexOf(n):0]}(this,o.length,e.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(t){for(let e=is.indexOf(t)+1,n=is.length;e<n;++e)if(ns[is[e]].common)return is[e]}(this._unit):void 0,this.initOffsets(i),t.reverse&&o.reverse(),ls(this,o,this._majorUnit)}initOffsets(t){let e,n,i=0,r=0;this.options.offset&&t.length&&(e=this.getDecimalForValue(t[0]),i=1===t.length?1-e:(this.getDecimalForValue(t[1])-e)/2,n=this.getDecimalForValue(t[t.length-1]),r=1===t.length?n:(n-this.getDecimalForValue(t[t.length-2]))/2);const o=t.length<3?.5:.25;i=wt(i,0,o),r=wt(r,0,o),this._offsets={start:i,end:r,factor:1/(i+1+r)}}_generate(){const t=this._adapter,e=this.min,n=this.max,i=this.options,r=i.time,o=r.unit||ss(r.minUnit,e,n,this._getLabelCapacity(e)),s=N(r.stepSize,1),a="week"===o&&r.isoWeekday,l=ht(a)||!0===a,c={};let u,h,d=e;if(l&&(d=+t.startOf(d,"isoWeek",a)),d=+t.startOf(d,l?"day":o),t.diff(n,e,o)>1e5*s)throw new Error(e+" and "+n+" are too far apart with stepSize of "+s+" "+o);const f="data"===i.ticks.source&&this.getDataTimestamps();for(u=d,h=0;u<n;u=+t.add(u,s,o),h++)as(c,u,f);return u!==n&&"ticks"!==i.bounds&&1!==h||as(c,u,f),Object.keys(c).sort(((t,e)=>t-e)).map((t=>+t))}getLabelForValue(t){const e=this._adapter,n=this.options.time;return n.tooltipFormat?e.format(t,n.tooltipFormat):e.format(t,n.displayFormats.datetime)}_tickFormatFunction(t,e,n,i){const r=this.options,o=r.time.displayFormats,s=this._unit,a=this._majorUnit,l=s&&o[s],c=a&&o[a],u=n[e],h=a&&c&&u&&u.major,d=this._adapter.format(t,i||(h?c:l)),f=r.ticks.callback;return f?F(f,[d,e,n],this):d}generateTickLabels(t){let e,n,i;for(e=0,n=t.length;e<n;++e)i=t[e],i.label=this._tickFormatFunction(i.value,e,t)}getDecimalForValue(t){return null===t?NaN:(t-this.min)/(this.max-this.min)}getPixelForValue(t){const e=this._offsets,n=this.getDecimalForValue(t);return this.getPixelForDecimal((e.start+n)*e.factor)}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return this.min+n*(this.max-this.min)}_getLabelSize(t){const e=this.options.ticks,n=this.ctx.measureText(t).width,i=pt(this.isHorizontal()?e.maxRotation:e.minRotation),r=Math.cos(i),o=Math.sin(i),s=this._resolveTickFontOptions(0).size;return{w:n*r+s*o,h:n*o+s*r}}_getLabelCapacity(t){const e=this.options.time,n=e.displayFormats,i=n[e.unit]||n.millisecond,r=this._tickFormatFunction(t,0,ls(this,[t],this._majorUnit),i),o=this._getLabelSize(r),s=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return s>0?s:1}getDataTimestamps(){let t,e,n=this._cache.data||[];if(n.length)return n;const i=this.getMatchingVisibleMetas();if(this._normalized&&i.length)return this._cache.data=i[0].controller.getAllParsedValues(this);for(t=0,e=i.length;t<e;++t)n=n.concat(i[t].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const t=this._cache.labels||[];let e,n;if(t.length)return t;const i=this.getLabels();for(e=0,n=i.length;e<n;++e)t.push(os(this,i[e]));return this._cache.labels=this._normalized?t:this.normalize(t)}normalize(t){return Fe(t.sort(rs))}}function us(t,e,n){let i,r,o,s,a=0,l=t.length-1;n?(e>=t[a].pos&&e<=t[l].pos&&({lo:a,hi:l}=Ie(t,"pos",e)),({pos:i,time:o}=t[a]),({pos:r,time:s}=t[l])):(e>=t[a].time&&e<=t[l].time&&({lo:a,hi:l}=Ie(t,"time",e)),({time:i,pos:o}=t[a]),({time:r,pos:s}=t[l]));const c=r-i;return c?o+(s-o)*(e-i)/c:o}cs.id="time",cs.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class hs extends cs{constructor(t){super(t),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const t=this._getTimestampsForTable(),e=this._table=this.buildLookupTable(t);this._minPos=us(e,this.min),this._tableRange=us(e,this.max)-this._minPos,super.initOffsets(t)}buildLookupTable(t){const{min:e,max:n}=this,i=[],r=[];let o,s,a,l,c;for(o=0,s=t.length;o<s;++o)l=t[o],l>=e&&l<=n&&i.push(l);if(i.length<2)return[{time:e,pos:0},{time:n,pos:1}];for(o=0,s=i.length;o<s;++o)c=i[o+1],a=i[o-1],l=i[o],Math.round((c+a)/2)!==l&&r.push({time:l,pos:o/(s-1)});return r}_getTimestampsForTable(){let t=this._cache.all||[];if(t.length)return t;const e=this.getDataTimestamps(),n=this.getLabelTimestamps();return t=e.length&&n.length?this.normalize(e.concat(n)):e.length?e:n,t=this._cache.all=t,t}getDecimalForValue(t){return(us(this._table,t)-this._minPos)/this._tableRange}getValueForPixel(t){const e=this._offsets,n=this.getDecimalForPixel(t)/e.factor-e.end;return us(this._table,n*this._tableRange+this._minPos,!0)}}hs.id="timeseries",hs.defaults=cs.defaults;const ds=[hi,eo,Wo,Object.freeze({__proto__:null,CategoryScale:Ho,LinearScale:Yo,LogarithmicScale:Qo,RadialLinearScale:es,TimeScale:cs,TimeSeriesScale:hs})],fs="label";function ps(t,e){"function"==typeof t?t(e):t&&(t.current=e)}function gs(t,e){t.labels=e}function ms(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:fs;const i=[];t.datasets=e.map((e=>{const r=t.datasets.find((t=>t[n]===e[n]));return r&&e.data&&!i.includes(r)?(i.push(r),Object.assign(r,e),r):{...e}}))}function bs(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:fs;const n={labels:[],datasets:[]};return gs(n,t.labels),ms(n,t.datasets,e),n}function ys(t,n){let{height:i=150,width:r=300,redraw:o=!1,datasetIdKey:s,type:a,data:l,options:c,plugins:u=[],fallbackContent:h,...d}=t;const f=(0,e.useRef)(null),p=(0,e.useRef)(),g=()=>{f.current&&(p.current=new Dr(f.current,{type:a,data:bs(l,s),options:c,plugins:u}),ps(n,p.current))},m=()=>{ps(n,null),p.current&&(p.current.destroy(),p.current=null)};return(0,e.useEffect)((()=>{var t,e;!o&&p.current&&c&&(t=p.current,e=c,t.options={...e})}),[o,c]),(0,e.useEffect)((()=>{!o&&p.current&&gs(p.current.config.data,l.labels)}),[o,l.labels]),(0,e.useEffect)((()=>{!o&&p.current&&l.datasets&&ms(p.current.config.data,l.datasets,s)}),[o,l.datasets]),(0,e.useEffect)((()=>{p.current&&(o?(m(),setTimeout(g)):p.current.update())}),[o,c,l.labels,l.datasets]),(0,e.useEffect)((()=>(g(),()=>m())),[]),e.createElement("canvas",Object.assign({ref:f,role:"img",height:i,width:r},d),h)}const vs=(0,e.forwardRef)(ys);function xs(t,n){return Dr.register(n),(0,e.forwardRef)(((n,i)=>e.createElement(vs,Object.assign({},n,{ref:i,type:t}))))}const _s=xs("bar",ii);function ws(){var t={labels:["Paris","Madrid","Munich","Québéc","London","Washignton"],datasets:[{label:"flights details",backgroundColor:"#26106A",borderColor:"#26106A",data:[10,30,5,2,40,25]}]},e={type:"line",data:t,options:{}};return(0,A.jsx)(_s,{data:t,options:e})}Dr.register(...ds);var ks=r(187),As=r(58),Cs="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")();function Ss(t){const e=t.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!e||As))return new XMLHttpRequest}catch(t){}if(!e)try{return new(Cs[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}function Es(t,...e){return e.reduce(((e,n)=>(t.hasOwnProperty(n)&&(e[n]=t[n]),e)),{})}const Ms=setTimeout,Ps=clearTimeout;function Os(t,e){e.useNativeTimers?(t.setTimeoutFn=Ms.bind(Cs),t.clearTimeoutFn=Ps.bind(Cs)):(t.setTimeoutFn=setTimeout.bind(Cs),t.clearTimeoutFn=clearTimeout.bind(Cs))}var Ts=r(63);const Ds=Object.create(null);Ds.open="0",Ds.close="1",Ds.ping="2",Ds.pong="3",Ds.message="4",Ds.upgrade="5",Ds.noop="6";const Ls=Object.create(null);Object.keys(Ds).forEach((t=>{Ls[Ds[t]]=t}));const Rs={type:"error",data:"parser error"},Is="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),Bs="function"==typeof ArrayBuffer,Ns=(t,e)=>{const n=new FileReader;return n.onload=function(){const t=n.result.split(",")[1];e("b"+t)},n.readAsDataURL(t)};for(var zs=({type:t,data:e},n,i)=>{return Is&&e instanceof Blob?n?i(e):Ns(e,i):Bs&&(e instanceof ArrayBuffer||(r=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(r):r&&r.buffer instanceof ArrayBuffer))?n?i(e):Ns(new Blob([e]),i):i(Ds[t]+(e||""));var r},Fs="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",js="undefined"==typeof Uint8Array?[]:new Uint8Array(256),Vs=0;Vs<Fs.length;Vs++)js[Fs.charCodeAt(Vs)]=Vs;const Ws="function"==typeof ArrayBuffer,Hs=(t,e)=>{if(Ws){const n=function(t){var e,n,i,r,o,s=.75*t.length,a=t.length,l=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);var c=new ArrayBuffer(s),u=new Uint8Array(c);for(e=0;e<a;e+=4)n=js[t.charCodeAt(e)],i=js[t.charCodeAt(e+1)],r=js[t.charCodeAt(e+2)],o=js[t.charCodeAt(e+3)],u[l++]=n<<2|i>>4,u[l++]=(15&i)<<4|r>>2,u[l++]=(3&r)<<6|63&o;return c}(t);return Us(n,e)}return{base64:!0,data:t}},Us=(t,e)=>"blob"===e&&t instanceof ArrayBuffer?new Blob([t]):t;var $s=(t,e)=>{if("string"!=typeof t)return{type:"message",data:Us(t,e)};const n=t.charAt(0);return"b"===n?{type:"message",data:Hs(t.substring(1),e)}:Ls[n]?t.length>1?{type:Ls[n],data:t.substring(1)}:{type:Ls[n]}:Rs};const Ys=String.fromCharCode(30);class qs extends Ts.Q{constructor(t){super(),this.writable=!1,Os(this,t),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e){const n=new Error(t);return n.type="TransportError",n.description=e,super.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState&&this.write(t)}onOpen(){this.readyState="open",this.writable=!0,super.emit("open")}onData(t){const e=$s(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){super.emit("packet",t)}onClose(){this.readyState="closed",super.emit("close")}}var Qs=r(281),Xs=r(830);class Ks extends qs{constructor(){super(...arguments),this.polling=!1}get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(t++,this.once("pollComplete",(function(){--t||e()}))),this.writable||(t++,this.once("drain",(function(){--t||e()})))}else e()}poll(){this.polling=!0,this.doPoll(),this.emit("poll")}onData(t){((t,e)=>{const n=t.split(Ys),i=[];for(let t=0;t<n.length;t++){const r=$s(n[t],e);if(i.push(r),"error"===r.type)break}return i})(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose(),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState&&this.poll())}doClose(){const t=()=>{this.write([{type:"close"}])};"open"===this.readyState?t():this.once("open",t)}write(t){this.writable=!1,((t,e)=>{const n=t.length,i=new Array(n);let r=0;t.forEach(((t,o)=>{zs(t,!1,(t=>{i[o]=t,++r===n&&e(i.join(Ys))}))}))})(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let n="";!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=Qs()),this.supportsBinary||t.sid||(t.b64=1),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(n=":"+this.opts.port);const i=Xs.encode(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(i.length?"?"+i:"")}}function Zs(){}const Gs=null!=new Ss({xdomain:!1}).responseType;class Js extends Ts.Q{constructor(t,e){super(),Os(this,e),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=Es(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new Ss(t);try{e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},e.send(this.data)}catch(t){return void this.setTimeoutFn((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=Js.requestsCount++,Js.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(t){this.emit("data",t),this.onSuccess()}onError(t){this.emit("error",t),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=Zs,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete Js.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&this.onData(t)}abort(){this.cleanup()}}function ta(){for(let t in Js.requests)Js.requests.hasOwnProperty(t)&&Js.requests[t].abort()}Js.requestsCount=0,Js.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",ta):"function"==typeof addEventListener&&addEventListener("pagehide",ta,!1));const ea="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):(t,e)=>e(t,0),na=Cs.WebSocket||Cs.MozWebSocket,ia="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class ra extends qs{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,n=ia?{}:Es(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=ia?new na(t,e,n):e?new na(t,e):new na(t)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||"arraybuffer",this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const n=t[e],i=e===t.length-1;zs(n,this.supportsBinary,(t=>{try{this.ws.send(t)}catch(t){}i&&ea((()=>{this.writable=!0,this.emit("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let n="";this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=Qs()),this.supportsBinary||(t.b64=1);const i=Xs.encode(t);return e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(i.length?"?"+i:"")}check(){return!(!na||this.name===ra.prototype.name)}}const oa={websocket:ra,polling:class extends Ks{constructor(t){if(super(t),"undefined"!=typeof location){const e="https:"===location.protocol;let n=location.port;n||(n=e?"443":"80"),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=Gs&&!e}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new Js(this.uri(),t)}doWrite(t,e){const n=this.request({method:"POST",data:t});n.on("success",e),n.on("error",(t=>{this.onError("xhr post error",t)}))}doPoll(){const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",(t=>{this.onError("xhr poll error",t)})),this.pollXhr=t}}};class sa extends Ts.Q{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=ks(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=ks(e.host).host),Os(this,e),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=Xs.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){const e=function(t){const e={};for(let n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.opts.query);e.EIO=4,e.transport=t,this.id&&(e.sid=this.id);const n=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return new oa[t](n)}open(){let t;if(this.opts.rememberUpgrade&&sa.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){this.transport&&this.transport.removeAllListeners(),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(t){let e=this.createTransport(t),n=!1;sa.priorWebsocketSuccess=!1;const i=()=>{n||(e.send([{type:"ping",data:"probe"}]),e.once("packet",(t=>{if(!n)if("pong"===t.type&&"probe"===t.data){if(this.upgrading=!0,this.emitReserved("upgrading",e),!e)return;sa.priorWebsocketSuccess="websocket"===e.name,this.transport.pause((()=>{n||"closed"!==this.readyState&&(c(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emitReserved("upgrade",e),e=null,this.upgrading=!1,this.flush())}))}else{const t=new Error("probe error");t.transport=e.name,this.emitReserved("upgradeError",t)}})))};function r(){n||(n=!0,c(),e.close(),e=null)}const o=t=>{const n=new Error("probe error: "+t);n.transport=e.name,r(),this.emitReserved("upgradeError",n)};function s(){o("transport closed")}function a(){o("socket closed")}function l(t){e&&t.name!==e.name&&r()}const c=()=>{e.removeListener("open",i),e.removeListener("error",o),e.removeListener("close",s),this.off("close",a),this.off("upgrading",l)};e.once("open",i),e.once("error",o),e.once("close",s),this.once("close",a),this.once("upgrading",l),e.open()}onOpen(){if(this.readyState="open",sa.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(this.emitReserved("packet",t),this.emitReserved("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emitReserved("data",t.data),this.emitReserved("message",t.data)}}onHandshake(t){this.emitReserved("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emitReserved("flush"))}write(t,e,n){return this.sendPacket("message",t,e,n),this}send(t,e,n){return this.sendPacket("message",t,e,n),this}sendPacket(t,e,n,i){if("function"==typeof e&&(i=e,e=void 0),"function"==typeof n&&(i=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const r={type:t,data:e,options:n};this.emitReserved("packetCreate",r),this.writeBuffer.push(r),i&&this.once("flush",i),this.flush()}close(){const t=()=>{this.onClose("forced close"),this.transport.close()},e=()=>{this.off("upgrade",e),this.off("upgradeError",e),t()},n=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():t()})):this.upgrading?n():t()),this}onError(t){sa.priorWebsocketSuccess=!1,this.emitReserved("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emitReserved("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let n=0;const i=t.length;for(;n<i;n++)~this.transports.indexOf(t[n])&&e.push(t[n]);return e}}sa.protocol=4,sa.protocol;const aa="function"==typeof ArrayBuffer,la=Object.prototype.toString,ca="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===la.call(Blob),ua="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===la.call(File);function ha(t){return aa&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||ca&&t instanceof Blob||ua&&t instanceof File}function da(t,e){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let e=0,n=t.length;e<n;e++)if(da(t[e]))return!0;return!1}if(ha(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return da(t.toJSON(),!0);for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&da(t[e]))return!0;return!1}function fa(t){const e=[],n=t.data,i=t;return i.data=pa(n,e),i.attachments=e.length,{packet:i,buffers:e}}function pa(t,e){if(!t)return t;if(ha(t)){const n={_placeholder:!0,num:e.length};return e.push(t),n}if(Array.isArray(t)){const n=new Array(t.length);for(let i=0;i<t.length;i++)n[i]=pa(t[i],e);return n}if("object"==typeof t&&!(t instanceof Date)){const n={};for(const i in t)Object.prototype.hasOwnProperty.call(t,i)&&(n[i]=pa(t[i],e));return n}return t}function ga(t,e){return t.data=ma(t.data,e),t.attachments=void 0,t}function ma(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let n=0;n<t.length;n++)t[n]=ma(t[n],e);else if("object"==typeof t)for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&(t[n]=ma(t[n],e));return t}const ba=5;var ya;!function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(ya||(ya={}));class va{encode(t){return t.type!==ya.EVENT&&t.type!==ya.ACK||!da(t)?[this.encodeAsString(t)]:(t.type=t.type===ya.EVENT?ya.BINARY_EVENT:ya.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==ya.BINARY_EVENT&&t.type!==ya.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),e}encodeAsBinary(t){const e=fa(t),n=this.encodeAsString(e.packet),i=e.buffers;return i.unshift(n),i}}class xa extends Ts.Q{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===ya.BINARY_EVENT||e.type===ya.BINARY_ACK?(this.reconstructor=new _a(e),0===e.attachments&&super.emitReserved("decoded",e)):super.emitReserved("decoded",e);else{if(!ha(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emitReserved("decoded",e))}}decodeString(t){let e=0;const n={type:Number(t.charAt(0))};if(void 0===ya[n.type])throw new Error("unknown packet type "+n.type);if(n.type===ya.BINARY_EVENT||n.type===ya.BINARY_ACK){const i=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const r=t.substring(i,e);if(r!=Number(r)||"-"!==t.charAt(e))throw new Error("Illegal attachments");n.attachments=Number(r)}if("/"===t.charAt(e+1)){const i=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);n.nsp=t.substring(i,e)}else n.nsp="/";const i=t.charAt(e+1);if(""!==i&&Number(i)==i){const i=e+1;for(;++e;){const n=t.charAt(e);if(null==n||Number(n)!=n){--e;break}if(e===t.length)break}n.id=Number(t.substring(i,e+1))}if(t.charAt(++e)){const i=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!xa.isPayloadValid(n.type,i))throw new Error("invalid payload");n.data=i}return n}static isPayloadValid(t,e){switch(t){case ya.CONNECT:return"object"==typeof e;case ya.DISCONNECT:return void 0===e;case ya.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case ya.EVENT:case ya.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case ya.ACK:case ya.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}class _a{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=ga(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}function wa(t,e,n){return t.on(e,n),function(){t.off(e,n)}}const ka=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class Aa extends Ts.Q{constructor(t,e,n){super(),this.connected=!1,this.disconnected=!0,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const t=this.io;this.subs=[wa(t,"open",this.onopen.bind(this)),wa(t,"packet",this.onpacket.bind(this)),wa(t,"error",this.onerror.bind(this)),wa(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(ka.hasOwnProperty(t))throw new Error('"'+t+'" is a reserved event name');e.unshift(t);const n={type:ya.EVENT,data:e,options:{}};if(n.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]){const t=this.ids++,i=e.pop();this._registerAckCallback(t,i),n.id=t}const i=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return this.flags.volatile&&(!i||!this.connected)||(this.connected?this.packet(n):this.sendBuffer.push(n)),this.flags={},this}_registerAckCallback(t,e){const n=this.flags.timeout;if(void 0===n)return void(this.acks[t]=e);const i=this.io.setTimeoutFn((()=>{delete this.acks[t];for(let e=0;e<this.sendBuffer.length;e++)this.sendBuffer[e].id===t&&this.sendBuffer.splice(e,1);e.call(this,new Error("operation has timed out"))}),n);this.acks[t]=(...t)=>{this.io.clearTimeoutFn(i),e.apply(this,[null,...t])}}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){"function"==typeof this.auth?this.auth((t=>{this.packet({type:ya.CONNECT,data:t})})):this.packet({type:ya.CONNECT,data:this.auth})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t){this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",t)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case ya.CONNECT:if(t.data&&t.data.sid){const e=t.data.sid;this.onconnect(e)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case ya.EVENT:case ya.BINARY_EVENT:this.onevent(t);break;case ya.ACK:case ya.BINARY_ACK:this.onack(t);break;case ya.DISCONNECT:this.ondisconnect();break;case ya.CONNECT_ERROR:this.destroy();const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];null!=t.id&&e.push(this.ack(t.id)),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const n of e)n.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let n=!1;return function(...i){n||(n=!0,e.packet({type:ya.ACK,id:t,data:i}))}}onack(t){const e=this.acks[t.id];"function"==typeof e&&(e.apply(this,t.data),delete this.acks[t.id])}onconnect(t){this.id=t,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>this.packet(t))),this.sendBuffer=[]}ondisconnect(){this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&this.packet({type:ya.DISCONNECT}),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}timeout(t){return this.flags.timeout=t,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let n=0;n<e.length;n++)if(t===e[n])return e.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}var Ca=r(10);class Sa extends Ts.Q{constructor(e,n){var i;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(n=e,e=void 0),(n=n||{}).path=n.path||"/socket.io",this.opts=n,Os(this,n),this.reconnection(!1!==n.reconnection),this.reconnectionAttempts(n.reconnectionAttempts||1/0),this.reconnectionDelay(n.reconnectionDelay||1e3),this.reconnectionDelayMax(n.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(i=n.randomizationFactor)&&void 0!==i?i:.5),this.backoff=new Ca({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==n.timeout?2e4:n.timeout),this._readyState="closed",this.uri=e;const r=n.parser||t;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==n.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(~this._readyState.indexOf("open"))return this;this.engine=new sa(this.uri,this.opts);const e=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const i=wa(e,"open",(function(){n.onopen(),t&&t()})),r=wa(e,"error",(e=>{n.cleanup(),n._readyState="closed",this.emitReserved("error",e),t?t(e):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;0===t&&i();const n=this.setTimeoutFn((()=>{i(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(i),this.subs.push(r),this}connect(t){return this.open(t)}onopen(){this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(wa(t,"ping",this.onping.bind(this)),wa(t,"data",this.ondata.bind(this)),wa(t,"error",this.onerror.bind(this)),wa(t,"close",this.onclose.bind(this)),wa(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){this.decoder.add(t)}ondecoded(t){this.emitReserved("packet",t)}onerror(t){this.emitReserved("error",t)}socket(t,e){let n=this.nsps[t];return n||(n=new Aa(this,t,e),this.nsps[t]=n),n}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return;this._close()}_packet(t){const e=this.encoder.encode(t);for(let n=0;n<e.length;n++)this.engine.write(e[n],t.options)}cleanup(){this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t){this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();this._reconnecting=!0;const n=this.setTimeoutFn((()=>{t.skipReconnect||(this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):t.onreconnect()})))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}const Ea={};function Ma(t,e){"object"==typeof t&&(e=t,t=void 0);const n=function(t,e="",n){let i=t;n=n||"undefined"!=typeof location&&location,null==t&&(t=n.protocol+"//"+n.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?n.protocol+t:n.host+t),/^(https?|wss?):\/\//.test(t)||(t=void 0!==n?n.protocol+"//"+t:"https://"+t),i=ks(t)),i.port||(/^(http|ws)$/.test(i.protocol)?i.port="80":/^(http|ws)s$/.test(i.protocol)&&(i.port="443")),i.path=i.path||"/";const r=-1!==i.host.indexOf(":")?"["+i.host+"]":i.host;return i.id=i.protocol+"://"+r+":"+i.port+e,i.href=i.protocol+"://"+r+(n&&n.port===i.port?"":":"+i.port),i}(t,(e=e||{}).path||"/socket.io"),i=n.source,r=n.id,o=n.path,s=Ea[r]&&o in Ea[r].nsps;let a;return e.forceNew||e["force new connection"]||!1===e.multiplex||s?a=new Sa(i,e):(Ea[r]||(Ea[r]=new Sa(i,e)),a=Ea[r]),n.query&&!e.query&&(e.query=n.queryKey),a.socket(n.path,e)}function Pa(t){return(0,A.jsxs)("div",{className:"container2",children:[(0,A.jsx)("img",{src:t.flag,className:"image"}),(0,A.jsx)("p",{className:"country",children:t.départ})]})}function Oa(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,i)}return n}function Ta(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?Oa(Object(n),!0).forEach((function(e){Da(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):Oa(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function Da(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function La(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}function Ra(){var t=66,n=(new Date).toISOString().substring(0,10),i=function(t,e){return function(t){if(Array.isArray(t))return t}(t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,r,o=[],s=!0,a=!1;try{for(n=n.call(t);!(s=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);s=!0);}catch(t){a=!0,r=t}finally{try{s||null==n.return||n.return()}finally{if(a)throw r}}return o}}(t,e)||function(t,e){if(t){if("string"==typeof t)return La(t,e);var n=Object.prototype.toString.call(t).slice(8,-1);return"Object"===n&&t.constructor&&(n=t.constructor.name),"Map"===n||"Set"===n?Array.from(t):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?La(t,e):void 0}}(t,e)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(e.useState("Paris"),2),r=i[0],o=i[1],s=[{id:1,"départ":"Paris",flag:u},{id:2,"départ":"Arriyad",flag:d},{id:3,"départ":"Washington",flag:c},{id:4,"départ":"Berlin",flag:f},{id:5,"départ":"London",flag:h},{id:6,"départ":"London",flag:h},{id:7,"départ":"London",flag:h},{id:8,"départ":"London",flag:h}],a=[{depart:r,arrivee:"London",date:"12/9/2022",statut:"en retard",retard:"9"},{depart:r,arrivee:"Munich",date:"16/9/2022",statut:"non",retard:"9"},{depart:r,arrivee:"Abu dabi",date:"10/9/2022",statut:"non",retard:"9"},{depart:r,arrivee:"arriyad",date:"14/9/2022",statut:"en retard",retard:"9"},{depart:r,arrivee:"moscow",date:"6/9/2022",statut:"en retard",retard:"9"},{depart:r,arrivee:"Madrid",date:"22/9/2022",statut:"non",retard:"9"},{depart:r,arrivee:"Marseille",date:"9/9/2022",statut:"en retard",retard:"9"},{depart:r,arrivee:"Marseille",date:"9/9/2022",statut:"en retard",retard:"9"},{depart:r,arrivee:"Barcelone",date:"11/9/2022",statut:"non",retard:"9"},{depart:r,arrivee:"Rabat",date:"30/9/2022",statut:"en retard",retard:"9"},{depart:r,arrivee:"Pékin",date:"4/9/2022",statut:"en retard",retard:"9"}];return(0,A.jsxs)("div",{className:"containerGlobal",children:[(0,A.jsxs)("div",{className:"container",children:[(0,A.jsxs)("div",{className:"container3",children:[(0,A.jsx)("img",{src:p,className:"image2"}),(0,A.jsx)("h4",{children:"Realtime Dashboard"})]}),(0,A.jsx)("div",{className:"container1",children:s.map((function(t){return(0,A.jsx)("div",{onClick:function(){return o(t.départ)},children:(0,A.jsx)(Pa,Ta({},t))})}))})]}),(0,A.jsxs)("div",{className:"container4",children:[(0,A.jsx)("label",{className:"date",children:n}),(0,A.jsxs)("div",{className:"container5",children:[(0,A.jsxs)("div",{className:"box",children:[(0,A.jsx)("div",{className:"labeldiv1"}),(0,A.jsxs)("div",{className:"boxDiv1",children:[(0,A.jsxs)("div",{children:[(0,A.jsx)("label",{children:"vols en retard"}),(0,A.jsx)("p",{children:"42 vols"})]}),(0,A.jsx)("div",{style:{width:100,height:100,marginLeft:70},children:(0,A.jsx)(v,{styles:x({pathColor:"red"}),value:t,text:"".concat(t,"%")})})]}),(0,A.jsx)("label",{children:"retard ~~ 10 minutes"})]}),(0,A.jsxs)("div",{className:"box",children:[(0,A.jsx)("div",{className:"labeldiv2"}),(0,A.jsxs)("div",{className:"boxDiv1",children:[(0,A.jsxs)("div",{children:[(0,A.jsx)("label",{children:"vols en retard"}),(0,A.jsx)("p",{children:"80 vols"})]}),(0,A.jsx)("div",{style:{width:100,height:100,marginLeft:70},children:(0,A.jsx)(v,{styles:x({pathColor:"orange"}),value:t,text:"".concat(t,"%")})})]}),(0,A.jsx)("label",{children:"retard ~~ 5 minutes"})]}),(0,A.jsxs)("div",{className:"box",children:[(0,A.jsx)("div",{className:"labeldiv3"}),(0,A.jsxs)("div",{className:"boxDiv1",children:[(0,A.jsxs)("div",{children:[(0,A.jsx)("label",{children:"vols en retard"}),(0,A.jsx)("p",{children:"64"})]}),(0,A.jsx)("div",{style:{width:100,height:100,marginLeft:70},children:(0,A.jsx)(v,{styles:x({pathColor:"green"}),value:t,text:"".concat(t,"%")})})]}),(0,A.jsx)("label",{children:"retard ~~ 2 minutes"})]})]}),(0,A.jsxs)("div",{className:"box2",children:[(0,A.jsxs)("h4",{children:["Détails des vols pour ",r]}),(0,A.jsx)(ws,{})]})]}),(0,A.jsx)("div",{className:"sideContainer",children:(0,A.jsxs)("table",{className:"table",children:[(0,A.jsxs)("tr",{className:"tr",children:[(0,A.jsx)("th",{className:"th",children:"Gare de départ"}),(0,A.jsx)("th",{className:"th",children:"Gare d'arrivé"}),(0,A.jsx)("th",{className:"th",children:"Date de départ"}),(0,A.jsx)("th",{className:"th",children:"statut"}),(0,A.jsx)("th",{className:"th",children:"temps de retard"})]}),(0,A.jsx)("tbody",{children:a.map((function(t){return(0,A.jsx)(C,Ta({},t))}))})]})})]})}Object.assign(Ma,{Manager:Sa,Socket:Aa,io:Ma,connect:Ma});var Ia,Ba=function(){return(0,A.jsx)(Ra,{})};n.render((0,A.jsx)(e.StrictMode,{children:(0,A.jsx)(Ba,{})}),document.getElementById("root")),Ia&&Ia instanceof Function&&r.e(131).then(r.bind(r,131)).then((function(t){var e=t.getCLS,n=t.getFID,i=t.getFCP,r=t.getLCP,o=t.getTTFB;e(Ia),n(Ia),i(Ia),r(Ia),o(Ia)}))}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,